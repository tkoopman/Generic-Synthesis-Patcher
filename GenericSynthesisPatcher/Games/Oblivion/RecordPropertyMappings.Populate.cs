using System.Drawing;

using GenericSynthesisPatcher.Games.Universal.Action;

using Mutagen.Bethesda.Oblivion;

using Noggog;

namespace GenericSynthesisPatcher.Games.Oblivion
{
    public partial class RecordPropertyMappings
    {
        private void populateMappings ()
        {
#pragma warning disable format
            Add(typeof(ICombatStyleGetter)   , "Advanced.AttackDuringBlockMult"                 , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)   , "Advanced.AttackNotUnderAttackMult"              , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)   , "Advanced.AttackSkillModifierBase"               , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)   , "Advanced.AttackSkillModifierMult"               , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)   , "Advanced.AttackWhileUnderAttackMult"            , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)   , "Advanced.BlockNotUnderAttackMult"               , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)   , "Advanced.BlockSkillModifierBase"                , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)   , "Advanced.BlockSkillModifierMult"                , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)   , "Advanced.BlockWhileUnderAttackMult"             , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)   , "Advanced.DodgeBackNotUnderAttackMult"           , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)   , "Advanced.DodgeBackWhileUnderAttackMult"         , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)   , "Advanced.DodgeFatigueModBase"                   , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)   , "Advanced.DodgeFatigueModMult"                   , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)   , "Advanced.DodgeForwardNotUnderAttackMult"        , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)   , "Advanced.DodgeForwardWhileUnderAttackMult"      , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)   , "Advanced.DodgeNotUnderAttackMult"               , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)   , "Advanced.DodgeWhileUnderAttackMult"             , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)   , "Advanced.EncumbSpeedModBase"                    , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)   , "Advanced.EncumbSpeedModMult"                    , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)   , "Advanced.PowerAttackFatigueModBase"             , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)   , "Advanced.PowerAttackFatigueModMult"             , ConvertibleAction<float>.Instance);
            Add(typeof(INpcGetter)           , "AIData.Aggression"                              , ConvertibleAction<byte>.Instance);
            Add(typeof(INpcGetter)           , "AIData.BuySellServices"                         , FlagsAction.Instance);
            Add(typeof(INpcGetter)           , "AIData.Confidence"                              , ConvertibleAction<byte>.Instance);
            Add(typeof(INpcGetter)           , "AIData.EnergyLevel"                             , ConvertibleAction<byte>.Instance);
            Add(typeof(INpcGetter)           , "AIData.MaximumTrainingLevel"                    , ConvertibleAction<byte>.Instance);
            Add(typeof(INpcGetter)           , "AIData.Responsibility"                          , ConvertibleAction<byte>.Instance);
            Add(typeof(INpcGetter)           , "AIData.Teaches"                                 , EnumsAction.Instance);
            Add(typeof(INpcGetter)           , "AIPackages"                                     , FormLinksAction<IAIPackageGetter>.Instance);
            Add(typeof(IIdleAnimationGetter) , "AnimationGroupSection"                          , EnumsAction.Instance);
            Add(typeof(ITreeGetter)          , "BillboardDimensions.Height"                     , ConvertibleAction<float>.Instance);
            Add(typeof(ITreeGetter)          , "BillboardDimensions.Width"                      , ConvertibleAction<float>.Instance);
            Add(typeof(ILeveledItemGetter)   , "ChanceNone"                                     , BasicAction<Percent>.Instance);
            Add(typeof(INpcGetter)           , "Class"                                          , FormLinkAction<IClassGetter>.Instance);
            Add(typeof(ICellGetter)          , "Climate"                                        , FormLinkAction<IClimateGetter>.Instance);
            Add(typeof(IWorldspaceGetter)    , "Climate"                                        , FormLinkAction<IClimateGetter>.Instance);
            Add(typeof(IContainerGetter)     , "CloseSound"                                     , FormLinkAction<ISoundGetter>.Instance);
            Add(typeof(IDoorGetter)          , "CloseSound"                                     , FormLinkAction<ISoundGetter>.Instance);
            Add(typeof(IArmorGetter)         , "ClothingFlags.BipedFlags"                       , FlagsAction.Instance);
            Add(typeof(IArmorGetter)         , "ClothingFlags.GeneralFlags"                     , FlagsAction.Instance);
            Add(typeof(INpcGetter)           , "CombatStyle"                                    , FormLinkAction<ICombatStyleGetter>.Instance);
            Add(typeof(INpcGetter)           , "Configuration.BarterGold"                       , ConvertibleAction<ushort>.Instance);
            Add(typeof(INpcGetter)           , "Configuration.BaseSpellPoints"                  , ConvertibleAction<ushort>.Instance);
            Add(typeof(INpcGetter)           , "Configuration.CalcMax"                          , ConvertibleAction<ushort>.Instance);
            Add(typeof(INpcGetter)           , "Configuration.CalcMin"                          , ConvertibleAction<ushort>.Instance);
            Add(typeof(INpcGetter)           , "Configuration.Fatigue"                          , ConvertibleAction<ushort>.Instance);
            Add(typeof(INpcGetter)           , "Configuration.Flags"                            , FlagsAction.Instance);
            Add(typeof(INpcGetter)           , "Configuration.LevelOffset"                      , ConvertibleAction<short>.Instance);
            Add(typeof(IFactionGetter)       , "CrimeGoldMultiplier"                            , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)   , "Data.AcrobaticDodgePercentChance"               , ConvertibleAction<byte>.Instance);
            Add(typeof(IArmorGetter)         , "Data.ArmorValue"                                , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)   , "Data.AttackPercentChance"                       , ConvertibleAction<byte>.Instance);
            Add(typeof(IMagicEffectGetter)   , "Data.BaseCost"                                  , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)   , "Data.BlockPercentChance"                        , ConvertibleAction<byte>.Instance);
            Add(typeof(ITreeGetter)          , "Data.BranchDimmingValue"                        , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)   , "Data.BuffStandoffDistance"                      , ConvertibleAction<float>.Instance);
            Add(typeof(IWeatherGetter)       , "Data.Classification"                            , EnumsAction.Instance);
            Add(typeof(IClassGetter)         , "Data.ClassServices"                             , FlagsAction.Instance);
            Add(typeof(IWeatherGetter)       , "Data.CloudSpeedLower"                           , ConvertibleAction<byte>.Instance);
            Add(typeof(IWeatherGetter)       , "Data.CloudSpeedUpper"                           , ConvertibleAction<byte>.Instance);
            Add(typeof(ILightGetter)         , "Data.Color"                                     , BasicAction<Color>.Instance);
            Add(typeof(IEffectShaderGetter)  , "Data.ColorKey1Color"                            , BasicAction<Color>.Instance);
            Add(typeof(IEffectShaderGetter)  , "Data.ColorKey1ColorAlpha"                       , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)  , "Data.ColorKey1ColorKeyTime"                     , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)  , "Data.ColorKey2Color"                            , BasicAction<Color>.Instance);
            Add(typeof(IEffectShaderGetter)  , "Data.ColorKey2ColorAlpha"                       , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)  , "Data.ColorKey2ColorKeyTime"                     , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)  , "Data.ColorKey3Color"                            , BasicAction<Color>.Instance);
            Add(typeof(IEffectShaderGetter)  , "Data.ColorKey3ColorAlpha"                       , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)  , "Data.ColorKey3ColorKeyTime"                     , ConvertibleAction<float>.Instance);
            Add(typeof(IGrassGetter)         , "Data.ColorRange"                                , ConvertibleAction<float>.Instance);
            Add(typeof(ISpellGetter)         , "Data.Cost"                                      , ConvertibleAction<uint>.Instance);
            Add(typeof(IMagicEffectGetter)   , "Data.CounterEffectCount"                        , ConvertibleAction<uint>.Instance);
            Add(null                         , "Data.Damage"                                    , ConvertibleAction<ushort>.Instance);
            Add(typeof(IWaterGetter)         , "Data.DeepColor"                                 , BasicAction<Color>.Instance);
            Add(typeof(IGrassGetter)         , "Data.Density"                                   , ConvertibleAction<byte>.Instance);
            Add(typeof(IWaterGetter)         , "Data.DisplacementSimulatorDampner"              , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)         , "Data.DisplacementSimulatorFalloff"              , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)         , "Data.DisplacementSimulatorForce"                , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)         , "Data.DisplacementSimulatorStartingSize"         , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)         , "Data.DisplacementSimulatorVelocity"             , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)   , "Data.DodgeBackTimerMax"                         , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)   , "Data.DodgeBackTimerMin"                         , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)   , "Data.DodgeForwardTimerMax"                      , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)   , "Data.DodgeForwardTimerMin"                      , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)   , "Data.DodgeLeftRightTimerMax"                    , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)   , "Data.DodgeLeftRightTimerMin"                    , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)   , "Data.DodgePercentChance"                        , ConvertibleAction<byte>.Instance);
            Add(typeof(IEffectShaderGetter)  , "Data.EdgeEffectAlphaFadeInTime"                 , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)  , "Data.EdgeEffectAlphaFadeOutTime"                , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)  , "Data.EdgeEffectAlphaPulseAmplitude"             , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)  , "Data.EdgeEffectAlphaPulseFrequency"             , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)  , "Data.EdgeEffectColor"                           , BasicAction<Color>.Instance);
            Add(typeof(IEffectShaderGetter)  , "Data.EdgeEffectFallOff"                         , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)  , "Data.EdgeEffectFullAlphaRatio"                  , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)  , "Data.EdgeEffectFullAlphaTime"                   , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)  , "Data.EdgeEffectPersistentAlphaRatio"            , ConvertibleAction<float>.Instance);
            Add(typeof(IMagicEffectGetter)   , "Data.EffectShader"                              , FormLinkAction<IEffectShaderGetter>.Instance);
            Add(typeof(ILightGetter)         , "Data.FalloffExponent"                           , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)  , "Data.FillTextureEffectAlphaFadeInTime"          , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)  , "Data.FillTextureEffectAlphaFadeOutTime"         , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)  , "Data.FillTextureEffectAlphaPulseAmplitude"      , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)  , "Data.FillTextureEffectAlphaPulseFrequency"      , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)  , "Data.FillTextureEffectColor"                    , BasicAction<Color>.Instance);
            Add(typeof(IEffectShaderGetter)  , "Data.FillTextureEffectFullAlphaRatio"           , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)  , "Data.FillTextureEffectFullAlphaTime"            , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)  , "Data.FillTextureEffectPersistentAlphaRatio"     , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)  , "Data.FillTextureEffectTextureAnimationSpeedU"   , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)  , "Data.FillTextureEffectTextureAnimationSpeedV"   , ConvertibleAction<float>.Instance);
            Add(typeof(ISpellGetter)         , "Data.Flag"                                      , FlagsAction.Instance);
            Add(null                         , "Data.Flags"                                     , FlagsAction.Instance);
            Add(typeof(IGrassGetter)         , "Data.Fluff1"                                    , ConvertibleAction<byte>.Instance);
            Add(typeof(IGrassGetter)         , "Data.Fluff2"                                    , ConvertibleAction<ushort>.Instance);
            Add(typeof(IWaterGetter)         , "Data.FogDistanceFarPlane"                       , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)         , "Data.FogDistanceNearPlane"                      , ConvertibleAction<float>.Instance);
            Add(typeof(ILightGetter)         , "Data.FOV"                                       , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)         , "Data.FresnelAmount"                             , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)   , "Data.GroupStandoffDistance"                     , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)   , "Data.HandToHandBonusToAttack"                   , ConvertibleAction<float>.Instance);
            Add(typeof(IArmorGetter)         , "Data.Health"                                    , ConvertibleAction<uint>.Instance);
            Add(typeof(IWeaponGetter)        , "Data.Health"                                    , ConvertibleAction<uint>.Instance);
            Add(typeof(IGrassGetter)         , "Data.HeightRange"                               , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)   , "Data.HoldTimerMax"                              , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)   , "Data.HoldTimerMin"                              , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)   , "Data.IdleTimerMax"                              , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)   , "Data.IdleTimerMin"                              , ConvertibleAction<float>.Instance);
            Add(typeof(ITreeGetter)          , "Data.LeafCurvature"                             , ConvertibleAction<float>.Instance);
            Add(typeof(ITreeGetter)          , "Data.LeafDimmingValue"                          , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)   , "Data.LeftRightPercentChance"                    , ConvertibleAction<byte>.Instance);
            Add(typeof(ISpellGetter)         , "Data.Level"                                     , EnumsAction.Instance);
            Add(typeof(IMagicEffectGetter)   , "Data.Light"                                     , FormLinkAction<ILightGetter>.Instance);
            Add(typeof(IWeatherGetter)       , "Data.LightningColor"                            , BasicAction<Color>.Instance);
            Add(typeof(IMagicEffectGetter)   , "Data.MagicSchool"                               , EnumsAction.Instance);
            Add(typeof(ITreeGetter)          , "Data.MaximumLeafAngle"                          , ConvertibleAction<float>.Instance);
            Add(typeof(IGrassGetter)         , "Data.MaxSlope"                                  , ConvertibleAction<byte>.Instance);
            Add(typeof(IEffectShaderGetter)  , "Data.MembraneShaderBlendOperation"              , EnumsAction.Instance);
            Add(typeof(IEffectShaderGetter)  , "Data.MembraneShaderDestBlendMode"               , EnumsAction.Instance);
            Add(typeof(IEffectShaderGetter)  , "Data.MembraneShaderSourceBlendMode"             , EnumsAction.Instance);
            Add(typeof(IEffectShaderGetter)  , "Data.MembraneShaderZTestFunction"               , EnumsAction.Instance);
            Add(typeof(ITreeGetter)          , "Data.MinimumLeafAngle"                          , ConvertibleAction<float>.Instance);
            Add(typeof(IGrassGetter)         , "Data.MinSlope"                                  , ConvertibleAction<byte>.Instance);
            Add(typeof(IEffectShaderGetter)  , "Data.ParticleShaderAcceleration1"               , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)  , "Data.ParticleShaderAcceleration2"               , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)  , "Data.ParticleShaderAcceleration3"               , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)  , "Data.ParticleShaderAccelerationAlongNormal"     , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)  , "Data.ParticleShaderBlendOperation"              , EnumsAction.Instance);
            Add(typeof(IEffectShaderGetter)  , "Data.ParticleShaderDestBlendMode"               , EnumsAction.Instance);
            Add(typeof(IEffectShaderGetter)  , "Data.ParticleShaderFullParticleBirthRatio"      , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)  , "Data.ParticleShaderFullParticleBirthTime"       , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)  , "Data.ParticleShaderInitialSpeedAlongNormal"     , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)  , "Data.ParticleShaderInitialVelocity1"            , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)  , "Data.ParticleShaderInitialVelocity2"            , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)  , "Data.ParticleShaderInitialVelocity3"            , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)  , "Data.ParticleShaderParticleBirthRampDownTime"   , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)  , "Data.ParticleShaderParticleBirthRampUpTime"     , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)  , "Data.ParticleShaderParticleLifetime"            , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)  , "Data.ParticleShaderParticleLifetimePlusMinus"   , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)  , "Data.ParticleShaderPersistentParticleBirthRatio", ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)  , "Data.ParticleShaderScaleKey1"                   , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)  , "Data.ParticleShaderScaleKey1Time"               , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)  , "Data.ParticleShaderScaleKey2"                   , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)  , "Data.ParticleShaderScaleKey2Time"               , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)  , "Data.ParticleShaderSourceBlendMode"             , EnumsAction.Instance);
            Add(typeof(IEffectShaderGetter)  , "Data.ParticleShaderZTestFunction"               , EnumsAction.Instance);
            Add(typeof(IClimateGetter)       , "Data.Phase"                                     , EnumsAction.Instance);
            Add(typeof(IClimateGetter)       , "Data.PhaseLength"                               , ConvertibleAction<byte>.Instance);
            Add(typeof(IGrassGetter)         , "Data.PositionRange"                             , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)   , "Data.PowerAttackBack"                           , ConvertibleAction<byte>.Instance);
            Add(typeof(ICombatStyleGetter)   , "Data.PowerAttackForward"                        , ConvertibleAction<byte>.Instance);
            Add(typeof(ICombatStyleGetter)   , "Data.PowerAttackLeft"                           , ConvertibleAction<byte>.Instance);
            Add(typeof(ICombatStyleGetter)   , "Data.PowerAttackNormal"                         , ConvertibleAction<byte>.Instance);
            Add(typeof(ICombatStyleGetter)   , "Data.PowerAttackPercentChance"                  , ConvertibleAction<byte>.Instance);
            Add(typeof(ICombatStyleGetter)   , "Data.PowerAttackRight"                          , ConvertibleAction<byte>.Instance);
            Add(typeof(IWeatherGetter)       , "Data.PrecipitationBeginFadeIn"                  , ConvertibleAction<byte>.Instance);
            Add(typeof(IWeatherGetter)       , "Data.PrecipitationEndFadeOut"                   , ConvertibleAction<byte>.Instance);
            Add(typeof(IQuestGetter)         , "Data.Priority"                                  , ConvertibleAction<byte>.Instance);
            Add(typeof(IMagicEffectGetter)   , "Data.ProjectileSpeed"                           , ConvertibleAction<float>.Instance);
            Add(typeof(ILightGetter)         , "Data.Radius"                                    , ConvertibleAction<uint>.Instance);
            Add(typeof(IWaterGetter)         , "Data.RainSimulatorDampner"                      , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)         , "Data.RainSimulatorFalloff"                      , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)         , "Data.RainSimulatorForce"                        , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)         , "Data.RainSimulatorStartingSize"                 , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)         , "Data.RainSimulatorVelocity"                     , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)   , "Data.RangedStandoffDistance"                    , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)   , "Data.RangeMultMax"                              , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)   , "Data.RangeMultOptimal"                          , ConvertibleAction<float>.Instance);
            Add(typeof(IWeaponGetter)        , "Data.Reach"                                     , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)   , "Data.RecoilStaggerBonusToAttack"                , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)   , "Data.RecoilStaggerBonusToPowerAttack"           , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)         , "Data.ReflectionColor"                           , BasicAction<Color>.Instance);
            Add(typeof(IWaterGetter)         , "Data.ReflectivityAmount"                        , ConvertibleAction<float>.Instance);
            Add(typeof(IMagicEffectGetter)   , "Data.Resistance"                                , EnumsAction.Instance);
            Add(typeof(ITreeGetter)          , "Data.RockingSpeed"                              , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)   , "Data.RushingAttackDistanceMult"                 , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)   , "Data.RushingAttackPercentChance"                , ConvertibleAction<byte>.Instance);
            Add(typeof(ITreeGetter)          , "Data.RustleSpeed"                               , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)         , "Data.ScrollXSpeed"                              , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)         , "Data.ScrollYSpeed"                              , ConvertibleAction<float>.Instance);
            Add(typeof(ITreeGetter)          , "Data.ShadowRadius"                              , ConvertibleAction<int>.Instance);
            Add(typeof(IWaterGetter)         , "Data.ShallowColor"                              , BasicAction<Color>.Instance);
            Add(typeof(IClassGetter)         , "Data.Specialization"                            , EnumsAction.Instance);
            Add(typeof(IAmmunitionGetter)    , "Data.Speed"                                     , ConvertibleAction<float>.Instance);
            Add(typeof(IWeaponGetter)        , "Data.Speed"                                     , ConvertibleAction<float>.Instance);
            Add(typeof(IWeatherGetter)       , "Data.SunDamage"                                 , ConvertibleAction<byte>.Instance);
            Add(typeof(IWeatherGetter)       , "Data.SunGlare"                                  , ConvertibleAction<byte>.Instance);
            Add(typeof(IWaterGetter)         , "Data.SunPower"                                  , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)   , "Data.SwitchDistanceMelee"                       , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)   , "Data.SwitchDistanceRanged"                      , ConvertibleAction<float>.Instance);
            Add(typeof(IBookGetter)          , "Data.Teaches"                                   , EnumsAction.Instance);
            Add(typeof(IWaterGetter)         , "Data.TextureBlend"                              , ConvertibleAction<byte>.Instance);
            Add(typeof(IWeatherGetter)       , "Data.ThunderLightningBeginFadeIn"               , ConvertibleAction<byte>.Instance);
            Add(typeof(IWeatherGetter)       , "Data.ThunderLightningEndFadeOut"                , ConvertibleAction<byte>.Instance);
            Add(typeof(IWeatherGetter)       , "Data.ThunderLightningFrequency"                 , ConvertibleAction<byte>.Instance);
            Add(typeof(ILightGetter)         , "Data.Time"                                      , ConvertibleAction<int>.Instance);
            Add(typeof(IWeatherGetter)       , "Data.TransDelta"                                , ConvertibleAction<byte>.Instance);
            Add(typeof(ISpellGetter)         , "Data.Type"                                      , EnumsAction.Instance);
            Add(typeof(IWeaponGetter)        , "Data.Type"                                      , EnumsAction.Instance);
            Add(typeof(ICombatStyleGetter)   , "Data.UnconsciousBonusToAttack"                  , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)   , "Data.UnconsciousBonusToPowerAttack"             , ConvertibleAction<float>.Instance);
            Add(typeof(IGrassGetter)         , "Data.UnitFromWaterAmount"                       , ConvertibleAction<ushort>.Instance);
            Add(typeof(IGrassGetter)         , "Data.UnitFromWaterMode"                         , EnumsAction.Instance);
            Add(typeof(IBookGetter)          , "Data.Value"                                     , ConvertibleAction<float>.Instance);
            Add(null                         , "Data.Value"                                     , ConvertibleAction<uint>.Instance);
            Add(typeof(IClimateGetter)       , "Data.Volatility"                                , ConvertibleAction<byte>.Instance);
            Add(typeof(IWaterGetter)         , "Data.WaveAmplitude"                             , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)         , "Data.WaveFrequency"                             , ConvertibleAction<float>.Instance);
            Add(typeof(IGrassGetter)         , "Data.WavePeriod"                                , ConvertibleAction<float>.Instance);
            Add(typeof(IAmmunitionGetter)    , "Data.Weight"                                    , ConvertibleAction<float>.Instance);
            Add(typeof(IArmorGetter)         , "Data.Weight"                                    , ConvertibleAction<float>.Instance);
            Add(typeof(IBookGetter)          , "Data.Weight"                                    , ConvertibleAction<float>.Instance);
            Add(typeof(IContainerGetter)     , "Data.Weight"                                    , ConvertibleAction<float>.Instance);
            Add(typeof(IKeyGetter)           , "Data.Weight"                                    , ConvertibleAction<float>.Instance);
            Add(typeof(ILightGetter)         , "Data.Weight"                                    , ConvertibleAction<float>.Instance);
            Add(typeof(IWeaponGetter)        , "Data.Weight"                                    , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)         , "Data.WindDirection"                             , ConvertibleAction<float>.Instance);
            Add(typeof(IWeatherGetter)       , "Data.WindSpeed"                                 , ConvertibleAction<byte>.Instance);
            Add(typeof(IWaterGetter)         , "Data.WindVelocity"                              , ConvertibleAction<float>.Instance);
            Add(typeof(INpcGetter)           , "DeathItem"                                      , FormLinkAction<IItemGetter>.Instance);
            Add(typeof(IRaceGetter)          , "DefaultHair.Female"                             , FormLinkAction<IHairGetter>.Instance);
            Add(typeof(IRaceGetter)          , "DefaultHair.Male"                               , FormLinkAction<IHairGetter>.Instance);
            Add(typeof(IRaceGetter)          , "DefaultHairColor"                               , ConvertibleAction<byte>.Instance);
            Add(null                         , "Description"                                    , ConvertibleAction<string>.Instance);
            Add(typeof(IDialogTopicGetter)   , "DialogType"                                     , EnumsAction.Instance);
            Add(null                         , "EditorID"                                       , ConvertibleAction<string>.Instance);
            Add(null                         , "Enchantment"                                    , FormLinkAction<IEnchantmentGetter>.Instance);
            Add(null                         , "EnchantmentPoints"                              , ConvertibleAction<ushort>.Instance);
            Add(typeof(INpcGetter)           , "Eyes"                                           , FormLinksAction<IEyeGetter>.Instance);
            Add(typeof(IRaceGetter)          , "Eyes"                                           , FormLinksAction<IEyeGetter>.Instance);
            Add(typeof(IRaceGetter)          , "FaceGenData.AsymmetricGeometry"                 , MemorySliceByteAction.Instance);
            Add(typeof(IRaceGetter)          , "FaceGenData.SymmetricGeometry"                  , MemorySliceByteAction.Instance);
            Add(typeof(IRaceGetter)          , "FaceGenData.SymmetricTexture"                   , MemorySliceByteAction.Instance);
            Add(typeof(IRaceGetter)          , "FaceGenFaceClamp"                               , ConvertibleAction<int>.Instance);
            Add(typeof(INpcGetter)           , "FaceGenGeometryAsymmetric"                      , MemorySliceByteAction.Instance);
            Add(typeof(INpcGetter)           , "FaceGenGeometrySymmetric"                       , MemorySliceByteAction.Instance);
            Add(typeof(IRaceGetter)          , "FaceGenMainClamp"                               , ConvertibleAction<int>.Instance);
            Add(typeof(INpcGetter)           , "FaceGenTextureSymmetric"                        , MemorySliceByteAction.Instance);
            Add(typeof(ICellGetter)          , "FactionRank"                                    , ConvertibleAction<int>.Instance);
            Add(typeof(ILightGetter)         , "Fade"                                           , ConvertibleAction<float>.Instance);
            Add(typeof(IArmorGetter)         , "FemaleBipedModel.BoundRadius"                   , ConvertibleAction<float>.Instance);
            Add(typeof(IArmorGetter)         , "FemaleBipedModel.File"                          , ConvertibleAction<string>.Instance);
            Add(typeof(IArmorGetter)         , "FemaleBipedModel.Hashes"                        , MemorySliceByteAction.Instance);
            Add(typeof(IArmorGetter)         , "FemaleIcon"                                     , ConvertibleAction<string>.Instance);
            Add(typeof(IArmorGetter)         , "FemaleWorldModel.BoundRadius"                   , ConvertibleAction<float>.Instance);
            Add(typeof(IArmorGetter)         , "FemaleWorldModel.File"                          , ConvertibleAction<string>.Instance);
            Add(typeof(IArmorGetter)         , "FemaleWorldModel.Hashes"                        , MemorySliceByteAction.Instance);
            Add(typeof(IEffectShaderGetter)  , "FillTexture"                                    , ConvertibleAction<string>.Instance);
            Add(null                         , "Flags"                                          , FlagsAction.Instance);
            Add(typeof(INpcGetter)           , "FNAM"                                           , MemorySliceByteAction.Instance);
            Add(typeof(IWeatherGetter)       , "FogDistance.DayFar"                             , ConvertibleAction<float>.Instance);
            Add(typeof(IWeatherGetter)       , "FogDistance.DayNear"                            , ConvertibleAction<float>.Instance);
            Add(typeof(IWeatherGetter)       , "FogDistance.NightFar"                           , ConvertibleAction<float>.Instance);
            Add(typeof(IWeatherGetter)       , "FogDistance.NightNear"                          , ConvertibleAction<float>.Instance);
            Add(typeof(ICellGetter)          , "GlobalVariable"                                 , FormLinkAction<IGlobalGetter>.Instance);
            Add(typeof(IRegionGetter)        , "Grasses.Flags"                                  , FlagsAction.Instance);
            Add(typeof(IRegionGetter)        , "Grasses.Grasses"                                , FormLinksAction<IGrassGetter>.Instance);
            Add(typeof(IRegionGetter)        , "Grasses.Priority"                               , ConvertibleAction<byte>.Instance);
            Add(typeof(ICellGetter)          , "Grid.X"                                         , ConvertibleAction<int>.Instance);
            Add(typeof(ICellGetter)          , "Grid.Y"                                         , ConvertibleAction<int>.Instance);
            Add(typeof(INpcGetter)           , "Hair"                                           , FormLinkAction<IHairGetter>.Instance);
            Add(typeof(INpcGetter)           , "HairColor"                                      , BasicAction<Color>.Instance);
            Add(typeof(INpcGetter)           , "HairLength"                                     , ConvertibleAction<float>.Instance);
            Add(typeof(IRaceGetter)          , "Hairs"                                          , FormLinksAction<IHairGetter>.Instance);
            Add(typeof(IWeatherGetter)       , "HDRData.BlurPasses"                             , ConvertibleAction<float>.Instance);
            Add(typeof(IWeatherGetter)       , "HDRData.BlurRadius"                             , ConvertibleAction<float>.Instance);
            Add(typeof(IWeatherGetter)       , "HDRData.BrightClamp"                            , ConvertibleAction<float>.Instance);
            Add(typeof(IWeatherGetter)       , "HDRData.BrightScale"                            , ConvertibleAction<float>.Instance);
            Add(typeof(IWeatherGetter)       , "HDRData.EmissiveMult"                           , ConvertibleAction<float>.Instance);
            Add(typeof(IWeatherGetter)       , "HDRData.EyeAdaptSpeed"                          , ConvertibleAction<float>.Instance);
            Add(typeof(IWeatherGetter)       , "HDRData.GrassDimmer"                            , ConvertibleAction<float>.Instance);
            Add(typeof(IWeatherGetter)       , "HDRData.LumRampMax"                             , ConvertibleAction<float>.Instance);
            Add(typeof(IWeatherGetter)       , "HDRData.LumRampMin"                             , ConvertibleAction<float>.Instance);
            Add(typeof(IWeatherGetter)       , "HDRData.LumRampNoTex"                           , ConvertibleAction<float>.Instance);
            Add(typeof(IWeatherGetter)       , "HDRData.SunlightDimmer"                         , ConvertibleAction<float>.Instance);
            Add(typeof(IWeatherGetter)       , "HDRData.TargetLum"                              , ConvertibleAction<float>.Instance);
            Add(typeof(IWeatherGetter)       , "HDRData.TreeDimmer"                             , ConvertibleAction<float>.Instance);
            Add(typeof(IWeatherGetter)       , "HDRData.UpperLumClamp"                          , ConvertibleAction<float>.Instance);
            Add(null                         , "Icon"                                           , ConvertibleAction<string>.Instance);
            Add(typeof(IAnimatedObjectGetter), "IdleAnimation"                                  , FormLinkAction<IIdleAnimationGetter>.Instance);
            Add(typeof(IFloraGetter)         , "Ingredient"                                     , FormLinkAction<IIngredientGetter>.Instance);
            Add(typeof(ICellGetter)          , "Landscape.DATA"                                 , MemorySliceByteAction.Instance);
            Add(typeof(ICellGetter)          , "Landscape.EditorID"                             , ConvertibleAction<string>.Instance);
            Add(typeof(ICellGetter)          , "Landscape.OblivionMajorRecordFlags"             , FlagsAction.Instance);
            Add(typeof(ICellGetter)          , "Landscape.Textures"                             , FormLinksAction<ILandTextureGetter>.Instance);
            Add(typeof(ICellGetter)          , "Landscape.VertexColors"                         , MemorySliceByteAction.Instance);
            Add(typeof(ICellGetter)          , "Landscape.VertexHeightMap"                      , MemorySliceByteAction.Instance);
            Add(typeof(ICellGetter)          , "Landscape.VertexNormals"                        , MemorySliceByteAction.Instance);
            Add(typeof(ICellGetter)          , "Lighting.AmbientColor"                          , BasicAction<Color>.Instance);
            Add(typeof(ICellGetter)          , "Lighting.DirectionalColor"                      , BasicAction<Color>.Instance);
            Add(typeof(ICellGetter)          , "Lighting.DirectionalFade"                       , ConvertibleAction<float>.Instance);
            Add(typeof(ICellGetter)          , "Lighting.DirectionalRotationXY"                 , ConvertibleAction<int>.Instance);
            Add(typeof(ICellGetter)          , "Lighting.DirectionalRotationZ"                  , ConvertibleAction<int>.Instance);
            Add(typeof(ICellGetter)          , "Lighting.FogClipDistance"                       , ConvertibleAction<float>.Instance);
            Add(typeof(ICellGetter)          , "Lighting.FogColor"                              , BasicAction<Color>.Instance);
            Add(typeof(ICellGetter)          , "Lighting.FogFar"                                , ConvertibleAction<float>.Instance);
            Add(typeof(ICellGetter)          , "Lighting.FogNear"                               , ConvertibleAction<float>.Instance);
            Add(typeof(IDoorGetter)          , "LoopSound"                                      , FormLinkAction<ISoundGetter>.Instance);
            Add(typeof(IArmorGetter)         , "MaleBipedModel.BoundRadius"                     , ConvertibleAction<float>.Instance);
            Add(typeof(IArmorGetter)         , "MaleBipedModel.File"                            , ConvertibleAction<string>.Instance);
            Add(typeof(IArmorGetter)         , "MaleBipedModel.Hashes"                          , MemorySliceByteAction.Instance);
            Add(typeof(IArmorGetter)         , "MaleIcon"                                       , ConvertibleAction<string>.Instance);
            Add(typeof(IArmorGetter)         , "MaleWorldModel.BoundRadius"                     , ConvertibleAction<float>.Instance);
            Add(typeof(IArmorGetter)         , "MaleWorldModel.File"                            , ConvertibleAction<string>.Instance);
            Add(typeof(IArmorGetter)         , "MaleWorldModel.Hashes"                          , MemorySliceByteAction.Instance);
            Add(typeof(IRegionGetter)        , "MapColor"                                       , BasicAction<Color>.Instance);
            Add(typeof(IWorldspaceGetter)    , "MapData.CellCoordinatesNWCell.X"                , ConvertibleAction<short>.Instance);
            Add(typeof(IWorldspaceGetter)    , "MapData.CellCoordinatesNWCell.Y"                , ConvertibleAction<short>.Instance);
            Add(typeof(IWorldspaceGetter)    , "MapData.CellCoordinatesSECell.X"                , ConvertibleAction<short>.Instance);
            Add(typeof(IWorldspaceGetter)    , "MapData.CellCoordinatesSECell.Y"                , ConvertibleAction<short>.Instance);
            Add(typeof(IWorldspaceGetter)    , "MapData.UsableDimensions.X"                     , ConvertibleAction<int>.Instance);
            Add(typeof(IWorldspaceGetter)    , "MapData.UsableDimensions.Y"                     , ConvertibleAction<int>.Instance);
            Add(typeof(IRegionGetter)        , "MapName.Flags"                                  , FlagsAction.Instance);
            Add(typeof(IRegionGetter)        , "MapName.Map"                                    , ConvertibleAction<string>.Instance);
            Add(typeof(IRegionGetter)        , "MapName.Priority"                               , ConvertibleAction<byte>.Instance);
            Add(typeof(IFurnitureGetter)     , "MarkerFlags"                                    , ConvertibleAction<int>.Instance);
            Add(typeof(IWaterGetter)         , "MaterialID"                                     , ConvertibleAction<string>.Instance);
            Add(null                         , "Model.BoundRadius"                              , ConvertibleAction<float>.Instance);
            Add(null                         , "Model.File"                                     , ConvertibleAction<string>.Instance);
            Add(null                         , "Model.Hashes"                                   , MemorySliceByteAction.Instance);
            Add(typeof(IWorldspaceGetter)    , "Music"                                          , EnumsAction.Instance);
            Add(typeof(ICellGetter)          , "MusicType"                                      , EnumsAction.Instance);
            Add(null                         , "Name"                                           , ConvertibleAction<string>.Instance);
            Add(typeof(IWorldspaceGetter)    , "ObjectBoundsMax.X"                              , ConvertibleAction<float>.Instance);
            Add(typeof(IWorldspaceGetter)    , "ObjectBoundsMax.Y"                              , ConvertibleAction<float>.Instance);
            Add(typeof(IWorldspaceGetter)    , "ObjectBoundsMin.X"                              , ConvertibleAction<float>.Instance);
            Add(typeof(IWorldspaceGetter)    , "ObjectBoundsMin.Y"                              , ConvertibleAction<float>.Instance);
            Add(typeof(IRegionGetter)        , "Objects.Flags"                                  , FlagsAction.Instance);
            Add(typeof(IRegionGetter)        , "Objects.Priority"                               , ConvertibleAction<byte>.Instance);
            Add(null                         , "OblivionMajorRecordFlags"                       , FlagsAction.Instance);
            Add(typeof(IWorldspaceGetter)    , "OffsetData"                                     , MemorySliceByteAction.Instance);
            Add(typeof(IWaterGetter)         , "Opacity"                                        , ConvertibleAction<byte>.Instance);
            Add(typeof(IContainerGetter)     , "OpenSound"                                      , FormLinkAction<ISoundGetter>.Instance);
            Add(typeof(IDoorGetter)          , "OpenSound"                                      , FormLinkAction<ISoundGetter>.Instance);
            Add(typeof(ICellGetter)          , "Owner"                                          , FormLinkAction<IFactionGetter>.Instance);
            Add(typeof(IWorldspaceGetter)    , "Parent"                                         , FormLinkAction<IWorldspaceGetter>.Instance);
            Add(typeof(IEffectShaderGetter)  , "ParticleShaderTexture"                          , ConvertibleAction<string>.Instance);
            Add(typeof(ICellGetter)          , "PathGrid.EditorID"                              , ConvertibleAction<string>.Instance);
            Add(typeof(ICellGetter)          , "PathGrid.OblivionMajorRecordFlags"              , FlagsAction.Instance);
            Add(typeof(ICellGetter)          , "PathGrid.PGAG"                                  , MemorySliceByteAction.Instance);
            Add(typeof(IDialogTopicGetter)   , "Quests"                                         , FormLinksAction<IQuestGetter>.Instance);
            Add(typeof(INpcGetter)           , "Race"                                           , FormLinkAction<IRaceGetter>.Instance);
            Add(typeof(IDoorGetter)          , "RandomTeleportDestinations"                     , FormLinksAction<IPlaceGetter>.Instance);
            Add(typeof(ICellGetter)          , "Regions"                                        , FormLinksAction<IRegionGetter>.Instance);
            Add(typeof(IIdleAnimationGetter) , "RelatedIdleAnimations"                          , FormLinksAction<IIdleAnimationGetter>.Instance);
            Add(typeof(IWaterGetter)         , "RelatedWaters.RelatedWaterDaytime"              , FormLinkAction<IWaterGetter>.Instance);
            Add(typeof(IWaterGetter)         , "RelatedWaters.RelatedWaterNighttime"            , FormLinkAction<IWaterGetter>.Instance);
            Add(typeof(IWaterGetter)         , "RelatedWaters.RelatedWaterUnderwater"           , FormLinkAction<IWaterGetter>.Instance);
            Add(typeof(IWorldspaceGetter)    , "Road.EditorID"                                  , ConvertibleAction<string>.Instance);
            Add(typeof(IWorldspaceGetter)    , "Road.OblivionMajorRecordFlags"                  , FlagsAction.Instance);
            Add(null                         , "Script"                                         , FormLinkAction<IScriptGetter>.Instance);
            Add(typeof(IFloraGetter)         , "SeasonalIngredientProduction.Fall"              , ConvertibleAction<byte>.Instance);
            Add(typeof(IFloraGetter)         , "SeasonalIngredientProduction.Spring"            , ConvertibleAction<byte>.Instance);
            Add(typeof(IFloraGetter)         , "SeasonalIngredientProduction.Summer"            , ConvertibleAction<byte>.Instance);
            Add(typeof(IFloraGetter)         , "SeasonalIngredientProduction.Winter"            , ConvertibleAction<byte>.Instance);
            Add(typeof(IRaceGetter)          , "SNAM"                                           , ConvertibleAction<short>.Instance);
            Add(null                         , "Sound"                                          , FormLinkAction<ISoundGetter>.Instance);
            Add(typeof(IRegionGetter)        , "Sounds.Flags"                                   , FlagsAction.Instance);
            Add(typeof(IRegionGetter)        , "Sounds.MusicType"                               , EnumsAction.Instance);
            Add(typeof(IRegionGetter)        , "Sounds.Priority"                                , ConvertibleAction<byte>.Instance);
            Add(typeof(INpcGetter)           , "Spells"                                         , FormLinksAction<ISpellRecordGetter>.Instance);
            Add(typeof(IRaceGetter)          , "Spells"                                         , FormLinksAction<ISpellGetter>.Instance);
            Add(typeof(INpcGetter)           , "Stats.Acrobatics"                               , ConvertibleAction<byte>.Instance);
            Add(typeof(INpcGetter)           , "Stats.Agility"                                  , ConvertibleAction<byte>.Instance);
            Add(typeof(INpcGetter)           , "Stats.Alchemy"                                  , ConvertibleAction<byte>.Instance);
            Add(typeof(INpcGetter)           , "Stats.Alteration"                               , ConvertibleAction<byte>.Instance);
            Add(typeof(INpcGetter)           , "Stats.Armorer"                                  , ConvertibleAction<byte>.Instance);
            Add(typeof(INpcGetter)           , "Stats.Athletics"                                , ConvertibleAction<byte>.Instance);
            Add(typeof(INpcGetter)           , "Stats.Blade"                                    , ConvertibleAction<byte>.Instance);
            Add(typeof(INpcGetter)           , "Stats.Block"                                    , ConvertibleAction<byte>.Instance);
            Add(typeof(INpcGetter)           , "Stats.Blunt"                                    , ConvertibleAction<byte>.Instance);
            Add(typeof(INpcGetter)           , "Stats.Conjuration"                              , ConvertibleAction<byte>.Instance);
            Add(typeof(INpcGetter)           , "Stats.Destruction"                              , ConvertibleAction<byte>.Instance);
            Add(typeof(INpcGetter)           , "Stats.Endurance"                                , ConvertibleAction<byte>.Instance);
            Add(typeof(INpcGetter)           , "Stats.HandToHand"                               , ConvertibleAction<byte>.Instance);
            Add(typeof(INpcGetter)           , "Stats.Health"                                   , ConvertibleAction<uint>.Instance);
            Add(typeof(INpcGetter)           , "Stats.HeavyArmor"                               , ConvertibleAction<byte>.Instance);
            Add(typeof(INpcGetter)           , "Stats.Illusion"                                 , ConvertibleAction<byte>.Instance);
            Add(typeof(INpcGetter)           , "Stats.Intelligence"                             , ConvertibleAction<byte>.Instance);
            Add(typeof(INpcGetter)           , "Stats.LightArmor"                               , ConvertibleAction<byte>.Instance);
            Add(typeof(INpcGetter)           , "Stats.Luck"                                     , ConvertibleAction<byte>.Instance);
            Add(typeof(INpcGetter)           , "Stats.Marksman"                                 , ConvertibleAction<byte>.Instance);
            Add(typeof(INpcGetter)           , "Stats.Mercantile"                               , ConvertibleAction<byte>.Instance);
            Add(typeof(INpcGetter)           , "Stats.Mysticism"                                , ConvertibleAction<byte>.Instance);
            Add(typeof(INpcGetter)           , "Stats.Personality"                              , ConvertibleAction<byte>.Instance);
            Add(typeof(INpcGetter)           , "Stats.Restoration"                              , ConvertibleAction<byte>.Instance);
            Add(typeof(INpcGetter)           , "Stats.Security"                                 , ConvertibleAction<byte>.Instance);
            Add(typeof(INpcGetter)           , "Stats.Sneak"                                    , ConvertibleAction<byte>.Instance);
            Add(typeof(INpcGetter)           , "Stats.Speechcraft"                              , ConvertibleAction<byte>.Instance);
            Add(typeof(INpcGetter)           , "Stats.Speed"                                    , ConvertibleAction<byte>.Instance);
            Add(typeof(INpcGetter)           , "Stats.Strength"                                 , ConvertibleAction<byte>.Instance);
            Add(typeof(INpcGetter)           , "Stats.Willpower"                                , ConvertibleAction<byte>.Instance);
            Add(typeof(IClimateGetter)       , "SunGlareTexture"                                , ConvertibleAction<string>.Instance);
            Add(typeof(IClimateGetter)       , "SunTexture"                                     , ConvertibleAction<string>.Instance);
            Add(typeof(IWaterGetter)         , "Texture"                                        , ConvertibleAction<string>.Instance);
            Add(typeof(IWeatherGetter)       , "TextureLowerLayer"                              , ConvertibleAction<string>.Instance);
            Add(typeof(IWeatherGetter)       , "TextureUpperLayer"                              , ConvertibleAction<string>.Instance);
            Add(typeof(ICellGetter)          , "VisibleWhenDistantTimestamp"                    , ConvertibleAction<int>.Instance);
            Add(typeof(IRaceGetter)          , "Voices.Female"                                  , FormLinkAction<IRaceGetter>.Instance);
            Add(typeof(IRaceGetter)          , "Voices.Male"                                    , FormLinkAction<IRaceGetter>.Instance);
            Add(typeof(ICellGetter)          , "Water"                                          , FormLinkAction<IWaterGetter>.Instance);
            Add(typeof(IWorldspaceGetter)    , "Water"                                          , FormLinkAction<IWaterGetter>.Instance);
            Add(typeof(ICellGetter)          , "WaterHeight"                                    , ConvertibleAction<float>.Instance);
            Add(typeof(IRegionGetter)        , "Weather.Flags"                                  , FlagsAction.Instance);
            Add(typeof(IRegionGetter)        , "Weather.Priority"                               , ConvertibleAction<byte>.Instance);
            Add(typeof(IIngredientGetter)    , "Weight"                                         , ConvertibleAction<float>.Instance);
            Add(typeof(IRegionGetter)        , "Worldspace"                                     , FormLinkAction<IWorldspaceGetter>.Instance);
#pragma warning restore format
        }
    }
}