using System.Drawing;

using GenericSynthesisPatcher.Games.Universal.Action;

using Mutagen.Bethesda.Fallout4;

using Noggog;

namespace GenericSynthesisPatcher.Games.Fallout4
{
    public partial class RecordPropertyMappings
    {
        private void populateMappings ()
        {
#pragma warning disable format
            Add(typeof(IActorValueInformationGetter) , "Abbreviation"                              , ConvertibleAction<string>.Instance);
            Add(typeof(IRaceGetter)                  , "AccelerationRate"                          , ConvertibleAction<float>.Instance);
            Add(typeof(IWeaponGetter)                , "AccuracyBonus"                             , ConvertibleAction<byte>.Instance);
            Add(typeof(ICellGetter)                  , "AcousticSpace"                             , FormLinkAction<IAcousticSpaceGetter>.Instance);
            Add(typeof(ICameraShotGetter)            , "Action"                                    , EnumsAction.Instance);
            Add(typeof(IWeaponGetter)                , "ActionPointCost"                           , ConvertibleAction<float>.Instance);
            Add(null                                 , "ActivateTextOverride"                      , ConvertibleAction<string>.Instance);
            Add(typeof(IActivatorGetter)             , "ActivationSound"                           , FormLinkAction<ISoundDescriptorGetter>.Instance);
            Add(typeof(ILocationGetter)              , "ActorCellMarkerReference"                  , FormLinksAction<IPlacedGetter>.Instance);
            Add(typeof(INpcGetter)                   , "ActorEffect"                               , FormLinksAction<ISpellRecordGetter>.Instance);
            Add(typeof(IRaceGetter)                  , "ActorEffect"                               , FormLinksAction<ISpellRecordGetter>.Instance);
            Add(typeof(ILocationGetter)              , "ActorFadeMult"                             , ConvertibleAction<float>.Instance);
            Add(typeof(IIngestibleGetter)            , "Addiction"                                 , FormLinkAction<ISpellGetter>.Instance);
            Add(typeof(IIngestibleGetter)            , "AddictionChance"                           , ConvertibleAction<float>.Instance);
            Add(typeof(IIngestibleGetter)            , "AddictionName"                             , ConvertibleAction<string>.Instance);
            Add(typeof(IArmorAddonGetter)            , "AdditionalRaces"                           , FormLinksAction<IRaceGetter>.Instance);
            Add(typeof(INpcGetter)                   , "Aggression"                                , EnumsAction.Instance);
            Add(typeof(INpcGetter)                   , "AggroRadiusAttack"                         , ConvertibleAction<uint>.Instance);
            Add(typeof(INpcGetter)                   , "AggroRadiusBehaviorEnabled"                , ConvertibleAction<bool>.Instance);
            Add(typeof(INpcGetter)                   , "AggroRadiusWarn"                           , ConvertibleAction<uint>.Instance);
            Add(typeof(INpcGetter)                   , "AggroRadiusWarnOrAttack"                   , ConvertibleAction<uint>.Instance);
            Add(typeof(IRaceGetter)                  , "AimAngleTolerance"                         , ConvertibleAction<float>.Instance);
            Add(typeof(IWeaponGetter)                , "AimModel"                                  , FormLinkAction<IAimModelGetter>.Instance);
            Add(typeof(IArmorGetter)                 , "AlternateBlockMaterial"                    , FormLinkAction<IMaterialTypeGetter>.Instance);
            Add(typeof(IWeaponGetter)                , "AlternateBlockMaterial"                    , FormLinkAction<IMaterialTypeGetter>.Instance);
            Add(typeof(ISoundDescriptorGetter)       , "AlternateSoundFor"                         , FormLinkAction<ISoundDescriptorGetter>.Instance);
            Add(typeof(IDoorGetter)                  , "AlternateTextClose"                        , ConvertibleAction<string>.Instance);
            Add(typeof(IDoorGetter)                  , "AlternateTextOpen"                         , ConvertibleAction<string>.Instance);
            Add(typeof(ILightingTemplateGetter)      , "AmbientColor"                              , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "AmbientColor.Day"                          , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "AmbientColor.EarlySunrise"                 , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "AmbientColor.EarlySunset"                  , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "AmbientColor.LateSunrise"                  , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "AmbientColor.LateSunset"                   , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "AmbientColor.Night"                        , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "AmbientColor.Sunrise"                      , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "AmbientColor.Sunset"                       , BasicAction<Color>.Instance);
            Add(typeof(IEffectShaderGetter)          , "AmbientSound"                              , FormLinkAction<ISoundGetter>.Instance);
            Add(typeof(IWeaponGetter)                , "Ammo"                                      , FormLinkAction<IAmmunitionGetter>.Instance);
            Add(typeof(IImpactGetter)                , "AngleThreshold"                            , ConvertibleAction<float>.Instance);
            Add(typeof(IRaceGetter)                  , "AngularAccelerationRate"                   , ConvertibleAction<float>.Instance);
            Add(typeof(IRaceGetter)                  , "AngularTolerance"                          , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "AngularVelocity.X"                         , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "AngularVelocity.Y"                         , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "AngularVelocity.Z"                         , ConvertibleAction<float>.Instance);
            Add(typeof(IImageSpaceAdapterGetter)     , "Animatable"                                , ConvertibleAction<bool>.Instance);
            Add(typeof(IWeaponGetter)                , "AnimationAttackSeconds"                    , ConvertibleAction<float>.Instance);
            Add(typeof(IMovementTypeGetter)          , "AnimationChangeThresholds.Directional"     , ConvertibleAction<float>.Instance);
            Add(typeof(IMovementTypeGetter)          , "AnimationChangeThresholds.MovementSpeed"   , ConvertibleAction<float>.Instance);
            Add(typeof(IMovementTypeGetter)          , "AnimationChangeThresholds.RotationSpeed"   , ConvertibleAction<float>.Instance);
            Add(typeof(IIdleAnimationGetter)         , "AnimationEvent"                            , ConvertibleAction<string>.Instance);
            Add(typeof(IIdleAnimationGetter)         , "AnimationFile"                             , ConvertibleAction<string>.Instance);
            Add(typeof(IIdleAnimationGetter)         , "AnimationGroupSection"                     , ConvertibleAction<byte>.Instance);
            Add(typeof(IIdleMarkerGetter)            , "Animations"                                , FormLinksAction<IIdleAnimationGetter>.Instance);
            Add(null                                 , "AnimationSound"                            , FormLinkAction<IAnimationSoundTagSetGetter>.Instance);
            Add(typeof(IWeaponGetter)                , "AnimationType"                             , EnumsAction.Instance);
            Add(typeof(IMagicEffectGetter)           , "Archetype.ActorValue"                      , FormLinkAction<IActorValueInformationGetter>.Instance);
            Add(typeof(IRaceGetter)                  , "ArmorRace"                                 , FormLinkAction<IRaceGetter>.Instance);
            Add(typeof(IArmorGetter)                 , "ArmorRating"                               , ConvertibleAction<ushort>.Instance);
            Add(typeof(IArmorAddonGetter)            , "ArtObject"                                 , FormLinkAction<IArtObjectGetter>.Instance);
            Add(typeof(INpcGetter)                   , "Assistance"                                , EnumsAction.Instance);
            Add(typeof(IFurnitureGetter)             , "AssociatedForm"                            , FormLinkAction<IFurnitureAssociationGetter>.Instance);
            Add(typeof(IRelationshipGetter)          , "AssociationType"                           , FormLinkAction<IAssociationTypeGetter>.Instance);
            Add(null                                 , "AttachParentSlots"                         , FormLinksAction<IKeywordGetter>.Instance);
            Add(typeof(IAObjectModificationGetter)   , "AttachPoint"                               , FormLinkAction<IKeywordGetter>.Instance);
            Add(typeof(IWeaponGetter)                , "Attack2dSound"                             , FormLinkAction<ISoundDescriptorGetter>.Instance);
            Add(typeof(IWeaponGetter)                , "AttackDelay"                               , ConvertibleAction<float>.Instance);
            Add(typeof(IWeaponGetter)                , "AttackFailSound"                           , FormLinkAction<ISoundDescriptorGetter>.Instance);
            Add(typeof(IWeaponGetter)                , "AttackLoopSound"                           , FormLinkAction<ISoundDescriptorGetter>.Instance);
            Add(typeof(INpcGetter)                   , "AttackRace"                                , FormLinkAction<IRaceGetter>.Instance);
            Add(typeof(IRaceGetter)                  , "AttackRace"                                , FormLinkAction<IRaceGetter>.Instance);
            Add(typeof(IWeaponGetter)                , "AttackSound"                               , FormLinkAction<ISoundDescriptorGetter>.Instance);
            Add(typeof(IActionRecordGetter)          , "AttractionRule"                            , FormLinkAction<IAttractionRuleGetter>.Instance);
            Add(typeof(IKeywordGetter)               , "AttractionRule"                            , FormLinkAction<IAttractionRuleGetter>.Instance);
            Add(typeof(IWeatherGetter)               , "Aurora.ColorRemappingIndex"                , ConvertibleAction<float>.Instance);
            Add(typeof(IWeatherGetter)               , "Aurora.Data"                               , MemorySliceByteAction.Instance);
            Add(typeof(IWeatherGetter)               , "Aurora.File"                               , ConvertibleAction<string>.Instance);
            Add(typeof(IWeatherGetter)               , "Aurora.Flags"                              , FlagsAction.Instance);
            Add(typeof(IWeatherGetter)               , "Aurora.MaterialSwap"                       , FormLinkAction<IMaterialSwapGetter>.Instance);
            Add(typeof(IComponentGetter)             , "AutoCalcValue"                             , ConvertibleAction<uint>.Instance);
            Add(typeof(ICombatStyleGetter)           , "AvoidThreatChance"                         , ConvertibleAction<float>.Instance);
            Add(typeof(ITreeGetter)                  , "BackAmplitude"                             , ConvertibleAction<float>.Instance);
            Add(typeof(ITreeGetter)                  , "BackFrequency"                             , ConvertibleAction<float>.Instance);
            Add(typeof(IMovementTypeGetter)          , "BackRun"                                   , ConvertibleAction<float>.Instance);
            Add(typeof(IMovementTypeGetter)          , "BackSprint"                                , ConvertibleAction<float>.Instance);
            Add(typeof(IMovementTypeGetter)          , "BackStanding"                              , ConvertibleAction<float>.Instance);
            Add(typeof(IMovementTypeGetter)          , "BackWalk"                                  , ConvertibleAction<float>.Instance);
            Add(typeof(IArmorGetter)                 , "BaseAddonIndex"                            , ConvertibleAction<ushort>.Instance);
            Add(typeof(IMagicEffectGetter)           , "BaseCost"                                  , ConvertibleAction<float>.Instance);
            Add(typeof(ISpellGetter)                 , "BaseCost"                                  , ConvertibleAction<uint>.Instance);
            Add(typeof(IWeaponGetter)                , "BaseDamage"                                , ConvertibleAction<ushort>.Instance);
            Add(typeof(IObjectEffectGetter)          , "BaseEnchantment"                           , FormLinkAction<IObjectEffectGetter>.Instance);
            Add(typeof(IRaceGetter)                  , "BaseMovementDefault"                       , FormLinkAction<IMovementTypeGetter>.Instance);
            Add(typeof(IRaceGetter)                  , "BaseMovementDefaultFly"                    , FormLinkAction<IMovementTypeGetter>.Instance);
            Add(typeof(IRaceGetter)                  , "BaseMovementDefaultSneak"                  , FormLinkAction<IMovementTypeGetter>.Instance);
            Add(typeof(IRaceGetter)                  , "BaseMovementDefaultSwim"                   , FormLinkAction<IMovementTypeGetter>.Instance);
            Add(typeof(IRaceGetter)                  , "BeardBipedObject"                          , EnumsAction.Instance);
            Add(typeof(IIdleAnimationGetter)         , "BehaviorGraph"                             , ConvertibleAction<string>.Instance);
            Add(typeof(IFurnitureGetter)             , "BenchType"                                 , EnumsAction.Instance);
            Add(typeof(IArmorGetter)                 , "BipedBodyTemplate.FirstPersonFlags"        , FlagsAction.Instance);
            Add(typeof(IRaceGetter)                  , "BipedBodyTemplate.FirstPersonFlags"        , FlagsAction.Instance);
            Add(typeof(IClassGetter)                 , "BleedoutDefault"                           , ConvertibleAction<float>.Instance);
            Add(typeof(INpcGetter)                   , "BleedoutOverride"                          , ConvertibleAction<short>.Instance);
            Add(typeof(IArmorGetter)                 , "BlockBashImpactDataSet"                    , FormLinkAction<IImpactDataSetGetter>.Instance);
            Add(typeof(IWeaponGetter)                , "BlockBashImpactDataSet"                    , FormLinkAction<IImpactDataSetGetter>.Instance);
            Add(typeof(IRaceGetter)                  , "BodyBipedObject"                           , EnumsAction.Instance);
            Add(typeof(INpcGetter)                   , "BodyMorphRegionValues.Arms"                , ConvertibleAction<float>.Instance);
            Add(typeof(INpcGetter)                   , "BodyMorphRegionValues.Head"                , ConvertibleAction<float>.Instance);
            Add(typeof(INpcGetter)                   , "BodyMorphRegionValues.Legs"                , ConvertibleAction<float>.Instance);
            Add(typeof(INpcGetter)                   , "BodyMorphRegionValues.LowerTorso"          , ConvertibleAction<float>.Instance);
            Add(typeof(INpcGetter)                   , "BodyMorphRegionValues.UpperTorso"          , ConvertibleAction<float>.Instance);
            Add(typeof(IRaceGetter)                  , "BodyPartData"                              , FormLinkAction<IBodyPartDataGetter>.Instance);
            Add(typeof(IArmorAddonGetter)            , "BodyTemplate.FirstPersonFlags"             , FlagsAction.Instance);
            Add(typeof(IBookGetter)                  , "BookText"                                  , ConvertibleAction<string>.Instance);
            Add(typeof(IShaderParticleGeometryGetter), "BoxSize"                                   , ConvertibleAction<uint>.Instance);
            Add(typeof(IDialogViewGetter)            , "Branches"                                  , FormLinksAction<IDialogBranchGetter>.Instance);
            Add(typeof(ITreeGetter)                  , "BranchFlexibility"                         , ConvertibleAction<float>.Instance);
            Add(typeof(IMaterialTypeGetter)          , "BreakableFX"                               , ConvertibleAction<string>.Instance);
            Add(typeof(IMaterialTypeGetter)          , "Buoyancy"                                  , ConvertibleAction<float>.Instance);
            Add(typeof(INpcGetter)                   , "CalcMaxLevel"                              , ConvertibleAction<short>.Instance);
            Add(typeof(INpcGetter)                   , "CalcMinLevel"                              , ConvertibleAction<short>.Instance);
            Add(typeof(INpcGetter)                   , "CalculatedActionPoints"                    , ConvertibleAction<ushort>.Instance);
            Add(typeof(INpcGetter)                   , "CalculatedHealth"                          , ConvertibleAction<ushort>.Instance);
            Add(typeof(IZoomGetter)                  , "CameraOffset.X"                            , ConvertibleAction<float>.Instance);
            Add(typeof(IZoomGetter)                  , "CameraOffset.Y"                            , ConvertibleAction<float>.Instance);
            Add(typeof(IZoomGetter)                  , "CameraOffset.Z"                            , ConvertibleAction<float>.Instance);
            Add(typeof(ILoadScreenGetter)            , "CameraPath"                                , ConvertibleAction<string>.Instance);
            Add(typeof(IWorldspaceGetter)            , "CanopyShadow"                              , ConvertibleAction<string>.Instance);
            Add(typeof(IWeaponGetter)                , "Capacity"                                  , ConvertibleAction<ushort>.Instance);
            Add(typeof(IAmmunitionGetter)            , "CasingModel"                               , ConvertibleAction<string>.Instance);
            Add(typeof(ISpellGetter)                 , "CastDuration"                              , ConvertibleAction<float>.Instance);
            Add(typeof(IMagicEffectGetter)           , "CastingArt"                                , FormLinkAction<IArtObjectGetter>.Instance);
            Add(typeof(IMagicEffectGetter)           , "CastingLight"                              , FormLinkAction<ILightGetter>.Instance);
            Add(typeof(ISpellGetter)                 , "CastingPerk"                               , FormLinkAction<IPerkGetter>.Instance);
            Add(typeof(IMagicEffectGetter)           , "CastingSoundLevel"                         , EnumsAction.Instance);
            Add(null                                 , "CastType"                                  , EnumsAction.Instance);
            Add(typeof(IConstructibleObjectGetter)   , "Categories"                                , FormLinksAction<IKeywordGetter>.Instance);
            Add(typeof(ISoundDescriptorGetter)       , "Category"                                  , FormLinkAction<ISoundCategoryGetter>.Instance);
            Add(typeof(IPackInGetter)                , "Cell"                                      , FormLinkAction<ICellGetter>.Instance);
            Add(typeof(IWorldspaceGetter)            , "CellSizeData"                              , MemorySliceByteAction.Instance);
            Add(typeof(IShaderParticleGeometryGetter), "CenterOffsetMax"                           , ConvertibleAction<float>.Instance);
            Add(typeof(IShaderParticleGeometryGetter), "CenterOffsetMin"                           , ConvertibleAction<float>.Instance);
            Add(typeof(ILeveledItemGetter)           , "ChanceNone"                                , BasicAction<Percent>.Instance);
            Add(typeof(ILeveledNpcGetter)            , "ChanceNone"                                , BasicAction<Percent>.Instance);
            Add(typeof(IObjectEffectGetter)          , "ChargeTime"                                , ConvertibleAction<float>.Instance);
            Add(typeof(ISpellGetter)                 , "ChargeTime"                                , ConvertibleAction<float>.Instance);
            Add(typeof(IRelationshipGetter)          , "Child"                                     , FormLinkAction<INpcGetter>.Instance);
            Add(typeof(IImageSpaceGetter)            , "CinematicBrightness"                       , ConvertibleAction<float>.Instance);
            Add(typeof(IImageSpaceGetter)            , "CinematicContrast"                         , ConvertibleAction<float>.Instance);
            Add(typeof(IImageSpaceGetter)            , "CinematicSaturation"                       , ConvertibleAction<float>.Instance);
            Add(typeof(INpcGetter)                   , "Class"                                     , FormLinkAction<IClassGetter>.Instance);
            Add(typeof(IWorldspaceGetter)            , "Climate"                                   , FormLinkAction<IClimateGetter>.Instance);
            Add(typeof(ICombatStyleGetter)           , "CloseRangeChargeDistance"                  , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)           , "CloseRangeChargingDisengageProbability"    , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)           , "CloseRangeChargingSideswipeProbability"    , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)           , "CloseRangeChargingSprintFastProbability"   , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)           , "CloseRangeChargingThrowMaxTargets"         , ConvertibleAction<uint>.Instance);
            Add(typeof(ICombatStyleGetter)           , "CloseRangeChargingThrowProbability"        , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)           , "CloseRangeDuelingCircleMult"               , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)           , "CloseRangeDuelingFallbackMult"             , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)           , "CloseRangeFlankDistance"                   , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)           , "CloseRangeFlankingStalkTime"               , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)           , "CloseRangeFlankingVariance"                , ConvertibleAction<float>.Instance);
            Add(typeof(IContainerGetter)             , "CloseSound"                                , FormLinkAction<ISoundDescriptorGetter>.Instance);
            Add(typeof(IDoorGetter)                  , "CloseSound"                                , FormLinkAction<ISoundDescriptorGetter>.Instance);
            Add(typeof(IWeatherGetter)               , "CloudLodAmbientColor.Day"                  , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "CloudLodAmbientColor.EarlySunrise"         , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "CloudLodAmbientColor.EarlySunset"          , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "CloudLodAmbientColor.LateSunrise"          , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "CloudLodAmbientColor.LateSunset"           , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "CloudLodAmbientColor.Night"                , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "CloudLodAmbientColor.Sunrise"              , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "CloudLodAmbientColor.Sunset"               , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "CloudLodDiffuseColor.Day"                  , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "CloudLodDiffuseColor.EarlySunrise"         , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "CloudLodDiffuseColor.EarlySunset"          , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "CloudLodDiffuseColor.LateSunrise"          , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "CloudLodDiffuseColor.LateSunset"           , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "CloudLodDiffuseColor.Night"                , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "CloudLodDiffuseColor.Sunrise"              , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "CloudLodDiffuseColor.Sunset"               , BasicAction<Color>.Instance);
            Add(typeof(IWorldspaceGetter)            , "CloudModel.ColorRemappingIndex"            , ConvertibleAction<float>.Instance);
            Add(typeof(IWorldspaceGetter)            , "CloudModel.Data"                           , MemorySliceByteAction.Instance);
            Add(typeof(IWorldspaceGetter)            , "CloudModel.File"                           , ConvertibleAction<string>.Instance);
            Add(typeof(IWorldspaceGetter)            , "CloudModel.Flags"                          , FlagsAction.Instance);
            Add(typeof(IWorldspaceGetter)            , "CloudModel.MaterialSwap"                   , FormLinkAction<IMaterialSwapGetter>.Instance);
            Add(typeof(IRaceGetter)                  , "CollarTextureSet"                          , FormLinkAction<ITextureSetGetter>.Instance);
            Add(typeof(ICollisionLayerGetter)        , "CollidesWith"                              , FormLinksAction<ICollisionLayerGetter>.Instance);
            Add(typeof(IProjectileGetter)            , "CollisionLayer"                            , FormLinkAction<ICollisionLayerGetter>.Instance);
            Add(typeof(IProjectileGetter)            , "CollisionRadius"                           , ConvertibleAction<float>.Instance);
            Add(typeof(IHeadPartGetter)              , "Color"                                     , FormLinkAction<IColorRecordGetter>.Instance);
            Add(null                                 , "Color"                                     , BasicAction<Color>.Instance);
            Add(typeof(IGrassGetter)                 , "ColorRange"                                , ConvertibleAction<float>.Instance);
            Add(typeof(INpcGetter)                   , "CombatOverridePackageList"                 , FormLinkAction<IFormListGetter>.Instance);
            Add(typeof(INpcGetter)                   , "CombatStyle"                               , FormLinkAction<ICombatStyleGetter>.Instance);
            Add(typeof(IPackageGetter)               , "CombatStyle"                               , FormLinkAction<ICombatStyleGetter>.Instance);
            Add(typeof(IEquipTypeGetter)             , "ConditionActorValue"                       , FormLinkAction<IActorValueInformationGetter>.Instance);
            Add(typeof(IProjectileGetter)            , "ConeSpread"                                , ConvertibleAction<float>.Instance);
            Add(typeof(INpcGetter)                   , "Confidence"                                , EnumsAction.Instance);
            Add(typeof(ILightGetter)                 , "Constant"                                  , ConvertibleAction<float>.Instance);
            Add(typeof(IIngestibleGetter)            , "ConsumeSound"                              , FormLinkAction<ISoundDescriptorGetter>.Instance);
            Add(typeof(IWaterGetter)                 , "ConsumeSpell"                              , FormLinkAction<ISpellGetter>.Instance);
            Add(typeof(IWaterGetter)                 , "ContactSpell"                              , FormLinkAction<ISpellGetter>.Instance);
            Add(typeof(IProjectileGetter)            , "CountdownSound"                            , FormLinkAction<ISoundDescriptorGetter>.Instance);
            Add(typeof(IMagicEffectGetter)           , "CounterEffectCount"                        , ConvertibleAction<ushort>.Instance);
            Add(typeof(IMagicEffectGetter)           , "CounterEffects"                            , FormLinksAction<IMagicEffectGetter>.Instance);
            Add(typeof(ICombatStyleGetter)           , "CoverSearchDistanceMult"                   , ConvertibleAction<float>.Instance);
            Add(typeof(IComponentGetter)             , "CraftingSound"                             , FormLinkAction<ISoundDescriptorGetter>.Instance);
            Add(typeof(IIngestibleGetter)            , "CraftingSound"                             , FormLinkAction<ISoundDescriptorGetter>.Instance);
            Add(typeof(IConstructibleObjectGetter)   , "CreatedObject"                             , FormLinkAction<IConstructibleObjectTargetGetter>.Instance);
            Add(typeof(INpcGetter)                   , "CrimeFaction"                              , FormLinkAction<IFactionGetter>.Instance);
            Add(typeof(IFactionGetter)               , "CrimeValues.Arrest"                        , ConvertibleAction<bool>.Instance);
            Add(typeof(IFactionGetter)               , "CrimeValues.Assault"                       , ConvertibleAction<ushort>.Instance);
            Add(typeof(IFactionGetter)               , "CrimeValues.AttackOnSight"                 , ConvertibleAction<bool>.Instance);
            Add(typeof(IFactionGetter)               , "CrimeValues.Escape"                        , ConvertibleAction<ushort>.Instance);
            Add(typeof(IFactionGetter)               , "CrimeValues.Murder"                        , ConvertibleAction<ushort>.Instance);
            Add(typeof(IFactionGetter)               , "CrimeValues.Pickpocket"                    , ConvertibleAction<ushort>.Instance);
            Add(typeof(IFactionGetter)               , "CrimeValues.StealMult"                     , ConvertibleAction<float>.Instance);
            Add(typeof(IFactionGetter)               , "CrimeValues.Trespass"                      , ConvertibleAction<ushort>.Instance);
            Add(typeof(IFactionGetter)               , "CrimeValues.WerewolfUnused"                , ConvertibleAction<ushort>.Instance);
            Add(typeof(IWeaponGetter)                , "CritChargeBonus"                           , ConvertibleAction<float>.Instance);
            Add(typeof(IWeaponGetter)                , "CritDamageMult"                            , ConvertibleAction<float>.Instance);
            Add(typeof(IWeaponGetter)                , "CritEffect"                                , FormLinkAction<ISpellGetter>.Instance);
            Add(typeof(ICombatStyleGetter)           , "CSLRDataTypeState"                         , FlagsAction.Instance);
            Add(typeof(ICombatStyleGetter)           , "CSMD"                                      , MemorySliceByteAction.Instance);
            Add(typeof(ICombatStyleGetter)           , "CSMEDataTypeState"                         , FlagsAction.Instance);
            Add(typeof(IAmmunitionGetter)            , "Damage"                                    , ConvertibleAction<float>.Instance);
            Add(typeof(IExplosionGetter)             , "Damage"                                    , ConvertibleAction<float>.Instance);
            Add(typeof(IWeaponGetter)                , "DamageOutOfRangeMult"                      , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "DATA"                                      , MemorySliceByteAction.Instance);
            Add(typeof(IWaterGetter)                 , "DATA"                                      , MemorySliceByteAction.Instance);
            Add(typeof(IQuestGetter)                 , "Data.DelayTime"                            , ConvertibleAction<float>.Instance);
            Add(typeof(IMusicTypeGetter)             , "Data.DuckingDecibel"                       , ConvertibleAction<float>.Instance);
            Add(typeof(IQuestGetter)                 , "Data.Flags"                                , FlagsAction.Instance);
            Add(typeof(ISoundOutputModelGetter)      , "Data.Flags"                                , FlagsAction.Instance);
            Add(typeof(IMusicTypeGetter)             , "Data.Priority"                             , ConvertibleAction<ushort>.Instance);
            Add(typeof(IQuestGetter)                 , "Data.Priority"                             , ConvertibleAction<byte>.Instance);
            Add(typeof(ISoundOutputModelGetter)      , "Data.ReverbSendPercent"                    , BasicAction<Percent>.Instance);
            Add(typeof(IQuestGetter)                 , "Data.Type"                                 , EnumsAction.Instance);
            Add(typeof(IPackageGetter)               , "DataInputVersion"                          , ConvertibleAction<int>.Instance);
            Add(typeof(INpcGetter)                   , "DeathItem"                                 , FormLinkAction<ILeveledItemGetter>.Instance);
            Add(typeof(ICollisionLayerGetter)        , "DebugColor"                                , BasicAction<Color>.Instance);
            Add(typeof(IImpactGetter)                , "Decal.AlphaThreshold"                      , ConvertibleAction<ushort>.Instance);
            Add(typeof(ITextureSetGetter)            , "Decal.AlphaThreshold"                      , ConvertibleAction<ushort>.Instance);
            Add(typeof(IImpactGetter)                , "Decal.Color"                               , BasicAction<Color>.Instance);
            Add(typeof(ITextureSetGetter)            , "Decal.Color"                               , BasicAction<Color>.Instance);
            Add(typeof(IImpactGetter)                , "Decal.Depth"                               , ConvertibleAction<float>.Instance);
            Add(typeof(ITextureSetGetter)            , "Decal.Depth"                               , ConvertibleAction<float>.Instance);
            Add(typeof(IImpactGetter)                , "Decal.Flags"                               , FlagsAction.Instance);
            Add(typeof(ITextureSetGetter)            , "Decal.Flags"                               , FlagsAction.Instance);
            Add(typeof(IImpactGetter)                , "Decal.MaxHeight"                           , ConvertibleAction<float>.Instance);
            Add(typeof(ITextureSetGetter)            , "Decal.MaxHeight"                           , ConvertibleAction<float>.Instance);
            Add(typeof(IImpactGetter)                , "Decal.MaxWidth"                            , ConvertibleAction<float>.Instance);
            Add(typeof(ITextureSetGetter)            , "Decal.MaxWidth"                            , ConvertibleAction<float>.Instance);
            Add(typeof(IImpactGetter)                , "Decal.MinHeight"                           , ConvertibleAction<float>.Instance);
            Add(typeof(ITextureSetGetter)            , "Decal.MinHeight"                           , ConvertibleAction<float>.Instance);
            Add(typeof(IImpactGetter)                , "Decal.MinWidth"                            , ConvertibleAction<float>.Instance);
            Add(typeof(ITextureSetGetter)            , "Decal.MinWidth"                            , ConvertibleAction<float>.Instance);
            Add(typeof(IImpactGetter)                , "Decal.ParallaxPasses"                      , ConvertibleAction<byte>.Instance);
            Add(typeof(ITextureSetGetter)            , "Decal.ParallaxPasses"                      , ConvertibleAction<byte>.Instance);
            Add(typeof(IImpactGetter)                , "Decal.ParallaxScale"                       , ConvertibleAction<float>.Instance);
            Add(typeof(ITextureSetGetter)            , "Decal.ParallaxScale"                       , ConvertibleAction<float>.Instance);
            Add(typeof(IImpactGetter)                , "Decal.Shininess"                           , ConvertibleAction<float>.Instance);
            Add(typeof(ITextureSetGetter)            , "Decal.Shininess"                           , ConvertibleAction<float>.Instance);
            Add(typeof(IProjectileGetter)            , "DecalData"                                 , FormLinkAction<ITextureSetGetter>.Instance);
            Add(typeof(IReverbParametersGetter)      , "DecayHfRatio"                              , ConvertibleAction<float>.Instance);
            Add(typeof(IReverbParametersGetter)      , "DecayMilliseconds"                         , ConvertibleAction<ushort>.Instance);
            Add(typeof(IRaceGetter)                  , "DecelerationRate"                          , ConvertibleAction<float>.Instance);
            Add(typeof(IBendableSplineGetter)        , "DefaultColor"                              , BasicAction<Color>.Instance);
            Add(typeof(IRaceGetter)                  , "DefaultHairColors.Female"                  , FormLinkAction<IColorRecordGetter>.Instance);
            Add(typeof(IRaceGetter)                  , "DefaultHairColors.Male"                    , FormLinkAction<IColorRecordGetter>.Instance);
            Add(typeof(IWorldspaceGetter)            , "DefaultLevelData.Data"                     , MemorySliceByteAction.Instance);
            Add(typeof(ISoundCategoryGetter)         , "DefaultMenuVolume"                         , ConvertibleAction<float>.Instance);
            Add(typeof(IBendableSplineGetter)        , "DefaultNumberOfSlices"                     , ConvertibleAction<ushort>.Instance);
            Add(typeof(IBendableSplineGetter)        , "DefaultNumberOfTiles"                      , ConvertibleAction<float>.Instance);
            Add(typeof(IBendableSplineGetter)        , "DefaultNumberOfTilesIsRelativeToLength"    , ConvertibleAction<bool>.Instance);
            Add(typeof(INpcGetter)                   , "DefaultOutfit"                             , FormLinkAction<IOutfitGetter>.Instance);
            Add(typeof(INpcGetter)                   , "DefaultPackageList"                        , FormLinkAction<IFormListGetter>.Instance);
            Add(typeof(INpcGetter)                   , "DefaultTemplate"                           , FormLinkAction<INpcSpawnGetter>.Instance);
            Add(typeof(IActorValueInformationGetter) , "DefaultValue"                              , ConvertibleAction<float>.Instance);
            Add(typeof(IProjectileGetter)            , "DefaultWeaponSource"                       , FormLinkAction<IWeaponGetter>.Instance);
            Add(typeof(ICombatStyleGetter)           , "DefensiveMult"                             , ConvertibleAction<float>.Instance);
            Add(typeof(IGrassGetter)                 , "Density"                                   , ConvertibleAction<byte>.Instance);
            Add(typeof(IReverbParametersGetter)      , "DensityPercent"                            , BasicAction<Percent>.Instance);
            Add(typeof(IImageSpaceGetter)            , "DepthOfFieldBlurRadius"                    , ConvertibleAction<byte>.Instance);
            Add(typeof(IImageSpaceGetter)            , "DepthOfFieldDistance"                      , ConvertibleAction<float>.Instance);
            Add(typeof(IImageSpaceAdapterGetter)     , "DepthOfFieldFlags"                         , FlagsAction.Instance);
            Add(typeof(IImageSpaceGetter)            , "DepthOfFieldRange"                         , ConvertibleAction<float>.Instance);
            Add(typeof(IImageSpaceGetter)            , "DepthOfFieldSky"                           , ConvertibleAction<bool>.Instance);
            Add(typeof(IImageSpaceGetter)            , "DepthOfFieldStrength"                      , ConvertibleAction<float>.Instance);
            Add(typeof(IImageSpaceGetter)            , "DepthOfFieldUnused"                        , ConvertibleAction<short>.Instance);
            Add(typeof(IImageSpaceGetter)            , "DepthOfFieldVignetteRadius"                , ConvertibleAction<float>.Instance);
            Add(typeof(IImageSpaceGetter)            , "DepthOfFieldVignetteStrength"              , ConvertibleAction<float>.Instance);
            Add(null                                 , "Description"                               , ConvertibleAction<string>.Instance);
            Add(typeof(ISoundDescriptorGetter)       , "Descriptors"                               , FormLinksAction<ISoundDescriptorGetter>.Instance);
            Add(typeof(IArmorAddonGetter)            , "DetectionSoundValue"                       , ConvertibleAction<byte>.Instance);
            Add(typeof(IRaceGetter)                  , "DialogueQuest"                             , FormLinkAction<IQuestGetter>.Instance);
            Add(typeof(ITextureSetGetter)            , "Diffuse"                                   , ConvertibleAction<string>.Instance);
            Add(typeof(IReverbParametersGetter)      , "DiffusionPercent"                          , BasicAction<Percent>.Instance);
            Add(typeof(ILightingTemplateGetter)      , "DirectionalAmbientColors.DirectionalXMinus", BasicAction<Color>.Instance);
            Add(typeof(ILightingTemplateGetter)      , "DirectionalAmbientColors.DirectionalXPlus" , BasicAction<Color>.Instance);
            Add(typeof(ILightingTemplateGetter)      , "DirectionalAmbientColors.DirectionalYMinus", BasicAction<Color>.Instance);
            Add(typeof(ILightingTemplateGetter)      , "DirectionalAmbientColors.DirectionalYPlus" , BasicAction<Color>.Instance);
            Add(typeof(ILightingTemplateGetter)      , "DirectionalAmbientColors.DirectionalZMinus", BasicAction<Color>.Instance);
            Add(typeof(ILightingTemplateGetter)      , "DirectionalAmbientColors.DirectionalZPlus" , BasicAction<Color>.Instance);
            Add(typeof(ILightingTemplateGetter)      , "DirectionalAmbientColors.Scale"            , ConvertibleAction<float>.Instance);
            Add(typeof(ILightingTemplateGetter)      , "DirectionalAmbientColors.Specular"         , BasicAction<Color>.Instance);
            Add(typeof(ILightingTemplateGetter)      , "DirectionalColor"                          , BasicAction<Color>.Instance);
            Add(typeof(ILightingTemplateGetter)      , "DirectionalFade"                           , ConvertibleAction<float>.Instance);
            Add(typeof(ILightingTemplateGetter)      , "DirectionalRotationXY"                     , ConvertibleAction<int>.Instance);
            Add(typeof(ILightingTemplateGetter)      , "DirectionalRotationZ"                      , ConvertibleAction<int>.Instance);
            Add(typeof(IProjectileGetter)            , "DisaleSound"                               , FormLinkAction<ISoundDescriptorGetter>.Instance);
            Add(typeof(IRaceGetter)                  , "DispemberBloodArt"                         , FormLinkAction<IArtObjectGetter>.Instance);
            Add(typeof(IKeywordGetter)               , "DisplayName"                               , ConvertibleAction<string>.Instance);
            Add(typeof(IMessageGetter)               , "DisplayTime"                               , ConvertibleAction<uint>.Instance);
            Add(typeof(INpcGetter)                   , "DispositionBase"                           , ConvertibleAction<short>.Instance);
            Add(typeof(IWorldspaceGetter)            , "DistantLodMultiplier"                      , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)           , "DiveBombChance"                            , ConvertibleAction<float>.Instance);
            Add(typeof(IDialogViewGetter)            , "DNAM"                                      , MemorySliceByteAction.Instance);
            Add(null                                 , "DNAMDataTypeState"                         , FlagsAction.Instance);
            Add(typeof(ICombatStyleGetter)           , "DodgeThreadChance"                         , ConvertibleAction<float>.Instance);
            Add(typeof(IFurnitureGetter)             , "DrinkingWater"                             , FormLinkAction<IWaterGetter>.Instance);
            Add(typeof(IMagicEffectGetter)           , "DualCastArt"                               , FormLinkAction<IDualCastDataGetter>.Instance);
            Add(typeof(IMagicEffectGetter)           , "DualCastScale"                             , ConvertibleAction<float>.Instance);
            Add(null                                 , "Duration"                                  , ConvertibleAction<float>.Instance);
            Add(typeof(ISoundOutputModelGetter)      , "DynamicAttentuation.FadeInCurveValue1"     , ConvertibleAction<byte>.Instance);
            Add(typeof(ISoundOutputModelGetter)      , "DynamicAttentuation.FadeInCurveValue2"     , ConvertibleAction<byte>.Instance);
            Add(typeof(ISoundOutputModelGetter)      , "DynamicAttentuation.FadeInCurveValue3"     , ConvertibleAction<byte>.Instance);
            Add(typeof(ISoundOutputModelGetter)      , "DynamicAttentuation.FadeInCurveValue4"     , ConvertibleAction<byte>.Instance);
            Add(typeof(ISoundOutputModelGetter)      , "DynamicAttentuation.FadeInDistanceEnd"     , ConvertibleAction<float>.Instance);
            Add(typeof(ISoundOutputModelGetter)      , "DynamicAttentuation.FadeInDistanceStart"   , ConvertibleAction<float>.Instance);
            Add(typeof(ISoundOutputModelGetter)      , "DynamicAttentuation.FadeOutCurveValue1"    , ConvertibleAction<byte>.Instance);
            Add(typeof(ISoundOutputModelGetter)      , "DynamicAttentuation.FadeOutCurveValue2"    , ConvertibleAction<byte>.Instance);
            Add(typeof(ISoundOutputModelGetter)      , "DynamicAttentuation.FadeOutCurveValue3"    , ConvertibleAction<byte>.Instance);
            Add(typeof(ISoundOutputModelGetter)      , "DynamicAttentuation.FadeOutCurveValue4"    , ConvertibleAction<byte>.Instance);
            Add(typeof(ISoundOutputModelGetter)      , "DynamicAttentuation.FadeOutDistanceEnd"    , ConvertibleAction<float>.Instance);
            Add(typeof(ISoundOutputModelGetter)      , "DynamicAttentuation.FadeOutDistanceStart"  , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "EdgeEffectAlphaFadeInTime"                 , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "EdgeEffectAlphaFadeOutTime"                , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "EdgeEffectAlphaPulseAmplitude"             , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "EdgeEffectAlphaPulseFrequency"             , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "EdgeEffectColor"                           , BasicAction<Color>.Instance);
            Add(typeof(IEffectShaderGetter)          , "EdgeEffectFallOff"                         , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "EdgeEffectFullAlphaRatio"                  , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "EdgeEffectFullAlphaTime"                   , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "EdgeEffectPersistentAlphaRatio"            , ConvertibleAction<float>.Instance);
            Add(null                                 , "EditorID"                                  , ConvertibleAction<string>.Instance);
            Add(typeof(IHazardGetter)                , "Effect"                                    , FormLinkAction<IEffectRecordGetter>.Instance);
            Add(typeof(IVisualEffectGetter)          , "EffectArt"                                 , FormLinkAction<IArtObjectGetter>.Instance);
            Add(typeof(ISoundOutputModelGetter)      , "EffectChain"                               , FormLinkAction<IAudioEffectChainGetter>.Instance);
            Add(typeof(IWeatherGetter)               , "EffectLightingColor.Day"                   , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "EffectLightingColor.EarlySunrise"          , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "EffectLightingColor.EarlySunset"           , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "EffectLightingColor.LateSunrise"           , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "EffectLightingColor.LateSunset"            , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "EffectLightingColor.Night"                 , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "EffectLightingColor.Sunrise"               , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "EffectLightingColor.Sunset"                , BasicAction<Color>.Instance);
            Add(typeof(IWeaponGetter)                , "EmbeddedWeaponMod"                         , FormLinkAction<IAObjectModificationGetter>.Instance);
            Add(typeof(IFurnitureGetter)             , "EnabledEntryPoints"                        , FlagsAction.Instance);
            Add(typeof(IDialogViewGetter)            , "ENAM"                                      , MemorySliceByteAction.Instance);
            Add(typeof(IMagicEffectGetter)           , "EnchantArt"                                , FormLinkAction<IArtObjectGetter>.Instance);
            Add(typeof(IObjectEffectGetter)          , "EnchantmentAmount"                         , ConvertibleAction<int>.Instance);
            Add(typeof(IWeaponGetter)                , "EnchantmentAmount"                         , ConvertibleAction<ushort>.Instance);
            Add(typeof(IObjectEffectGetter)          , "EnchantmentCost"                           , ConvertibleAction<uint>.Instance);
            Add(typeof(IMagicEffectGetter)           , "EnchantShader"                             , FormLinkAction<IEffectShaderGetter>.Instance);
            Add(typeof(IObjectEffectGetter)          , "EnchantType"                               , EnumsAction.Instance);
            Add(typeof(IMagicEffectGetter)           , "EnchantVisuals"                            , FormLinkAction<IVisualEffectGetter>.Instance);
            Add(typeof(ICellGetter)                  , "EncounterZone"                             , FormLinkAction<IEncounterZoneGetter>.Instance);
            Add(typeof(IWorldspaceGetter)            , "EncounterZone"                             , FormLinkAction<IEncounterZoneGetter>.Instance);
            Add(typeof(INpcGetter)                   , "EnergyLevel"                               , ConvertibleAction<byte>.Instance);
            Add(typeof(IObjectEffectGetter)          , "ENITDataTypeState"                         , FlagsAction.Instance);
            Add(typeof(ITextureSetGetter)            , "Environment"                               , ConvertibleAction<string>.Instance);
            Add(typeof(IAcousticSpaceGetter)         , "EnvironmentType"                           , FormLinkAction<IReverbParametersGetter>.Instance);
            Add(typeof(ILeveledItemGetter)           , "EpicLootChance"                            , FormLinkAction<IGlobalGetter>.Instance);
            Add(typeof(IMagicEffectGetter)           , "EquipAbility"                              , FormLinkAction<ISpellGetter>.Instance);
            Add(typeof(IRaceGetter)                  , "EquipmentFlags"                            , FlagsAction.Instance);
            Add(typeof(ICombatStyleGetter)           , "EquipmentScoreMultMagic"                   , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)           , "EquipmentScoreMultMelee"                   , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)           , "EquipmentScoreMultRanged"                  , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)           , "EquipmentScoreMultShout"                   , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)           , "EquipmentScoreMultStaff"                   , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)           , "EquipmentScoreMultUnarmed"                 , ConvertibleAction<float>.Instance);
            Add(null                                 , "EquipmentType"                             , FormLinkAction<IEquipTypeGetter>.Instance);
            Add(typeof(IWeaponGetter)                , "EquipSound"                                , FormLinkAction<ISoundDescriptorGetter>.Instance);
            Add(typeof(IIngredientGetter)            , "EquipType"                                 , FormLinkAction<IEquipTypeGetter>.Instance);
            Add(typeof(ICombatStyleGetter)           , "EvadeThreatChance"                         , ConvertibleAction<float>.Instance);
            Add(typeof(IRaceGetter)                  , "ExplodableDebris"                          , FormLinkAction<IDebrisGetter>.Instance);
            Add(typeof(IRaceGetter)                  , "ExplodableDebrisCount"                     , ConvertibleAction<byte>.Instance);
            Add(typeof(IRaceGetter)                  , "ExplodableDebrisScale"                     , ConvertibleAction<float>.Instance);
            Add(typeof(IRaceGetter)                  , "ExplodableDecalCount"                      , ConvertibleAction<byte>.Instance);
            Add(typeof(IRaceGetter)                  , "ExplodableExplosion"                       , FormLinkAction<IExplosionGetter>.Instance);
            Add(typeof(IRaceGetter)                  , "ExplodableImpactDataSet"                   , FormLinkAction<IImpactDataSetGetter>.Instance);
            Add(typeof(IRaceGetter)                  , "ExplodableSubsegmentExplosion"             , FormLinkAction<IExplosionGetter>.Instance);
            Add(typeof(IMagicEffectGetter)           , "Explosion"                                 , FormLinkAction<IExplosionGetter>.Instance);
            Add(typeof(IProjectileGetter)            , "Explosion"                                 , FormLinkAction<IExplosionGetter>.Instance);
            Add(typeof(IProjectileGetter)            , "ExplosionAltTriggerProximity"              , ConvertibleAction<float>.Instance);
            Add(typeof(IProjectileGetter)            , "ExplosionAltTriggerTimer"                  , ConvertibleAction<float>.Instance);
            Add(typeof(ILightGetter)                 , "Exponent"                                  , ConvertibleAction<float>.Instance);
            Add(typeof(IRaceGetter)                  , "ExportingExtraNam2"                        , ConvertibleAction<bool>.Instance);
            Add(typeof(IFactionGetter)               , "ExteriorJailMarker"                        , FormLinkAction<IPlacedObjectGetter>.Instance);
            Add(typeof(ICellGetter)                  , "ExteriorLod.Offset.X"                      , ConvertibleAction<float>.Instance);
            Add(typeof(ICellGetter)                  , "ExteriorLod.Offset.Y"                      , ConvertibleAction<float>.Instance);
            Add(typeof(ICellGetter)                  , "ExteriorLod.Offset.Z"                      , ConvertibleAction<float>.Instance);
            Add(typeof(ICellGetter)                  , "ExteriorLod.Worldspace"                    , FormLinkAction<IWorldspaceGetter>.Instance);
            Add(typeof(ISoundKeywordMappingGetter)   , "ExteriorTail"                              , FormLinkAction<ISoundDescriptorGetter>.Instance);
            Add(typeof(IWeaponGetter)                , "ExtraData.AnimationFireSeconds"            , ConvertibleAction<float>.Instance);
            Add(typeof(IWeaponGetter)                , "ExtraData.AnimationReloadSeconds"          , ConvertibleAction<float>.Instance);
            Add(typeof(IWeaponGetter)                , "ExtraData.BoltAnimSeconds"                 , ConvertibleAction<float>.Instance);
            Add(typeof(IWeaponGetter)                , "ExtraData.NumProjectiles"                  , ConvertibleAction<byte>.Instance);
            Add(typeof(IWeaponGetter)                , "ExtraData.Pattern"                         , EnumsAction.Instance);
            Add(typeof(IWeaponGetter)                , "ExtraData.ProjectileOverride"              , FormLinkAction<IProjectileGetter>.Instance);
            Add(typeof(IWeaponGetter)                , "ExtraData.RumbleDuration"                  , ConvertibleAction<float>.Instance);
            Add(typeof(IWeaponGetter)                , "ExtraData.RumbleLeftMotorStrength"         , ConvertibleAction<float>.Instance);
            Add(typeof(IWeaponGetter)                , "ExtraData.RumblePeriodMs"                  , ConvertibleAction<uint>.Instance);
            Add(typeof(IWeaponGetter)                , "ExtraData.RumbleRightMotorStrength"        , ConvertibleAction<float>.Instance);
            Add(typeof(IWeaponGetter)                , "ExtraData.SightedTransitionSeconds"        , ConvertibleAction<float>.Instance);
            Add(typeof(IHeadPartGetter)              , "ExtraParts"                                , FormLinksAction<IHeadPartGetter>.Instance);
            Add(typeof(IRaceGetter)                  , "FaceFxPhonemes.ForceNames"                 , ConvertibleAction<bool>.Instance);
            Add(typeof(IRaceGetter)                  , "FacegenFaceClamp"                          , ConvertibleAction<float>.Instance);
            Add(typeof(IRaceGetter)                  , "FacegenMainClamp"                          , ConvertibleAction<float>.Instance);
            Add(typeof(INpcGetter)                   , "FacialHairColor"                           , FormLinkAction<IColorRecordGetter>.Instance);
            Add(typeof(INpcGetter)                   , "FacialMorphIntensity"                      , ConvertibleAction<float>.Instance);
            Add(typeof(ICellGetter)                  , "FactionRank"                               , ConvertibleAction<int>.Instance);
            Add(typeof(IMusicTypeGetter)             , "FadeDuration"                              , ConvertibleAction<float>.Instance);
            Add(typeof(IProjectileGetter)            , "FadeDuration"                              , ConvertibleAction<float>.Instance);
            Add(typeof(IMusicTrackGetter)            , "FadeOut"                                   , ConvertibleAction<float>.Instance);
            Add(typeof(ILightGetter)                 , "FadeValue"                                 , ConvertibleAction<float>.Instance);
            Add(typeof(IMaterialObjectGetter)        , "FalloffBias"                               , ConvertibleAction<float>.Instance);
            Add(typeof(ILightGetter)                 , "FalloffExponent"                           , ConvertibleAction<float>.Instance);
            Add(typeof(IMaterialObjectGetter)        , "FalloffScale"                              , ConvertibleAction<float>.Instance);
            Add(null                                 , "Fallout4MajorRecordFlags"                  , FlagsAction.Instance);
            Add(typeof(INpcGetter)                   , "FarAwayModel"                              , FormLinkAction<IArmorGetter>.Instance);
            Add(typeof(INpcGetter)                   , "FarAwayModelDistance"                      , ConvertibleAction<ushort>.Instance);
            Add(typeof(IWeaponGetter)                , "FastEquipSound"                            , FormLinkAction<ISoundDescriptorGetter>.Instance);
            Add(typeof(IBookGetter)                  , "FeaturedItemMessage"                       , FormLinkAction<IMessageGetter>.Instance);
            Add(typeof(IMiscItemGetter)              , "FeaturedItemMessage"                       , FormLinkAction<IMessageGetter>.Instance);
            Add(typeof(IEffectShaderGetter)          , "FillAlphaFadeInTime"                       , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "FillAlphaPulseAmplitude"                   , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "FillAlphaPulseFrequency"                   , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "FillColorKey1"                             , BasicAction<Color>.Instance);
            Add(typeof(IEffectShaderGetter)          , "FillColorKey1Scale"                        , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "FillColorKey1Time"                         , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "FillColorKey2"                             , BasicAction<Color>.Instance);
            Add(typeof(IEffectShaderGetter)          , "FillColorKey2Scale"                        , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "FillColorKey2Time"                         , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "FillColorKey3"                             , BasicAction<Color>.Instance);
            Add(typeof(IEffectShaderGetter)          , "FillColorKey3Scale"                        , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "FillColorKey3Time"                         , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "FillFadeOutTime"                           , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "FillFullAlphaRatio"                        , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "FillFullAlphaTime"                         , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "FillPersistentAlphaRatio"                  , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "FillTexture"                               , ConvertibleAction<string>.Instance);
            Add(typeof(IEffectShaderGetter)          , "FillTextureAnimationSpeedU"                , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "FillTextureAnimationSpeedV"                , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "FillTextureScaleU"                         , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "FillTextureScaleV"                         , ConvertibleAction<float>.Instance);
            Add(null                                 , "Filter"                                    , ConvertibleAction<string>.Instance);
            Add(typeof(IAObjectModificationGetter)   , "FilterKeywords"                            , FormLinksAction<IKeywordGetter>.Instance);
            Add(typeof(IContainerGetter)             , "FilterList"                                , FormLinkAction<IFormListGetter>.Instance);
            Add(typeof(IMusicTrackGetter)            , "FinaleFilename"                            , ConvertibleAction<string>.Instance);
            Add(typeof(IWeaponGetter)                , "FirstPersonModel.ColorRemappingIndex"      , ConvertibleAction<float>.Instance);
            Add(typeof(IWeaponGetter)                , "FirstPersonModel.Data"                     , MemorySliceByteAction.Instance);
            Add(typeof(IWeaponGetter)                , "FirstPersonModel.File"                     , ConvertibleAction<string>.Instance);
            Add(typeof(IWeaponGetter)                , "FirstPersonModel.Flags"                    , FlagsAction.Instance);
            Add(typeof(IWeaponGetter)                , "FirstPersonModel.MaterialSwap"             , FormLinkAction<IMaterialSwapGetter>.Instance);
            Add(typeof(IWorldspaceGetter)            , "FixedDimensionsCenterCell.X"               , ConvertibleAction<short>.Instance);
            Add(typeof(IWorldspaceGetter)            , "FixedDimensionsCenterCell.Y"               , ConvertibleAction<short>.Instance);
            Add(typeof(IEquipTypeGetter)             , "Flag"                                      , FlagsAction.Instance);
            Add(typeof(IAddonNodeGetter)             , "Flags"                                     , EnumsAction.Instance);
            Add(null                                 , "Flags"                                     , FlagsAction.Instance);
            Add(typeof(ILightGetter)                 , "FlickerIntensityAmplitude"                 , ConvertibleAction<float>.Instance);
            Add(typeof(ILightGetter)                 , "FlickerMovementAmplitude"                  , ConvertibleAction<float>.Instance);
            Add(typeof(ILightGetter)                 , "FlickerPeriod"                             , ConvertibleAction<float>.Instance);
            Add(typeof(IMovementTypeGetter)          , "FlightAngleGain"                           , ConvertibleAction<float>.Instance);
            Add(typeof(IRaceGetter)                  , "FlightRadius"                              , ConvertibleAction<float>.Instance);
            Add(typeof(IMovementTypeGetter)          , "FloatHeight"                               , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)           , "FlyingAttackChance"                        , ConvertibleAction<float>.Instance);
            Add(typeof(IFloraGetter)                 , "FNAM"                                      , MemorySliceByteAction.Instance);
            Add(typeof(ITalkingActivatorGetter)      , "FNAM"                                      , ConvertibleAction<short>.Instance);
            Add(typeof(ITerminalGetter)              , "FNAM"                                      , MemorySliceByteAction.Instance);
            Add(typeof(IWeatherGetter)               , "FNAMDataTypeState"                         , FlagsAction.Instance);
            Add(typeof(IWaterGetter)                 , "FogAlphaDeepRange"                         , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "FogAlphaShallowRange"                      , ConvertibleAction<float>.Instance);
            Add(typeof(ILightingTemplateGetter)      , "FogClipDistance"                           , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "FogColorDeepRange"                         , ConvertibleAction<float>.Instance);
            Add(typeof(ILightingTemplateGetter)      , "FogColorHighFar"                           , BasicAction<Color>.Instance);
            Add(typeof(ILightingTemplateGetter)      , "FogColorHighNear"                          , BasicAction<Color>.Instance);
            Add(typeof(IWaterGetter)                 , "FogColorShallowRange"                      , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "FogDeepAlpha"                              , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "FogDeepColor"                              , BasicAction<Color>.Instance);
            Add(typeof(IWaterGetter)                 , "FogDepthAmount"                            , ConvertibleAction<float>.Instance);
            Add(typeof(IWeatherGetter)               , "FogDistanceDayFar"                         , ConvertibleAction<float>.Instance);
            Add(typeof(IWeatherGetter)               , "FogDistanceDayFarHeightMid"                , ConvertibleAction<float>.Instance);
            Add(typeof(IWeatherGetter)               , "FogDistanceDayFarHeightRange"              , ConvertibleAction<float>.Instance);
            Add(typeof(IWeatherGetter)               , "FogDistanceDayHighDensityScale"            , ConvertibleAction<float>.Instance);
            Add(typeof(IWeatherGetter)               , "FogDistanceDayMax"                         , ConvertibleAction<float>.Instance);
            Add(typeof(IWeatherGetter)               , "FogDistanceDayNear"                        , ConvertibleAction<float>.Instance);
            Add(typeof(IWeatherGetter)               , "FogDistanceDayNearHeightMid"               , ConvertibleAction<float>.Instance);
            Add(typeof(IWeatherGetter)               , "FogDistanceDayNearHeightRange"             , ConvertibleAction<float>.Instance);
            Add(typeof(IWeatherGetter)               , "FogDistanceDayPower"                       , ConvertibleAction<float>.Instance);
            Add(typeof(IWeatherGetter)               , "FogDistanceNightFar"                       , ConvertibleAction<float>.Instance);
            Add(typeof(IWeatherGetter)               , "FogDistanceNightFarHeightMid"              , ConvertibleAction<float>.Instance);
            Add(typeof(IWeatherGetter)               , "FogDistanceNightFarHeightRange"            , ConvertibleAction<float>.Instance);
            Add(typeof(IWeatherGetter)               , "FogDistanceNightHighDensityScale"          , ConvertibleAction<float>.Instance);
            Add(typeof(IWeatherGetter)               , "FogDistanceNightMax"                       , ConvertibleAction<float>.Instance);
            Add(typeof(IWeatherGetter)               , "FogDistanceNightNear"                      , ConvertibleAction<float>.Instance);
            Add(typeof(IWeatherGetter)               , "FogDistanceNightNearHeightMid"             , ConvertibleAction<float>.Instance);
            Add(typeof(IWeatherGetter)               , "FogDistanceNightNearHeightRange"           , ConvertibleAction<float>.Instance);
            Add(typeof(IWeatherGetter)               , "FogDistanceNightPower"                     , ConvertibleAction<float>.Instance);
            Add(typeof(ILightingTemplateGetter)      , "FogFar"                                    , ConvertibleAction<float>.Instance);
            Add(typeof(ILightingTemplateGetter)      , "FogFarColor"                               , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "FogFarColor.Day"                           , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "FogFarColor.EarlySunrise"                  , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "FogFarColor.EarlySunset"                   , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "FogFarColor.LateSunrise"                   , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "FogFarColor.LateSunset"                    , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "FogFarColor.Night"                         , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "FogFarColor.Sunrise"                       , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "FogFarColor.Sunset"                        , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "FogFarHigh.Day"                            , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "FogFarHigh.EarlySunrise"                   , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "FogFarHigh.EarlySunset"                    , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "FogFarHigh.LateSunrise"                    , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "FogFarHigh.LateSunset"                     , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "FogFarHigh.Night"                          , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "FogFarHigh.Sunrise"                        , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "FogFarHigh.Sunset"                         , BasicAction<Color>.Instance);
            Add(typeof(ILightingTemplateGetter)      , "FogFarScale"                               , ConvertibleAction<float>.Instance);
            Add(typeof(ILightingTemplateGetter)      , "FogHeightMid"                              , ConvertibleAction<float>.Instance);
            Add(typeof(ILightingTemplateGetter)      , "FogHeightRange"                            , ConvertibleAction<float>.Instance);
            Add(typeof(ILightingTemplateGetter)      , "FogHighFarScale"                           , ConvertibleAction<float>.Instance);
            Add(typeof(ILightingTemplateGetter)      , "FogHighNearScale"                          , ConvertibleAction<float>.Instance);
            Add(typeof(ILightingTemplateGetter)      , "FogMax"                                    , ConvertibleAction<float>.Instance);
            Add(typeof(ILightingTemplateGetter)      , "FogNear"                                   , ConvertibleAction<float>.Instance);
            Add(typeof(ILightingTemplateGetter)      , "FogNearColor"                              , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "FogNearColor.Day"                          , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "FogNearColor.EarlySunrise"                 , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "FogNearColor.EarlySunset"                  , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "FogNearColor.LateSunrise"                  , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "FogNearColor.LateSunset"                   , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "FogNearColor.Night"                        , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "FogNearColor.Sunrise"                      , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "FogNearColor.Sunset"                       , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "FogNearHigh.Day"                           , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "FogNearHigh.EarlySunrise"                  , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "FogNearHigh.EarlySunset"                   , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "FogNearHigh.LateSunrise"                   , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "FogNearHigh.LateSunset"                    , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "FogNearHigh.Night"                         , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "FogNearHigh.Sunrise"                       , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "FogNearHigh.Sunset"                        , BasicAction<Color>.Instance);
            Add(typeof(ILightingTemplateGetter)      , "FogNearScale"                              , ConvertibleAction<float>.Instance);
            Add(typeof(ILightingTemplateGetter)      , "FogPower"                                  , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "FogShallowAlpha"                           , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "FogShallowColor"                           , BasicAction<Color>.Instance);
            Add(typeof(IWaterGetter)                 , "FogUnderwaterAmount"                       , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "FogUnderwaterColor"                        , BasicAction<Color>.Instance);
            Add(typeof(IWaterGetter)                 , "FogUnderwaterFar"                          , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "FogUnderwaterNear"                         , ConvertibleAction<float>.Instance);
            Add(typeof(INpcGetter)                   , "FollowerCommandPackageList"                , FormLinkAction<IFormListGetter>.Instance);
            Add(typeof(INpcGetter)                   , "FollowerElevatorPackageList"               , FormLinkAction<IFormListGetter>.Instance);
            Add(typeof(IFactionGetter)               , "FollowerWaitMarker"                        , FormLinkAction<IPlacedObjectGetter>.Instance);
            Add(typeof(IImpactGetter)                , "FootstepExplosion"                         , FormLinkAction<IExplosionGetter>.Instance);
            Add(typeof(IImpactGetter)                , "FootstepParticleMaxDist"                   , ConvertibleAction<float>.Instance);
            Add(typeof(IArmorAddonGetter)            , "FootstepSound"                             , FormLinkAction<IFootstepSetGetter>.Instance);
            Add(typeof(IExplosionGetter)             , "Force"                                     , ConvertibleAction<float>.Instance);
            Add(null                                 , "ForcedLocRefType"                          , FormLinkAction<ILocationReferenceTypeGetter>.Instance);
            Add(null                                 , "FormVersion"                               , ConvertibleAction<ushort>.Instance);
            Add(typeof(IMovementTypeGetter)          , "ForwardRun"                                , ConvertibleAction<float>.Instance);
            Add(typeof(IMovementTypeGetter)          , "ForwardSprint"                             , ConvertibleAction<float>.Instance);
            Add(typeof(IMovementTypeGetter)          , "ForwardStanding"                           , ConvertibleAction<float>.Instance);
            Add(typeof(IMovementTypeGetter)          , "ForwardWalk"                               , ConvertibleAction<float>.Instance);
            Add(typeof(ILightGetter)                 , "FOV"                                       , ConvertibleAction<float>.Instance);
            Add(typeof(IZoomGetter)                  , "FovMult"                                   , ConvertibleAction<float>.Instance);
            Add(typeof(ITreeGetter)                  , "FrontAmplitude"                            , ConvertibleAction<float>.Instance);
            Add(typeof(ITreeGetter)                  , "FrontFrequency"                            , ConvertibleAction<float>.Instance);
            Add(typeof(IWeaponGetter)                , "FullPowerSeconds"                          , ConvertibleAction<float>.Instance);
            Add(typeof(INpcGetter)                   , "GearedUpWeapons"                           , ConvertibleAction<byte>.Instance);
            Add(typeof(INpcGetter)                   , "GiftFilter"                                , FormLinkAction<IFormListGetter>.Instance);
            Add(typeof(ILeveledItemGetter)           , "Global"                                    , FormLinkAction<IGlobalGetter>.Instance);
            Add(typeof(ILeveledNpcGetter)            , "Global"                                    , FormLinkAction<IGlobalGetter>.Instance);
            Add(typeof(ITextureSetGetter)            , "Glow"                                      , ConvertibleAction<string>.Instance);
            Add(typeof(IWaterGetter)                 , "GNAM"                                      , MemorySliceByteAction.Instance);
            Add(typeof(ILightGetter)                 , "Gobo"                                      , ConvertibleAction<string>.Instance);
            Add(typeof(ICellGetter)                  , "GodRays"                                   , FormLinkAction<IGodRaysGetter>.Instance);
            Add(typeof(ILightGetter)                 , "GodRays"                                   , FormLinkAction<IGodRaysGetter>.Instance);
            Add(typeof(ILightingTemplateGetter)      , "GodRays"                                   , FormLinkAction<IGodRaysGetter>.Instance);
            Add(typeof(IWeatherGetter)               , "GodRays.GodRayDay"                         , FormLinkAction<IGodRaysGetter>.Instance);
            Add(typeof(IWeatherGetter)               , "GodRays.GodRayEarlySunrise"                , FormLinkAction<IGodRaysGetter>.Instance);
            Add(typeof(IWeatherGetter)               , "GodRays.GodRayEarlySunset"                 , FormLinkAction<IGodRaysGetter>.Instance);
            Add(typeof(IWeatherGetter)               , "GodRays.GodRayLateSunrise"                 , FormLinkAction<IGodRaysGetter>.Instance);
            Add(typeof(IWeatherGetter)               , "GodRays.GodRayLateSunset"                  , FormLinkAction<IGodRaysGetter>.Instance);
            Add(typeof(IWeatherGetter)               , "GodRays.GodRayNight"                       , FormLinkAction<IGodRaysGetter>.Instance);
            Add(typeof(IWeatherGetter)               , "GodRays.GodRaySunrise"                     , FormLinkAction<IGodRaysGetter>.Instance);
            Add(typeof(IWeatherGetter)               , "GodRays.GodRaySunset"                      , FormLinkAction<IGodRaysGetter>.Instance);
            Add(typeof(ILightGetter)                 , "GodRaysNearClip"                           , ConvertibleAction<float>.Instance);
            Add(typeof(ILandscapeTextureGetter)      , "Grasses"                                   , FormLinksAction<IGrassGetter>.Instance);
            Add(typeof(IRegionGetter)                , "Grasses.Flags"                             , FlagsAction.Instance);
            Add(typeof(IRegionGetter)                , "Grasses.LodDisplayDistanceMultiplier"      , ConvertibleAction<float>.Instance);
            Add(typeof(IRegionGetter)                , "Grasses.OcclusionAccuracyDist"             , ConvertibleAction<float>.Instance);
            Add(typeof(IRegionGetter)                , "Grasses.Priority"                          , ConvertibleAction<byte>.Instance);
            Add(typeof(IProjectileGetter)            , "Gravity"                                   , ConvertibleAction<float>.Instance);
            Add(typeof(IShaderParticleGeometryGetter), "GravityVelocity"                           , ConvertibleAction<float>.Instance);
            Add(typeof(ICellGetter)                  , "Grid.Flags"                                , EnumsAction.Instance);
            Add(typeof(ICellGetter)                  , "Grid.Point.X"                              , ConvertibleAction<int>.Instance);
            Add(typeof(ICellGetter)                  , "Grid.Point.Y"                              , ConvertibleAction<int>.Instance);
            Add(typeof(ICombatStyleGetter)           , "GroundAttackChance"                        , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)           , "GroundAttackTime"                          , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)           , "GroupOffensiveMult"                        , ConvertibleAction<float>.Instance);
            Add(typeof(INpcGetter)                   , "GuardWarnOverridePackageList"              , FormLinkAction<IFormListGetter>.Instance);
            Add(typeof(INpcGetter)                   , "HairColor"                                 , FormLinkAction<IColorRecordGetter>.Instance);
            Add(typeof(IRaceGetter)                  , "HairColorExtendedLookupTexture"            , ConvertibleAction<string>.Instance);
            Add(typeof(IRaceGetter)                  , "HairColorLookupTexture"                    , ConvertibleAction<string>.Instance);
            Add(typeof(IFloraGetter)                 , "HarvestSound"                              , FormLinkAction<ISoundDescriptorGetter>.Instance);
            Add(typeof(ITreeGetter)                  , "HarvestSound"                              , FormLinkAction<ISoundDescriptorGetter>.Instance);
            Add(typeof(IMaterialTypeGetter)          , "HavokDisplayColor"                         , BasicAction<Color>.Instance);
            Add(typeof(ILandscapeTextureGetter)      , "HavokFriction"                             , ConvertibleAction<byte>.Instance);
            Add(typeof(IMaterialTypeGetter)          , "HavokImpactDataSet"                        , FormLinkAction<IImpactDataSetGetter>.Instance);
            Add(typeof(ILandscapeTextureGetter)      , "HavokRestitution"                          , ConvertibleAction<byte>.Instance);
            Add(typeof(IImpactGetter)                , "Hazard"                                    , FormLinkAction<IHazardGetter>.Instance);
            Add(typeof(IWorldspaceGetter)            , "HdLodDiffuseTexture"                       , ConvertibleAction<string>.Instance);
            Add(typeof(IWorldspaceGetter)            , "HdLodNormalTexture"                        , ConvertibleAction<string>.Instance);
            Add(typeof(IImageSpaceGetter)            , "HdrAutoExposureMax"                        , ConvertibleAction<float>.Instance);
            Add(typeof(IImageSpaceGetter)            , "HdrAutoExposureMin"                        , ConvertibleAction<float>.Instance);
            Add(typeof(IImageSpaceGetter)            , "HdrBloomScale"                             , ConvertibleAction<float>.Instance);
            Add(typeof(IImageSpaceGetter)            , "HdrBloomThreshold"                         , ConvertibleAction<float>.Instance);
            Add(typeof(IImageSpaceGetter)            , "HdrEyeAdaptSpeed"                          , ConvertibleAction<float>.Instance);
            Add(typeof(IImageSpaceGetter)            , "HdrMiddleGray"                             , ConvertibleAction<float>.Instance);
            Add(typeof(IImageSpaceGetter)            , "HdrSkyScale"                               , ConvertibleAction<float>.Instance);
            Add(typeof(IImageSpaceGetter)            , "HdrSunlightScale"                          , ConvertibleAction<float>.Instance);
            Add(typeof(IImageSpaceGetter)            , "HdrTonemapE"                               , ConvertibleAction<float>.Instance);
            Add(typeof(ITerminalGetter)              , "HeaderText"                                , ConvertibleAction<string>.Instance);
            Add(typeof(INpcGetter)                   , "HeadParts"                                 , FormLinksAction<IHeadPartGetter>.Instance);
            Add(typeof(INpcGetter)                   , "HeadTexture"                               , FormLinkAction<ITextureSetGetter>.Instance);
            Add(typeof(IAmmunitionGetter)            , "Health"                                    , ConvertibleAction<uint>.Instance);
            Add(typeof(IArmorGetter)                 , "Health"                                    , ConvertibleAction<uint>.Instance);
            Add(typeof(ITextureSetGetter)            , "Height"                                    , ConvertibleAction<string>.Instance);
            Add(typeof(IRaceGetter)                  , "Height.Female"                             , ConvertibleAction<float>.Instance);
            Add(typeof(IRaceGetter)                  , "Height.Male"                               , ConvertibleAction<float>.Instance);
            Add(typeof(INpcGetter)                   , "HeightMax"                                 , ConvertibleAction<float>.Instance);
            Add(typeof(INpcGetter)                   , "HeightMin"                                 , ConvertibleAction<float>.Instance);
            Add(typeof(IGrassGetter)                 , "HeightRange"                               , ConvertibleAction<float>.Instance);
            Add(typeof(IReverbParametersGetter)      , "HfReferenceHertz"                          , ConvertibleAction<ushort>.Instance);
            Add(typeof(IPerkGetter)                  , "Hidden"                                    , ConvertibleAction<bool>.Instance);
            Add(typeof(ILightingTemplateGetter)      , "HighDensityScale"                          , ConvertibleAction<float>.Instance);
            Add(typeof(IMagicEffectGetter)           , "HitEffectArt"                              , FormLinkAction<IArtObjectGetter>.Instance);
            Add(typeof(IMagicEffectGetter)           , "HitShader"                                 , FormLinkAction<IEffectShaderGetter>.Instance);
            Add(typeof(IMagicEffectGetter)           , "HitVisuals"                                , FormLinkAction<IVisualEffectGetter>.Instance);
            Add(typeof(IEffectShaderGetter)          , "HolesAnimationEndTime"                     , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "HolesAnimationEndValue"                    , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "HolesAnimationStartTime"                   , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "HolesAnimationStartValue"                  , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "HolesTexture"                              , ConvertibleAction<string>.Instance);
            Add(typeof(IWeatherGetter)               , "HorizonColor.Day"                          , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "HorizonColor.EarlySunrise"                 , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "HorizonColor.EarlySunset"                  , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "HorizonColor.LateSunrise"                  , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "HorizonColor.LateSunset"                   , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "HorizonColor.Night"                        , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "HorizonColor.Sunrise"                      , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "HorizonColor.Sunset"                       , BasicAction<Color>.Instance);
            Add(typeof(ICombatStyleGetter)           , "HoverChance"                               , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)           , "HoverTime"                                 , ConvertibleAction<float>.Instance);
            Add(typeof(IClassGetter)                 , "Icon"                                      , ConvertibleAction<string>.Instance);
            Add(typeof(IPerkGetter)                  , "Icon"                                      , ConvertibleAction<string>.Instance);
            Add(null                                 , "Icons.InventoryImage"                      , ConvertibleAction<string>.Instance);
            Add(null                                 , "Icons.MessageIcon"                         , ConvertibleAction<string>.Instance);
            Add(typeof(IPackageGetter)               , "IdleAnimations.Animations"                 , FormLinksAction<IIdleAnimationGetter>.Instance);
            Add(typeof(IPackageGetter)               , "IdleAnimations.IDLB"                       , ConvertibleAction<int>.Instance);
            Add(typeof(IPackageGetter)               , "IdleAnimations.TimerSetting"               , ConvertibleAction<float>.Instance);
            Add(typeof(IPackageGetter)               , "IdleAnimations.Type"                       , EnumsAction.Instance);
            Add(typeof(IRaceGetter)                  , "IdleChatterTimeMax"                        , ConvertibleAction<float>.Instance);
            Add(typeof(IRaceGetter)                  , "IdleChatterTimeMin"                        , ConvertibleAction<float>.Instance);
            Add(typeof(IWeaponGetter)                , "IdleSound"                                 , FormLinkAction<ISoundDescriptorGetter>.Instance);
            Add(typeof(IIdleMarkerGetter)            , "IdleTimer"                                 , ConvertibleAction<float>.Instance);
            Add(typeof(ICellGetter)                  , "ImageSpace"                                , FormLinkAction<IImageSpaceGetter>.Instance);
            Add(typeof(IWaterGetter)                 , "ImageSpace"                                , FormLinkAction<IImageSpaceGetter>.Instance);
            Add(typeof(IWeatherGetter)               , "ImageSpaceDay"                             , FormLinkAction<IImageSpaceGetter>.Instance);
            Add(typeof(IWeatherGetter)               , "ImageSpaceEarlySunrise"                    , FormLinkAction<IImageSpaceGetter>.Instance);
            Add(typeof(IWeatherGetter)               , "ImageSpaceEarlySunset"                     , FormLinkAction<IImageSpaceGetter>.Instance);
            Add(typeof(IWeatherGetter)               , "ImageSpaceLateSunrise"                     , FormLinkAction<IImageSpaceGetter>.Instance);
            Add(typeof(IWeatherGetter)               , "ImageSpaceLateSunset"                      , FormLinkAction<IImageSpaceGetter>.Instance);
            Add(typeof(IZoomGetter)                  , "ImagespaceModifier"                        , FormLinkAction<IImageSpaceAdapterGetter>.Instance);
            Add(null                                 , "ImageSpaceModifier"                        , FormLinkAction<IImageSpaceAdapterGetter>.Instance);
            Add(typeof(IWeatherGetter)               , "ImageSpaceNight"                           , FormLinkAction<IImageSpaceGetter>.Instance);
            Add(typeof(IHazardGetter)                , "ImageSpaceRadius"                          , ConvertibleAction<float>.Instance);
            Add(typeof(IWeatherGetter)               , "ImageSpaceSunrise"                         , FormLinkAction<IImageSpaceGetter>.Instance);
            Add(typeof(IWeatherGetter)               , "ImageSpaceSunset"                          , FormLinkAction<IImageSpaceGetter>.Instance);
            Add(typeof(IMagicEffectGetter)           , "ImpactData"                                , FormLinkAction<IImpactDataSetGetter>.Instance);
            Add(null                                 , "ImpactDataSet"                             , FormLinkAction<IImpactDataSetGetter>.Instance);
            Add(typeof(IProjectileGetter)            , "ImpactForce"                               , ConvertibleAction<float>.Instance);
            Add(typeof(IRaceGetter)                  , "ImpactMaterialType"                        , FormLinkAction<IMaterialTypeGetter>.Instance);
            Add(typeof(IWeatherGetter)               , "IMSPDataTypeState"                         , FlagsAction.Instance);
            Add(typeof(IMessageGetter)               , "INAM"                                      , ConvertibleAction<int>.Instance);
            Add(typeof(ICollisionLayerGetter)        , "Index"                                     , ConvertibleAction<uint>.Instance);
            Add(typeof(IFloraGetter)                 , "Ingredient"                                , FormLinkAction<IHarvestTargetGetter>.Instance);
            Add(typeof(ITreeGetter)                  , "Ingredient"                                , FormLinkAction<IHarvestTargetGetter>.Instance);
            Add(typeof(IIngredientGetter)            , "IngredientValue"                           , ConvertibleAction<int>.Instance);
            Add(typeof(INpcGetter)                   , "InheritsSoundsFrom"                        , FormLinkAction<INpcGetter>.Instance);
            Add(typeof(IShaderParticleGeometryGetter), "InitialRotation"                           , ConvertibleAction<float>.Instance);
            Add(typeof(IRaceGetter)                  , "InjuredHealthPercent"                      , ConvertibleAction<float>.Instance);
            Add(typeof(IExplosionGetter)             , "InnerRadius"                               , ConvertibleAction<float>.Instance);
            Add(typeof(ICellGetter)                  , "InPreVisFileOf"                            , FormLinkAction<ICellGetter>.Instance);
            Add(typeof(IArmorGetter)                 , "InstanceNaming"                            , FormLinkAction<IInstanceNamingRulesGetter>.Instance);
            Add(typeof(IWeaponGetter)                , "InstanceNaming"                            , FormLinkAction<IInstanceNamingRulesGetter>.Instance);
            Add(typeof(IActivatorGetter)             , "InteractionKeyword"                        , FormLinkAction<IKeywordGetter>.Instance);
            Add(typeof(IWorldspaceGetter)            , "InteriorLighting"                          , FormLinkAction<ILightingTemplateGetter>.Instance);
            Add(typeof(IPackageGetter)               , "InterruptOverride"                         , EnumsAction.Instance);
            Add(typeof(IPackageGetter)               , "InteruptFlags"                             , FlagsAction.Instance);
            Add(typeof(IBookGetter)                  , "InventoryArt"                              , FormLinkAction<IStaticGetter>.Instance);
            Add(typeof(IAssociationTypeGetter)       , "IsFamily"                                  , ConvertibleAction<bool>.Instance);
            Add(typeof(IAcousticSpaceGetter)         , "IsInterior"                                , ConvertibleAction<bool>.Instance);
            Add(typeof(IExplosionGetter)             , "ISRadius"                                  , ConvertibleAction<float>.Instance);
            Add(typeof(IMaterialObjectGetter)        , "IsSinglePass"                              , ConvertibleAction<bool>.Instance);
            Add(typeof(IFormListGetter)              , "Items"                                     , FormLinksAction<IFallout4MajorRecordGetter>.Instance);
            Add(typeof(IOutfitGetter)                , "Items"                                     , FormLinksAction<IOutfitTargetGetter>.Instance);
            Add(typeof(IFactionGetter)               , "JailOutfit"                                , FormLinkAction<IOutfitGetter>.Instance);
            Add(null                                 , "Keywords"                                  , FormLinksAction<IKeywordGetter>.Instance);
            Add(typeof(IRegionGetter)                , "Land.Flags"                                , FlagsAction.Instance);
            Add(typeof(IRegionGetter)                , "Land.LodDisplayDistanceMultiplier"         , ConvertibleAction<float>.Instance);
            Add(typeof(IRegionGetter)                , "Land.OcclusionAccuracyDist"                , ConvertibleAction<float>.Instance);
            Add(typeof(IRegionGetter)                , "Land.Priority"                             , ConvertibleAction<byte>.Instance);
            Add(typeof(IWorldspaceGetter)            , "LandDefaults.DefaultLandHeight"            , ConvertibleAction<float>.Instance);
            Add(typeof(IWorldspaceGetter)            , "LandDefaults.DefaultWaterHeight"           , ConvertibleAction<float>.Instance);
            Add(typeof(ICellGetter)                  , "Landscape.DATA"                            , MemorySliceByteAction.Instance);
            Add(typeof(ICellGetter)                  , "Landscape.EditorID"                        , ConvertibleAction<string>.Instance);
            Add(typeof(ICellGetter)                  , "Landscape.Fallout4MajorRecordFlags"        , FlagsAction.Instance);
            Add(typeof(ICellGetter)                  , "Landscape.FormVersion"                     , ConvertibleAction<ushort>.Instance);
            Add(typeof(ICellGetter)                  , "Landscape.Textures"                        , FormLinksAction<ILandscapeTextureGetter>.Instance);
            Add(typeof(IStaticGetter)                , "LeafAmplitude"                             , ConvertibleAction<float>.Instance);
            Add(typeof(ITreeGetter)                  , "LeafAmplitude"                             , ConvertibleAction<float>.Instance);
            Add(typeof(ITreeGetter)                  , "LeafFlexibility"                           , ConvertibleAction<float>.Instance);
            Add(typeof(IStaticGetter)                , "LeafFrequency"                             , ConvertibleAction<float>.Instance);
            Add(typeof(ITreeGetter)                  , "LeafFrequency"                             , ConvertibleAction<float>.Instance);
            Add(typeof(IMovementTypeGetter)          , "LeftRun"                                   , ConvertibleAction<float>.Instance);
            Add(typeof(IMovementTypeGetter)          , "LeftSprint"                                , ConvertibleAction<float>.Instance);
            Add(typeof(IMovementTypeGetter)          , "LeftStanding"                              , ConvertibleAction<float>.Instance);
            Add(typeof(IMovementTypeGetter)          , "LeftWalk"                                  , ConvertibleAction<float>.Instance);
            Add(typeof(INpcGetter)                   , "LegendaryChance"                           , FormLinkAction<IGlobalGetter>.Instance);
            Add(typeof(INpcGetter)                   , "LegendaryTemplate"                         , FormLinkAction<INpcSpawnGetter>.Instance);
            Add(typeof(ILightGetter)                 , "Lens"                                      , FormLinkAction<ILensFlareGetter>.Instance);
            Add(typeof(IPerkGetter)                  , "Level"                                     , ConvertibleAction<byte>.Instance);
            Add(typeof(IAObjectModificationGetter)   , "LevelTierScaledOffset"                     , ConvertibleAction<byte>.Instance);
            Add(typeof(IHazardGetter)                , "Lifetime"                                  , ConvertibleAction<float>.Instance);
            Add(typeof(IProjectileGetter)            , "Lifetime"                                  , ConvertibleAction<float>.Instance);
            Add(null                                 , "Light"                                     , FormLinkAction<ILightGetter>.Instance);
            Add(typeof(ILightingTemplateGetter)      , "LightFadeEndDistance"                      , ConvertibleAction<float>.Instance);
            Add(typeof(ILightingTemplateGetter)      , "LightFadeStartDistance"                    , ConvertibleAction<float>.Instance);
            Add(typeof(ICellGetter)                  , "Lighting.AmbientColor"                     , BasicAction<Color>.Instance);
            Add(typeof(ICellGetter)                  , "Lighting.DirectionalColor"                 , BasicAction<Color>.Instance);
            Add(typeof(ICellGetter)                  , "Lighting.DirectionalFade"                  , ConvertibleAction<float>.Instance);
            Add(typeof(ICellGetter)                  , "Lighting.DirectionalRotationXY"            , ConvertibleAction<int>.Instance);
            Add(typeof(ICellGetter)                  , "Lighting.DirectionalRotationZ"             , ConvertibleAction<int>.Instance);
            Add(typeof(ICellGetter)                  , "Lighting.FarHeightMid"                     , ConvertibleAction<float>.Instance);
            Add(typeof(ICellGetter)                  , "Lighting.FarHeightRange"                   , ConvertibleAction<float>.Instance);
            Add(typeof(ICellGetter)                  , "Lighting.FogClipDistance"                  , ConvertibleAction<float>.Instance);
            Add(typeof(ICellGetter)                  , "Lighting.FogFar"                           , ConvertibleAction<float>.Instance);
            Add(typeof(ICellGetter)                  , "Lighting.FogFarColor"                      , BasicAction<Color>.Instance);
            Add(typeof(ICellGetter)                  , "Lighting.FogFarScale"                      , ConvertibleAction<float>.Instance);
            Add(typeof(ICellGetter)                  , "Lighting.FogHighFarScale"                  , ConvertibleAction<float>.Instance);
            Add(typeof(ICellGetter)                  , "Lighting.FogHighNearScale"                 , ConvertibleAction<float>.Instance);
            Add(typeof(ICellGetter)                  , "Lighting.FogMax"                           , ConvertibleAction<float>.Instance);
            Add(typeof(ICellGetter)                  , "Lighting.FogNear"                          , ConvertibleAction<float>.Instance);
            Add(typeof(ICellGetter)                  , "Lighting.FogNearColor"                     , BasicAction<Color>.Instance);
            Add(typeof(ICellGetter)                  , "Lighting.FogNearScale"                     , ConvertibleAction<float>.Instance);
            Add(typeof(ICellGetter)                  , "Lighting.FogPower"                         , ConvertibleAction<float>.Instance);
            Add(typeof(ICellGetter)                  , "Lighting.ForColorHighFar"                  , BasicAction<Color>.Instance);
            Add(typeof(ICellGetter)                  , "Lighting.ForColorHighNear"                 , BasicAction<Color>.Instance);
            Add(typeof(ICellGetter)                  , "Lighting.HighDensityScale"                 , ConvertibleAction<float>.Instance);
            Add(typeof(ICellGetter)                  , "Lighting.Inherits"                         , FlagsAction.Instance);
            Add(typeof(ICellGetter)                  , "Lighting.LightFadeBegin"                   , ConvertibleAction<float>.Instance);
            Add(typeof(ICellGetter)                  , "Lighting.LightFadeEnd"                     , ConvertibleAction<float>.Instance);
            Add(typeof(ICellGetter)                  , "Lighting.NearHeightMid"                    , ConvertibleAction<float>.Instance);
            Add(typeof(ICellGetter)                  , "Lighting.NearHeightRange"                  , ConvertibleAction<float>.Instance);
            Add(typeof(ICellGetter)                  , "LightingTemplate"                          , FormLinkAction<ILightingTemplateGetter>.Instance);
            Add(typeof(IWeatherGetter)               , "LightningColor"                            , BasicAction<Color>.Instance);
            Add(typeof(IHazardGetter)                , "Limit"                                     , ConvertibleAction<uint>.Instance);
            Add(typeof(IWaterGetter)                 , "LinearVelocity.X"                          , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "LinearVelocity.Y"                          , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "LinearVelocity.Z"                          , ConvertibleAction<float>.Instance);
            Add(typeof(IWeatherGetter)               , "LNAM"                                      , MemorySliceByteAction.Instance);
            Add(typeof(ILoadScreenGetter)            , "LoadingScreenNif"                          , FormLinkAction<IStaticObjectGetter>.Instance);
            Add(typeof(ICameraShotGetter)            , "Location"                                  , EnumsAction.Instance);
            Add(null                                 , "Location"                                  , FormLinkAction<ILocationGetter>.Instance);
            Add(typeof(ILocationGetter)              , "LocationCellMarkerReference"               , FormLinksAction<IPlacedGetter>.Instance);
            Add(typeof(ICameraShotGetter)            , "LocationSpring"                            , ConvertibleAction<float>.Instance);
            Add(typeof(ICellGetter)                  , "LockList"                                  , FormLinkAction<ILockListGetter>.Instance);
            Add(typeof(IWorldspaceGetter)            , "LodWater"                                  , FormLinkAction<IWaterGetter>.Instance);
            Add(typeof(IWorldspaceGetter)            , "LodWaterHeight"                            , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)           , "LongRangeAdjustRangeMult"                  , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)           , "LongRangeCrouchMult"                       , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)           , "LongRangeRangeMult"                        , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)           , "LongRangeStrafeMult"                       , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)           , "LongRangeWaitMult"                         , ConvertibleAction<float>.Instance);
            Add(typeof(ISoundDescriptorGetter)       , "LoopAndRumble.Loop"                        , EnumsAction.Instance);
            Add(typeof(ISoundDescriptorGetter)       , "LoopAndRumble.RumbleValues"                , ConvertibleAction<byte>.Instance);
            Add(typeof(ISoundDescriptorGetter)       , "LoopAndRumble.Sidechain"                   , ConvertibleAction<byte>.Instance);
            Add(typeof(IMusicTrackGetter)            , "LoopData.Begins"                           , ConvertibleAction<float>.Instance);
            Add(typeof(IMusicTrackGetter)            , "LoopData.Count"                            , ConvertibleAction<uint>.Instance);
            Add(typeof(IMusicTrackGetter)            , "LoopData.Ends"                             , ConvertibleAction<float>.Instance);
            Add(typeof(IIdleAnimationGetter)         , "LoopingSecondsMax"                         , ConvertibleAction<byte>.Instance);
            Add(typeof(IIdleAnimationGetter)         , "LoopingSecondsMin"                         , ConvertibleAction<byte>.Instance);
            Add(typeof(ITalkingActivatorGetter)      , "LoopingSound"                              , FormLinkAction<ISoundMarkerGetter>.Instance);
            Add(null                                 , "LoopingSound"                              , FormLinkAction<ISoundDescriptorGetter>.Instance);
            Add(typeof(IDoorGetter)                  , "LoopSound"                                 , FormLinkAction<ISoundDescriptorGetter>.Instance);
            Add(typeof(IAObjectModificationGetter)   , "LooseMod"                                  , FormLinkAction<IMiscItemGetter>.Instance);
            Add(typeof(IImageSpaceGetter)            , "Lut"                                       , ConvertibleAction<string>.Instance);
            Add(typeof(IWeatherGetter)               , "Magic.OnLightningStrikeSpell"              , FormLinkAction<ISpellGetter>.Instance);
            Add(typeof(IWeatherGetter)               , "Magic.OnLightningStrikeThreshold"          , ConvertibleAction<float>.Instance);
            Add(typeof(IWeatherGetter)               , "Magic.OnWeatherActivateSpell"              , FormLinkAction<ISpellGetter>.Instance);
            Add(typeof(IWeatherGetter)               , "Magic.OnWeatherActivateThreshold"          , ConvertibleAction<float>.Instance);
            Add(typeof(IMagicEffectGetter)           , "MagicSkill"                                , FormLinkAction<IActorValueInformationGetter>.Instance);
            Add(null                                 , "MajorFlags"                                , FlagsAction.Instance);
            Add(typeof(IRegionGetter)                , "Map.Flags"                                 , FlagsAction.Instance);
            Add(typeof(IRegionGetter)                , "Map.LodDisplayDistanceMultiplier"          , ConvertibleAction<float>.Instance);
            Add(typeof(IRegionGetter)                , "Map.Name"                                  , ConvertibleAction<string>.Instance);
            Add(typeof(IRegionGetter)                , "Map.OcclusionAccuracyDist"                 , ConvertibleAction<float>.Instance);
            Add(typeof(IRegionGetter)                , "Map.Priority"                              , ConvertibleAction<byte>.Instance);
            Add(typeof(IRegionGetter)                , "MapColor"                                  , BasicAction<Color>.Instance);
            Add(typeof(IWorldspaceGetter)            , "MapData.NorthwestCellCoords.X"             , ConvertibleAction<short>.Instance);
            Add(typeof(IWorldspaceGetter)            , "MapData.NorthwestCellCoords.Y"             , ConvertibleAction<short>.Instance);
            Add(typeof(IWorldspaceGetter)            , "MapData.SoutheastCellCoords.X"             , ConvertibleAction<short>.Instance);
            Add(typeof(IWorldspaceGetter)            , "MapData.SoutheastCellCoords.Y"             , ConvertibleAction<short>.Instance);
            Add(typeof(IWorldspaceGetter)            , "MapData.UsableDimensions.X"                , ConvertibleAction<int>.Instance);
            Add(typeof(IWorldspaceGetter)            , "MapData.UsableDimensions.Y"                , ConvertibleAction<int>.Instance);
            Add(typeof(IWorldspaceGetter)            , "MapImage"                                  , ConvertibleAction<string>.Instance);
            Add(typeof(IActivatorGetter)             , "MarkerColor"                               , BasicAction<Color>.Instance);
            Add(typeof(IFurnitureGetter)             , "MarkerModel"                               , ConvertibleAction<string>.Instance);
            Add(typeof(ITerminalGetter)              , "MarkerModel"                               , ConvertibleAction<string>.Instance);
            Add(typeof(IAddonNodeGetter)             , "MasterParticleSystemCap"                   , ConvertibleAction<ushort>.Instance);
            Add(typeof(IStaticGetter)                , "Material"                                  , FormLinkAction<IMaterialObjectGetter>.Instance);
            Add(typeof(ITextureSetGetter)            , "Material"                                  , ConvertibleAction<string>.Instance);
            Add(typeof(IWaterGetter)                 , "Material"                                  , FormLinkAction<IMaterialTypeGetter>.Instance);
            Add(typeof(ILandscapeTextureGetter)      , "MaterialType"                              , FormLinkAction<IMaterialTypeGetter>.Instance);
            Add(typeof(IMaterialObjectGetter)        , "MaterialUvScale"                           , ConvertibleAction<float>.Instance);
            Add(typeof(IStaticGetter)                , "MaxAngle"                                  , ConvertibleAction<float>.Instance);
            Add(typeof(ILeveledItemGetter)           , "MaxCount"                                  , ConvertibleAction<byte>.Instance);
            Add(typeof(ILeveledNpcGetter)            , "MaxCount"                                  , ConvertibleAction<byte>.Instance);
            Add(typeof(IWorldspaceGetter)            , "MaxHeight.CellData"                        , MemorySliceByteAction.Instance);
            Add(typeof(IWorldspaceGetter)            , "MaxHeight.Max.X"                           , ConvertibleAction<short>.Instance);
            Add(typeof(IWorldspaceGetter)            , "MaxHeight.Max.Y"                           , ConvertibleAction<short>.Instance);
            Add(typeof(IWorldspaceGetter)            , "MaxHeight.Min.X"                           , ConvertibleAction<short>.Instance);
            Add(typeof(IWorldspaceGetter)            , "MaxHeight.Min.Y"                           , ConvertibleAction<short>.Instance);
            Add(typeof(ICellGetter)                  , "MaxHeightData.Offset"                      , ConvertibleAction<float>.Instance);
            Add(typeof(IEncounterZoneGetter)         , "MaxLevel"                                  , ConvertibleAction<byte>.Instance);
            Add(typeof(IWeaponGetter)                , "MaxRange"                                  , ConvertibleAction<float>.Instance);
            Add(typeof(IAObjectModificationGetter)   , "MaxRank"                                   , ConvertibleAction<byte>.Instance);
            Add(typeof(IGrassGetter)                 , "MaxSlope"                                  , ConvertibleAction<byte>.Instance);
            Add(typeof(ICameraShotGetter)            , "MaxTime"                                   , ConvertibleAction<float>.Instance);
            Add(typeof(IRaceGetter)                  , "MeatCapTextureSet"                         , FormLinkAction<ITextureSetGetter>.Instance);
            Add(typeof(ICombatStyleGetter)           , "MeleeAttackStaggeredMult"                  , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)           , "MeleeAttackWhenStaggeredMult"              , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)           , "MeleeBashAttackMult"                       , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)           , "MeleeBashMult"                             , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)           , "MeleeBashPowerAttackMult"                  , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)           , "MeleeBashRecoilMult"                       , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)           , "MeleeBlockWhenStaggeredMult"               , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)           , "MeleePowerAttackBlockingMult"              , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)           , "MeleePowerAttackStaggeredMult"             , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)           , "MeleeSpecialAttackMult"                    , ConvertibleAction<float>.Instance);
            Add(typeof(IWeaponGetter)                , "MeleeSpeed"                                , EnumsAction.Instance);
            Add(typeof(IEffectShaderGetter)          , "MembraneBlendOperation"                    , EnumsAction.Instance);
            Add(typeof(IEffectShaderGetter)          , "MembraneDestBlendMode"                     , EnumsAction.Instance);
            Add(typeof(IEffectShaderGetter)          , "MembranePaletteTexture"                    , ConvertibleAction<string>.Instance);
            Add(typeof(IEffectShaderGetter)          , "MembraneSourceBlendMode"                   , EnumsAction.Instance);
            Add(typeof(IEffectShaderGetter)          , "MembraneZTest"                             , EnumsAction.Instance);
            Add(typeof(IConstructibleObjectGetter)   , "MenuArtObject"                             , FormLinkAction<IArtObjectGetter>.Instance);
            Add(typeof(IMagicEffectGetter)           , "MenuDisplayObject"                         , FormLinkAction<IStaticGetter>.Instance);
            Add(typeof(ISoundCategoryGetter)         , "MenuSlider"                                , FormLinkAction<ISoundCategoryGetter>.Instance);
            Add(typeof(IFactionGetter)               , "MerchantContainer"                         , FormLinkAction<IPlacedObjectGetter>.Instance);
            Add(typeof(ISoundCategoryGetter)         , "MinFrequencyMultiplier"                    , ConvertibleAction<float>.Instance);
            Add(typeof(IMagicEffectGetter)           , "MinimumSkillLevel"                         , ConvertibleAction<uint>.Instance);
            Add(typeof(IEncounterZoneGetter)         , "MinLevel"                                  , ConvertibleAction<byte>.Instance);
            Add(typeof(IWeaponGetter)                , "MinPowerPerShot"                           , ConvertibleAction<float>.Instance);
            Add(typeof(IWeaponGetter)                , "MinRange"                                  , ConvertibleAction<float>.Instance);
            Add(typeof(IGrassGetter)                 , "MinSlope"                                  , ConvertibleAction<byte>.Instance);
            Add(typeof(ICameraShotGetter)            , "MinTime"                                   , ConvertibleAction<float>.Instance);
            Add(typeof(IWeaponGetter)                , "MO4F"                                      , ConvertibleAction<int>.Instance);
            Add(null                                 , "Model.ColorRemappingIndex"                 , ConvertibleAction<float>.Instance);
            Add(null                                 , "Model.Data"                                , MemorySliceByteAction.Instance);
            Add(null                                 , "Model.File"                                , ConvertibleAction<string>.Instance);
            Add(null                                 , "Model.Flags"                               , FlagsAction.Instance);
            Add(null                                 , "Model.MaterialSwap"                        , FormLinkAction<IMaterialSwapGetter>.Instance);
            Add(typeof(IMaterialTypeGetter)          , "ModelData"                                 , MemorySliceByteAction.Instance);
            Add(typeof(IAmmunitionGetter)            , "ModelInfo"                                 , MemorySliceByteAction.Instance);
            Add(typeof(IComponentGetter)             , "ModScrapScalar"                            , FormLinkAction<IGlobalGetter>.Instance);
            Add(typeof(INpcGetter)                   , "Mood"                                      , EnumsAction.Instance);
            Add(typeof(IWeatherGetter)               , "MoonGlareColor.Day"                        , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "MoonGlareColor.EarlySunrise"               , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "MoonGlareColor.EarlySunset"                , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "MoonGlareColor.LateSunrise"                , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "MoonGlareColor.LateSunset"                 , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "MoonGlareColor.Night"                      , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "MoonGlareColor.Sunrise"                    , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "MoonGlareColor.Sunset"                     , BasicAction<Color>.Instance);
            Add(typeof(IClimateGetter)               , "Moons"                                     , FlagsAction.Instance);
            Add(typeof(IRaceGetter)                  , "MorphRace"                                 , FormLinkAction<IRaceGetter>.Instance);
            Add(typeof(IRaceGetter)                  , "MorphValuesLastIndex"                      , ConvertibleAction<int>.Instance);
            Add(typeof(ITextureSetGetter)            , "Multilayer"                                , ConvertibleAction<string>.Instance);
            Add(null                                 , "Music"                                     , FormLinkAction<IMusicTypeGetter>.Instance);
            Add(typeof(IProjectileGetter)            , "MuzzleFlash"                               , FormLinkAction<ILightGetter>.Instance);
            Add(typeof(IProjectileGetter)            , "MuzzleFlashDuration"                       , ConvertibleAction<float>.Instance);
            Add(typeof(IProjectileGetter)            , "MuzzleFlashModel"                          , ConvertibleAction<string>.Instance);
            Add(typeof(IWeatherGetter)               , "NAM0DataTypeState"                         , FlagsAction.Instance);
            Add(typeof(IConstructibleObjectGetter)   , "NAM1"                                      , MemorySliceByteAction.Instance);
            Add(typeof(IConstructibleObjectGetter)   , "NAM2"                                      , MemorySliceByteAction.Instance);
            Add(typeof(IConstructibleObjectGetter)   , "NAM3"                                      , MemorySliceByteAction.Instance);
            Add(typeof(INpcGetter)                   , "NAM5"                                      , MemorySliceByteAction.Instance);
            Add(typeof(INpcGetter)                   , "NAM7"                                      , ConvertibleAction<float>.Instance);
            Add(null                                 , "Name"                                      , ConvertibleAction<string>.Instance);
            Add(null                                 , "NativeTerminal"                            , FormLinkAction<ITerminalGetter>.Instance);
            Add(null                                 , "NavmeshGeometry.CrcHash"                   , ConvertibleAction<uint>.Instance);
            Add(null                                 , "NavmeshGeometry.GridMax.X"                 , ConvertibleAction<float>.Instance);
            Add(null                                 , "NavmeshGeometry.GridMax.Y"                 , ConvertibleAction<float>.Instance);
            Add(null                                 , "NavmeshGeometry.GridMax.Z"                 , ConvertibleAction<float>.Instance);
            Add(null                                 , "NavmeshGeometry.GridMaxDistance.X"         , ConvertibleAction<float>.Instance);
            Add(null                                 , "NavmeshGeometry.GridMaxDistance.Y"         , ConvertibleAction<float>.Instance);
            Add(null                                 , "NavmeshGeometry.GridMin.X"                 , ConvertibleAction<float>.Instance);
            Add(null                                 , "NavmeshGeometry.GridMin.Y"                 , ConvertibleAction<float>.Instance);
            Add(null                                 , "NavmeshGeometry.GridMin.Z"                 , ConvertibleAction<float>.Instance);
            Add(null                                 , "NavmeshGeometry.GridSize"                  , ConvertibleAction<uint>.Instance);
            Add(null                                 , "NavmeshGeometry.NavmeshVersion"            , ConvertibleAction<uint>.Instance);
            Add(typeof(INavigationMeshInfoMapGetter) , "NavMeshVersion"                            , ConvertibleAction<uint>.Instance);
            Add(typeof(ILightGetter)                 , "NearClip"                                  , ConvertibleAction<float>.Instance);
            Add(typeof(ILightingTemplateGetter)      , "NearHeightMid"                             , ConvertibleAction<float>.Instance);
            Add(typeof(ILightingTemplateGetter)      , "NearHeightRange"                           , ConvertibleAction<float>.Instance);
            Add(typeof(ICameraShotGetter)            , "NearTargetDistance"                        , ConvertibleAction<float>.Instance);
            Add(typeof(IPerkGetter)                  , "NextPerk"                                  , FormLinkAction<IPerkGetter>.Instance);
            Add(typeof(IImpactGetter)                , "NoDecalData"                               , ConvertibleAction<bool>.Instance);
            Add(typeof(IAddonNodeGetter)             , "NodeIndex"                                 , ConvertibleAction<int>.Instance);
            Add(typeof(IWaterGetter)                 , "NoiseLayerOne.AmplitudeScale"              , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "NoiseLayerOne.NoiseFalloff"                , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "NoiseLayerOne.Texture"                     , ConvertibleAction<string>.Instance);
            Add(typeof(IWaterGetter)                 , "NoiseLayerOne.UvScale"                     , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "NoiseLayerOne.WindDirection"               , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "NoiseLayerOne.WindSpeed"                   , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "NoiseLayerThree.AmplitudeScale"            , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "NoiseLayerThree.NoiseFalloff"              , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "NoiseLayerThree.Texture"                   , ConvertibleAction<string>.Instance);
            Add(typeof(IWaterGetter)                 , "NoiseLayerThree.UvScale"                   , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "NoiseLayerThree.WindDirection"             , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "NoiseLayerThree.WindSpeed"                 , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "NoiseLayerTwo.AmplitudeScale"              , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "NoiseLayerTwo.NoiseFalloff"                , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "NoiseLayerTwo.Texture"                     , ConvertibleAction<string>.Instance);
            Add(typeof(IWaterGetter)                 , "NoiseLayerTwo.UvScale"                     , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "NoiseLayerTwo.WindDirection"               , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "NoiseLayerTwo.WindSpeed"                   , ConvertibleAction<float>.Instance);
            Add(typeof(IMaterialObjectGetter)        , "NoiseUvScale"                              , ConvertibleAction<float>.Instance);
            Add(typeof(IMaterialObjectGetter)        , "NormalDampener"                            , ConvertibleAction<float>.Instance);
            Add(typeof(ITextureSetGetter)            , "NormalOrGloss"                             , ConvertibleAction<string>.Instance);
            Add(typeof(INpcGetter)                   , "NoSlowApproach"                            , ConvertibleAction<bool>.Instance);
            Add(null                                 , "Notes"                                     , ConvertibleAction<string>.Instance);
            Add(typeof(IWeaponGetter)                , "NpcAddAmmoList"                            , FormLinkAction<ILeveledItemGetter>.Instance);
            Add(typeof(IRaceGetter)                  , "NumberOfTintsInList"                       , ConvertibleAction<ushort>.Instance);
            Add(typeof(IPerkGetter)                  , "NumRanks"                                  , ConvertibleAction<byte>.Instance);
            Add(typeof(IShaderParticleGeometryGetter), "NumSubtexturesX"                           , ConvertibleAction<float>.Instance);
            Add(typeof(IShaderParticleGeometryGetter), "NumSubtexturesY"                           , ConvertibleAction<float>.Instance);
            Add(typeof(INavigationMeshInfoMapGetter) , "NVSI"                                      , MemorySliceByteAction.Instance);
            Add(null                                 , "ObjectBounds.First.X"                      , ConvertibleAction<short>.Instance);
            Add(null                                 , "ObjectBounds.First.Y"                      , ConvertibleAction<short>.Instance);
            Add(null                                 , "ObjectBounds.First.Z"                      , ConvertibleAction<short>.Instance);
            Add(null                                 , "ObjectBounds.Second.X"                     , ConvertibleAction<short>.Instance);
            Add(null                                 , "ObjectBounds.Second.Y"                     , ConvertibleAction<short>.Instance);
            Add(null                                 , "ObjectBounds.Second.Z"                     , ConvertibleAction<short>.Instance);
            Add(typeof(IWorldspaceGetter)            , "ObjectBoundsMax.X"                         , ConvertibleAction<float>.Instance);
            Add(typeof(IWorldspaceGetter)            , "ObjectBoundsMax.Y"                         , ConvertibleAction<float>.Instance);
            Add(typeof(IWorldspaceGetter)            , "ObjectBoundsMin.X"                         , ConvertibleAction<float>.Instance);
            Add(typeof(IWorldspaceGetter)            , "ObjectBoundsMin.Y"                         , ConvertibleAction<float>.Instance);
            Add(null                                 , "ObjectEffect"                              , FormLinkAction<IEffectRecordGetter>.Instance);
            Add(typeof(IRegionGetter)                , "Objects.Flags"                             , FlagsAction.Instance);
            Add(typeof(IRegionGetter)                , "Objects.LodDisplayDistanceMultiplier"      , ConvertibleAction<float>.Instance);
            Add(typeof(IRegionGetter)                , "Objects.OcclusionAccuracyDist"             , ConvertibleAction<float>.Instance);
            Add(typeof(IRegionGetter)                , "Objects.Priority"                          , ConvertibleAction<byte>.Instance);
            Add(typeof(INpcGetter)                   , "ObserveDeadBodyOverridePackageList"        , FormLinkAction<IFormListGetter>.Instance);
            Add(typeof(ICombatStyleGetter)           , "OffensiveMult"                             , ConvertibleAction<float>.Instance);
            Add(typeof(IWorldspaceGetter)            , "OffsetData"                                , MemorySliceByteAction.Instance);
            Add(typeof(IWeatherGetter)               , "ONAM"                                      , MemorySliceByteAction.Instance);
            Add(typeof(IPackageGetter)               , "OnBegin.Idle"                              , FormLinkAction<IIdleAnimationGetter>.Instance);
            Add(typeof(IPackageGetter)               , "OnChange.Idle"                             , FormLinkAction<IIdleAnimationGetter>.Instance);
            Add(typeof(IRaceGetter)                  , "OnCrippleDebris"                           , FormLinkAction<IDebrisGetter>.Instance);
            Add(typeof(IRaceGetter)                  , "OnCrippleDebrisCount"                      , ConvertibleAction<byte>.Instance);
            Add(typeof(IRaceGetter)                  , "OnCrippleDebrisScale"                      , ConvertibleAction<float>.Instance);
            Add(typeof(IRaceGetter)                  , "OnCrippleDecalCount"                       , ConvertibleAction<byte>.Instance);
            Add(typeof(IRaceGetter)                  , "OnCrippleExplosion"                        , FormLinkAction<IExplosionGetter>.Instance);
            Add(typeof(IRaceGetter)                  , "OnCrippleImpactDataSet"                    , FormLinkAction<IImpactDataSetGetter>.Instance);
            Add(typeof(IPackageGetter)               , "OnEnd.Idle"                                , FormLinkAction<IIdleAnimationGetter>.Instance);
            Add(typeof(IWeaponGetter)                , "OnHit"                                     , EnumsAction.Instance);
            Add(typeof(IMovableStaticGetter)         , "OnLocalMap"                                , ConvertibleAction<bool>.Instance);
            Add(typeof(IWaterGetter)                 , "Opacity"                                   , ConvertibleAction<byte>.Instance);
            Add(null                                 , "OpenSound"                                 , FormLinkAction<ISoundDescriptorGetter>.Instance);
            Add(typeof(IImpactGetter)                , "Orientation"                               , EnumsAction.Instance);
            Add(typeof(IRaceGetter)                  , "OrientationLimitsPitch"                    , ConvertibleAction<float>.Instance);
            Add(typeof(IRaceGetter)                  , "OrientationLimitsRoll"                     , ConvertibleAction<float>.Instance);
            Add(typeof(IExplosionGetter)             , "OuterRadius"                               , ConvertibleAction<float>.Instance);
            Add(typeof(ISoundDescriptorGetter)       , "OutputModel"                               , FormLinkAction<ISoundOutputModelGetter>.Instance);
            Add(typeof(IZoomGetter)                  , "Overlay"                                   , EnumsAction.Instance);
            Add(typeof(ILeveledItemGetter)           , "OverrideName"                              , ConvertibleAction<string>.Instance);
            Add(typeof(IEncounterZoneGetter)         , "Owner"                                     , FormLinkAction<IOwnerGetter>.Instance);
            Add(typeof(IMessageGetter)               , "OwnerQuest"                                , FormLinkAction<IQuestGetter>.Instance);
            Add(typeof(IPackageGetter)               , "OwnerQuest"                                , FormLinkAction<IQuestGetter>.Instance);
            Add(typeof(ICellGetter)                  , "Ownership.NoCrime"                         , ConvertibleAction<bool>.Instance);
            Add(typeof(ICellGetter)                  , "Ownership.Owner"                           , FormLinkAction<IOwnerGetter>.Instance);
            Add(typeof(INpcGetter)                   , "Packages"                                  , FormLinksAction<IPackageGetter>.Instance);
            Add(typeof(IPackageGetter)               , "PackageTemplate"                           , FormLinkAction<IPackageGetter>.Instance);
            Add(typeof(IMaterialTypeGetter)          , "Parent"                                    , FormLinkAction<IMaterialTypeGetter>.Instance);
            Add(typeof(IRelationshipGetter)          , "Parent"                                    , FormLinkAction<INpcGetter>.Instance);
            Add(typeof(ISoundCategoryGetter)         , "Parent"                                    , FormLinkAction<ISoundCategoryGetter>.Instance);
            Add(typeof(IWorldspaceGetter)            , "Parent.Flags"                              , FlagsAction.Instance);
            Add(typeof(IWorldspaceGetter)            , "Parent.Worldspace"                         , FormLinkAction<IWorldspaceGetter>.Instance);
            Add(typeof(ILocationGetter)              , "ParentLocation"                            , FormLinkAction<ILocationGetter>.Instance);
            Add(typeof(IAssociationTypeGetter)       , "ParentTitle.Female"                        , ConvertibleAction<string>.Instance);
            Add(typeof(IAssociationTypeGetter)       , "ParentTitle.Male"                          , ConvertibleAction<string>.Instance);
            Add(typeof(IShaderParticleGeometryGetter), "ParticleDensity"                           , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "ParticlePaletteTexture"                    , ConvertibleAction<string>.Instance);
            Add(typeof(IEffectShaderGetter)          , "ParticleShaderTexture"                     , ConvertibleAction<string>.Instance);
            Add(typeof(IShaderParticleGeometryGetter), "ParticleSizeX"                             , ConvertibleAction<float>.Instance);
            Add(typeof(IShaderParticleGeometryGetter), "ParticleSizeY"                             , ConvertibleAction<float>.Instance);
            Add(typeof(IShaderParticleGeometryGetter), "ParticleTexture"                           , ConvertibleAction<string>.Instance);
            Add(typeof(ICombatStyleGetter)           , "PerchAttackChance"                         , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)           , "PerchAttackTime"                           , ConvertibleAction<float>.Instance);
            Add(typeof(IMagicEffectGetter)           , "PerkToApply"                               , FormLinkAction<IPerkGetter>.Instance);
            Add(typeof(IClimateGetter)               , "PhaseLength"                               , ConvertibleAction<byte>.Instance);
            Add(typeof(IWaterGetter)                 , "PhysicalDeepNormalFalloff"                 , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "PhysicalDisplacementSimulatorDampener"     , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "PhysicalDisplacementSimulatorFalloff"      , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "PhysicalDisplacementSimulatorForce"        , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "PhysicalDisplacementSimulatorStartingSize" , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "PhysicalDisplacementSimulatorVelocity"     , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "PhysicalFresnelAmount"                     , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "PhysicalNormalMagnitude"                   , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "PhysicalReflectionColor"                   , BasicAction<Color>.Instance);
            Add(typeof(IWaterGetter)                 , "PhysicalReflectivityAmount"                , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "PhysicalShallowNormalFalloff"              , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "PhysicalSurfaceEffectFalloff"              , ConvertibleAction<float>.Instance);
            Add(typeof(ICellGetter)                  , "PhysicsReferences"                         , FormLinksAction<IPlacedThingGetter>.Instance);
            Add(null                                 , "PickUpSound"                               , FormLinkAction<ISoundDescriptorGetter>.Instance);
            Add(typeof(IRaceGetter)                  , "PipboyBipedObject"                         , EnumsAction.Instance);
            Add(typeof(IMovementTypeGetter)          , "PitchRun"                                  , ConvertibleAction<float>.Instance);
            Add(typeof(IMovementTypeGetter)          , "PitchSprint"                               , ConvertibleAction<float>.Instance);
            Add(typeof(IMovementTypeGetter)          , "PitchStanding"                             , ConvertibleAction<float>.Instance);
            Add(typeof(IMovementTypeGetter)          , "PitchWalk"                                 , ConvertibleAction<float>.Instance);
            Add(typeof(IExplosionGetter)             , "PlacedObject"                              , FormLinkAction<IExplodeSpawnGetter>.Instance);
            Add(typeof(IExplosionGetter)             , "PlacedObjectAutoFadeDelay"                 , ConvertibleAction<float>.Instance);
            Add(typeof(IImpactGetter)                , "PlacementRadius"                           , ConvertibleAction<float>.Instance);
            Add(typeof(IPerkGetter)                  , "Playable"                                  , ConvertibleAction<bool>.Instance);
            Add(typeof(IFactionGetter)               , "PlayerInventoryContainer"                  , FormLinkAction<IPlacedObjectGetter>.Instance);
            Add(typeof(ITalkingActivatorGetter)      , "PNAM"                                      , ConvertibleAction<int>.Instance);
            Add(null                                 , "PNAM"                                      , MemorySliceByteAction.Instance);
            Add(typeof(IGrassGetter)                 , "PositionRange"                             , ConvertibleAction<float>.Instance);
            Add(typeof(INpcGetter)                   , "PowerArmorStand"                           , FormLinkAction<IFurnitureGetter>.Instance);
            Add(typeof(IWeatherGetter)               , "Precipitation"                             , FormLinkAction<IShaderParticleGeometryGetter>.Instance);
            Add(typeof(IWeatherGetter)               , "PrecipitationBeginFadeIn"                  , BasicAction<Percent>.Instance);
            Add(typeof(IWeatherGetter)               , "PrecipitationEndFadeOut"                   , BasicAction<Percent>.Instance);
            Add(typeof(ICellGetter)                  , "PreCombinedFilesTimestamp"                 , ConvertibleAction<ushort>.Instance);
            Add(typeof(ICellGetter)                  , "PrecombinedObjectLevelXY"                  , ConvertibleAction<byte>.Instance);
            Add(typeof(ICellGetter)                  , "PrecombinedObjectLevelZ"                   , ConvertibleAction<byte>.Instance);
            Add(typeof(IPackageGetter)               , "PreferredSpeed"                            , EnumsAction.Instance);
            Add(null                                 , "PreviewTransform"                          , FormLinkAction<ITransformGetter>.Instance);
            Add(typeof(ICellGetter)                  , "PreVisFilesTimestamp"                      , ConvertibleAction<ushort>.Instance);
            Add(typeof(ISoundKeywordMappingGetter)   , "PrimaryDescriptor"                         , FormLinkAction<ISoundDescriptorGetter>.Instance);
            Add(typeof(IAObjectModificationGetter)   , "Priority"                                  , ConvertibleAction<byte>.Instance);
            Add(typeof(IArmorAddonGetter)            , "Priority.Female"                           , ConvertibleAction<byte>.Instance);
            Add(typeof(IArmorAddonGetter)            , "Priority.Male"                             , ConvertibleAction<byte>.Instance);
            Add(typeof(IFloraGetter)                 , "Production.Fall"                           , ConvertibleAction<byte>.Instance);
            Add(typeof(ITreeGetter)                  , "Production.Fall"                           , ConvertibleAction<byte>.Instance);
            Add(typeof(IFloraGetter)                 , "Production.Spring"                         , ConvertibleAction<byte>.Instance);
            Add(typeof(ITreeGetter)                  , "Production.Spring"                         , ConvertibleAction<byte>.Instance);
            Add(typeof(IFloraGetter)                 , "Production.Summer"                         , ConvertibleAction<byte>.Instance);
            Add(typeof(ITreeGetter)                  , "Production.Summer"                         , ConvertibleAction<byte>.Instance);
            Add(typeof(IFloraGetter)                 , "Production.Winter"                         , ConvertibleAction<byte>.Instance);
            Add(typeof(ITreeGetter)                  , "Production.Winter"                         , ConvertibleAction<byte>.Instance);
            Add(typeof(IAmmunitionGetter)            , "Projectile"                                , FormLinkAction<IProjectileGetter>.Instance);
            Add(typeof(IMagicEffectGetter)           , "Projectile"                                , FormLinkAction<IProjectileGetter>.Instance);
            Add(typeof(IMaterialObjectGetter)        , "ProjectionVector.X"                        , ConvertibleAction<float>.Instance);
            Add(typeof(IMaterialObjectGetter)        , "ProjectionVector.Y"                        , ConvertibleAction<float>.Instance);
            Add(typeof(IMaterialObjectGetter)        , "ProjectionVector.Z"                        , ConvertibleAction<float>.Instance);
            Add(null                                 , "PutDownSound"                              , FormLinkAction<ISoundDescriptorGetter>.Instance);
            Add(typeof(IDialogViewGetter)            , "Quest"                                     , FormLinkAction<IQuestGetter>.Instance);
            Add(typeof(IQuestGetter)                 , "QuestCompletionXp"                         , FormLinkAction<IGlobalGetter>.Instance);
            Add(typeof(IQuestGetter)                 , "QuestGroup"                                , FormLinkAction<IKeywordGetter>.Instance);
            Add(null                                 , "Race"                                      , FormLinkAction<IRaceGetter>.Instance);
            Add(typeof(IImageSpaceAdapterGetter)     , "RadialBlurCenter.X"                        , ConvertibleAction<float>.Instance);
            Add(typeof(IImageSpaceAdapterGetter)     , "RadialBlurCenter.Y"                        , ConvertibleAction<float>.Instance);
            Add(typeof(IImageSpaceAdapterGetter)     , "RadialBlurUseTarget"                       , ConvertibleAction<bool>.Instance);
            Add(typeof(IActivatorGetter)             , "RadioReceiver.Frequency"                   , ConvertibleAction<float>.Instance);
            Add(typeof(IActivatorGetter)             , "RadioReceiver.NoSignalStatic"              , ConvertibleAction<bool>.Instance);
            Add(typeof(IActivatorGetter)             , "RadioReceiver.SoundModel"                  , FormLinkAction<ISoundOutputModelGetter>.Instance);
            Add(typeof(IActivatorGetter)             , "RadioReceiver.StartsActive"                , ConvertibleAction<bool>.Instance);
            Add(typeof(IActivatorGetter)             , "RadioReceiver.Volume"                      , ConvertibleAction<float>.Instance);
            Add(typeof(IHazardGetter)                , "Radius"                                    , ConvertibleAction<float>.Instance);
            Add(typeof(ILightGetter)                 , "Radius"                                    , ConvertibleAction<uint>.Instance);
            Add(typeof(IProjectileGetter)            , "Range"                                     , ConvertibleAction<float>.Instance);
            Add(typeof(ISpellGetter)                 , "Range"                                     , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)           , "RangedAccuracyMult"                        , ConvertibleAction<float>.Instance);
            Add(typeof(IEncounterZoneGetter)         , "Rank"                                      , ConvertibleAction<byte>.Instance);
            Add(typeof(IRelationshipGetter)          , "Rank"                                      , EnumsAction.Instance);
            Add(typeof(IWeaponGetter)                , "Reach"                                     , ConvertibleAction<float>.Instance);
            Add(typeof(ILocationGetter)              , "ReferenceCellPersistentReferences"         , FormLinksAction<IPlacedSimpleGetter>.Instance);
            Add(typeof(ILocationGetter)              , "ReferenceCellStaticReferences"             , FormLinksAction<IPlacedSimpleGetter>.Instance);
            Add(typeof(ILocationGetter)              , "ReferenceCellUnique"                       , FormLinksAction<INpcGetter>.Instance);
            Add(typeof(IReverbParametersGetter)      , "ReflectDelayMS"                            , ConvertibleAction<byte>.Instance);
            Add(typeof(IReverbParametersGetter)      , "Reflections"                               , ConvertibleAction<sbyte>.Instance);
            Add(typeof(ICellGetter)                  , "Regions"                                   , FormLinksAction<IRegionGetter>.Instance);
            Add(typeof(IIdleAnimationGetter)         , "RelatedIdles"                              , FormLinksAction<IIdleRelationGetter>.Instance);
            Add(typeof(ICameraPathGetter)            , "RelatedPaths"                              , FormLinksAction<ICameraPathGetter>.Instance);
            Add(typeof(IProjectileGetter)            , "RelaunchInterval"                          , ConvertibleAction<float>.Instance);
            Add(typeof(IWeaponGetter)                , "ReloadSpeed"                               , ConvertibleAction<float>.Instance);
            Add(typeof(ISoundMarkerGetter)           , "Repeat.MaxTime"                            , ConvertibleAction<float>.Instance);
            Add(typeof(ISoundMarkerGetter)           , "Repeat.MinTime"                            , ConvertibleAction<float>.Instance);
            Add(typeof(ISoundMarkerGetter)           , "Repeat.Stackable"                          , ConvertibleAction<bool>.Instance);
            Add(typeof(IIdleAnimationGetter)         , "ReplayDelay"                               , ConvertibleAction<ushort>.Instance);
            Add(typeof(IWeaponGetter)                , "Resist"                                    , FormLinkAction<IActorValueInformationGetter>.Instance);
            Add(typeof(IMagicEffectGetter)           , "ResistValue"                               , FormLinkAction<IActorValueInformationGetter>.Instance);
            Add(typeof(INpcGetter)                   , "Responsibility"                            , EnumsAction.Instance);
            Add(typeof(IImpactGetter)                , "Result"                                    , EnumsAction.Instance);
            Add(typeof(IReverbParametersGetter)      , "ReverbAmp"                                 , ConvertibleAction<sbyte>.Instance);
            Add(typeof(IReverbParametersGetter)      , "ReverbClass"                               , EnumsAction.Instance);
            Add(typeof(IReverbParametersGetter)      , "ReverbDelayMS"                             , ConvertibleAction<byte>.Instance);
            Add(typeof(IMovementTypeGetter)          , "RightRun"                                  , ConvertibleAction<float>.Instance);
            Add(typeof(IMovementTypeGetter)          , "RightSprint"                               , ConvertibleAction<float>.Instance);
            Add(typeof(IMovementTypeGetter)          , "RightStanding"                             , ConvertibleAction<float>.Instance);
            Add(typeof(IMovementTypeGetter)          , "RightWalk"                                 , ConvertibleAction<float>.Instance);
            Add(typeof(IMovementTypeGetter)          , "RollRun"                                   , ConvertibleAction<float>.Instance);
            Add(typeof(IMovementTypeGetter)          , "RollSprint"                                , ConvertibleAction<float>.Instance);
            Add(typeof(IMovementTypeGetter)          , "RollStanding"                              , ConvertibleAction<float>.Instance);
            Add(typeof(IMovementTypeGetter)          , "RollWalk"                                  , ConvertibleAction<float>.Instance);
            Add(typeof(IReverbParametersGetter)      , "RoomFilter"                                , ConvertibleAction<sbyte>.Instance);
            Add(typeof(IReverbParametersGetter)      , "RoomHfFilter"                              , ConvertibleAction<sbyte>.Instance);
            Add(typeof(ILoadScreenGetter)            , "Rotation.Max"                              , ConvertibleAction<short>.Instance);
            Add(typeof(ILoadScreenGetter)            , "Rotation.Min"                              , ConvertibleAction<short>.Instance);
            Add(typeof(ICameraShotGetter)            , "RotationOffset.X"                          , ConvertibleAction<float>.Instance);
            Add(typeof(ICameraShotGetter)            , "RotationOffset.Y"                          , ConvertibleAction<float>.Instance);
            Add(typeof(ICameraShotGetter)            , "RotationOffset.Z"                          , ConvertibleAction<float>.Instance);
            Add(typeof(IShaderParticleGeometryGetter), "RotationVelocity"                          , ConvertibleAction<float>.Instance);
            Add(typeof(IFootstepSetGetter)           , "RunFootsteps"                              , FormLinksAction<IFootstepGetter>.Instance);
            Add(typeof(ILightGetter)                 , "Scalar"                                    , ConvertibleAction<float>.Instance);
            Add(typeof(IPackageGetter)               , "ScheduleDate"                              , ConvertibleAction<byte>.Instance);
            Add(typeof(IPackageGetter)               , "ScheduleDayOfWeek"                         , EnumsAction.Instance);
            Add(typeof(IPackageGetter)               , "ScheduleDurationInMinutes"                 , ConvertibleAction<int>.Instance);
            Add(typeof(IPackageGetter)               , "ScheduleHour"                              , ConvertibleAction<sbyte>.Instance);
            Add(typeof(IPackageGetter)               , "ScheduleMinute"                            , ConvertibleAction<sbyte>.Instance);
            Add(typeof(IPackageGetter)               , "ScheduleMonth"                             , ConvertibleAction<sbyte>.Instance);
            Add(typeof(IComponentGetter)             , "ScrapItem"                                 , FormLinkAction<IMiscItemGetter>.Instance);
            Add(typeof(IWaterGetter)                 , "ScreenSpaceReflections"                    , ConvertibleAction<bool>.Instance);
            Add(typeof(IMagicEffectGetter)           , "ScriptEffectAIDelayTime"                   , ConvertibleAction<float>.Instance);
            Add(typeof(IMagicEffectGetter)           , "ScriptEffectAIScore"                       , ConvertibleAction<float>.Instance);
            Add(typeof(IMagicEffectGetter)           , "SecondActorValue"                          , FormLinkAction<IActorValueInformationGetter>.Instance);
            Add(typeof(IMagicEffectGetter)           , "SecondActorValueWeight"                    , ConvertibleAction<float>.Instance);
            Add(typeof(IWeaponGetter)                , "SecondaryDamage"                           , ConvertibleAction<float>.Instance);
            Add(typeof(IImpactGetter)                , "SecondaryTextureSet"                       , FormLinkAction<ITextureSetGetter>.Instance);
            Add(typeof(IRaceGetter)                  , "SeverableDebris"                           , FormLinkAction<IDebrisGetter>.Instance);
            Add(typeof(IRaceGetter)                  , "SeverableDebrisCount"                      , ConvertibleAction<byte>.Instance);
            Add(typeof(IRaceGetter)                  , "SeverableDebrisScale"                      , ConvertibleAction<float>.Instance);
            Add(typeof(IRaceGetter)                  , "SeverableDecalCount"                       , ConvertibleAction<byte>.Instance);
            Add(typeof(IRaceGetter)                  , "SeverableExplosion"                        , FormLinkAction<IExplosionGetter>.Instance);
            Add(typeof(IRaceGetter)                  , "SeverableImpactDataSet"                    , FormLinkAction<IImpactDataSetGetter>.Instance);
            Add(typeof(IVisualEffectGetter)          , "Shader"                                    , FormLinkAction<IEffectShaderGetter>.Instance);
            Add(typeof(IFactionGetter)               , "SharedCrimeFactionList"                    , FormLinkAction<IFormListGetter>.Instance);
            Add(typeof(IRaceGetter)                  , "ShieldBipedObject"                         , EnumsAction.Instance);
            Add(typeof(IAmmunitionGetter)            , "ShortName"                                 , ConvertibleAction<string>.Instance);
            Add(typeof(INpcGetter)                   , "ShortName"                                 , ConvertibleAction<string>.Instance);
            Add(typeof(IMessageGetter)               , "ShortTitle"                                , ConvertibleAction<string>.Instance);
            Add(typeof(ICameraPathGetter)            , "Shots"                                     , FormLinksAction<ICameraShotGetter>.Instance);
            Add(typeof(ITreeGetter)                  , "SideAmplitude"                             , ConvertibleAction<float>.Instance);
            Add(typeof(ISoundCategoryGetter)         , "SidechainTargetMultiplier"                 , ConvertibleAction<float>.Instance);
            Add(typeof(ITreeGetter)                  , "SideFrequency"                             , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "SiltAmount"                                , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "SiltDarkColor"                             , BasicAction<Color>.Instance);
            Add(typeof(IWaterGetter)                 , "SiltLightColor"                            , BasicAction<Color>.Instance);
            Add(typeof(IMaterialObjectGetter)        , "SinglePassColor"                           , BasicAction<Color>.Instance);
            Add(typeof(IRaceGetter)                  , "Size"                                      , EnumsAction.Instance);
            Add(typeof(IWeaponGetter)                , "Skill"                                     , FormLinkAction<IActorValueInformationGetter>.Instance);
            Add(typeof(IMagicEffectGetter)           , "SkillUsageMultiplier"                      , ConvertibleAction<float>.Instance);
            Add(typeof(INpcGetter)                   , "Skin"                                      , FormLinkAction<IArmorGetter>.Instance);
            Add(typeof(IRaceGetter)                  , "Skin"                                      , FormLinkAction<IArmorGetter>.Instance);
            Add(typeof(IArmorAddonGetter)            , "SkinTexture.Female"                        , FormLinkAction<ITextureSetGetter>.Instance);
            Add(typeof(IArmorAddonGetter)            , "SkinTexture.Male"                          , FormLinkAction<ITextureSetGetter>.Instance);
            Add(typeof(ICellGetter)                  , "SkyAndWeatherFromRegion"                   , FormLinkAction<IRegionGetter>.Instance);
            Add(typeof(IWeatherGetter)               , "SkyLowerColor.Day"                         , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "SkyLowerColor.EarlySunrise"                , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "SkyLowerColor.EarlySunset"                 , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "SkyLowerColor.LateSunrise"                 , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "SkyLowerColor.LateSunset"                  , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "SkyLowerColor.Night"                       , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "SkyLowerColor.Sunrise"                     , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "SkyLowerColor.Sunset"                      , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "SkyStatics"                                , FormLinksAction<IStaticGetter>.Instance);
            Add(typeof(IWeatherGetter)               , "SkyStaticsColor.Day"                       , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "SkyStaticsColor.EarlySunrise"              , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "SkyStaticsColor.EarlySunset"               , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "SkyStaticsColor.LateSunrise"               , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "SkyStaticsColor.LateSunset"                , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "SkyStaticsColor.Night"                     , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "SkyStaticsColor.Sunrise"                   , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "SkyStaticsColor.Sunset"                    , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "SkyUpperColor.Day"                         , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "SkyUpperColor.EarlySunrise"                , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "SkyUpperColor.EarlySunset"                 , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "SkyUpperColor.LateSunrise"                 , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "SkyUpperColor.LateSunset"                  , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "SkyUpperColor.Night"                       , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "SkyUpperColor.Sunrise"                     , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "SkyUpperColor.Sunset"                      , BasicAction<Color>.Instance);
            Add(typeof(INpcGetter)                   , "SleepingOutfit"                            , FormLinkAction<IOutfitGetter>.Instance);
            Add(typeof(IEquipTypeGetter)             , "SlotParents"                               , FormLinksAction<IEquipTypeGetter>.Instance);
            Add(typeof(ITextureSetGetter)            , "SmoothSpec"                                , ConvertibleAction<string>.Instance);
            Add(typeof(IFootstepSetGetter)           , "SneakFootsteps"                            , FormLinksAction<IFootstepGetter>.Instance);
            Add(null                                 , "Sound"                                     , FormLinkAction<ISoundDescriptorGetter>.Instance);
            Add(typeof(IExplosionGetter)             , "Sound1"                                    , FormLinkAction<ISoundDescriptorGetter>.Instance);
            Add(typeof(IImpactGetter)                , "Sound1"                                    , FormLinkAction<ISoundGetter>.Instance);
            Add(typeof(IExplosionGetter)             , "Sound2"                                    , FormLinkAction<ISoundDescriptorGetter>.Instance);
            Add(typeof(IImpactGetter)                , "Sound2"                                    , FormLinkAction<ISoundGetter>.Instance);
            Add(typeof(IRaceGetter)                  , "SoundCloseCorpse"                          , FormLinkAction<ISoundDescriptorGetter>.Instance);
            Add(typeof(ISoundMarkerGetter)           , "SoundDescriptor"                           , FormLinkAction<ISoundDescriptorGetter>.Instance);
            Add(typeof(IProjectileGetter)            , "SoundLevel"                                , ConvertibleAction<uint>.Instance);
            Add(null                                 , "SoundLevel"                                , EnumsAction.Instance);
            Add(typeof(IRaceGetter)                  , "SoundOpenCorpse"                           , FormLinkAction<ISoundDescriptorGetter>.Instance);
            Add(typeof(IRegionGetter)                , "Sounds.Flags"                              , FlagsAction.Instance);
            Add(typeof(IRegionGetter)                , "Sounds.LodDisplayDistanceMultiplier"       , ConvertibleAction<float>.Instance);
            Add(typeof(IRegionGetter)                , "Sounds.Music"                              , FormLinkAction<IMusicTypeGetter>.Instance);
            Add(typeof(IRegionGetter)                , "Sounds.OcclusionAccuracyDist"              , ConvertibleAction<float>.Instance);
            Add(typeof(IRegionGetter)                , "Sounds.Priority"                           , ConvertibleAction<byte>.Instance);
            Add(typeof(INpcGetter)                   , "SoundsFinalize"                            , MemorySliceByteAction.Instance);
            Add(typeof(IExplosionGetter)             , "SpawnCount"                                , ConvertibleAction<uint>.Instance);
            Add(typeof(IExplosionGetter)             , "SpawnPosition.X"                           , ConvertibleAction<float>.Instance);
            Add(typeof(IExplosionGetter)             , "SpawnPosition.Y"                           , ConvertibleAction<float>.Instance);
            Add(typeof(IExplosionGetter)             , "SpawnPosition.Z"                           , ConvertibleAction<float>.Instance);
            Add(typeof(IExplosionGetter)             , "SpawnProjectile"                           , FormLinkAction<IProjectileGetter>.Instance);
            Add(typeof(IExplosionGetter)             , "SpawnSpreadDegrees"                        , ConvertibleAction<float>.Instance);
            Add(typeof(INpcGetter)                   , "SpectatorOverridePackageList"              , FormLinkAction<IFormListGetter>.Instance);
            Add(typeof(IWaterGetter)                 , "SpecularInteriorSpecularBrightness"        , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "SpecularInteriorSpecularPower"             , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "SpecularInteriorSpecularRadius"            , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "SpecularSunSparkleMagnitude"               , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "SpecularSunSparklePower"                   , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "SpecularSunSpecularMagnitude"              , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "SpecularSunSpecularPower"                  , ConvertibleAction<float>.Instance);
            Add(typeof(IMovementTypeGetter)          , "SPEDDataTypeState"                         , FlagsAction.Instance);
            Add(typeof(IProjectileGetter)            , "Speed"                                     , ConvertibleAction<float>.Instance);
            Add(typeof(IWeaponGetter)                , "Speed"                                     , ConvertibleAction<float>.Instance);
            Add(typeof(IMagicEffectGetter)           , "SpellmakingArea"                           , ConvertibleAction<uint>.Instance);
            Add(typeof(IMagicEffectGetter)           , "SpellmakingCastingTime"                    , ConvertibleAction<float>.Instance);
            Add(typeof(IFootstepSetGetter)           , "SprintFootsteps"                           , FormLinksAction<IFootstepGetter>.Instance);
            Add(typeof(IExplosionGetter)             , "Stagger"                                   , EnumsAction.Instance);
            Add(typeof(IWeaponGetter)                , "Stagger"                                   , EnumsAction.Instance);
            Add(typeof(IArmorGetter)                 , "StaggerRating"                             , ConvertibleAction<byte>.Instance);
            Add(typeof(IWeatherGetter)               , "StarsColor.Day"                            , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "StarsColor.EarlySunrise"                   , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "StarsColor.EarlySunset"                    , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "StarsColor.LateSunrise"                    , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "StarsColor.LateSunset"                     , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "StarsColor.Night"                          , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "StarsColor.Sunrise"                        , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "StarsColor.Sunset"                         , BasicAction<Color>.Instance);
            Add(typeof(ISoundOutputModelGetter)      , "StaticAttenuation"                         , ConvertibleAction<float>.Instance);
            Add(typeof(ISoundCategoryGetter)         , "StaticVolumeMultiplier"                    , ConvertibleAction<float>.Instance);
            Add(typeof(IFactionGetter)               , "StolenGoodsContainer"                      , FormLinkAction<IPlacedObjectGetter>.Instance);
            Add(typeof(IRaceGetter)                  , "SubgraphAdditiveRace"                      , FormLinkAction<IRaceGetter>.Instance);
            Add(typeof(IRaceGetter)                  , "SubgraphTemplateRace"                      , FormLinkAction<IRaceGetter>.Instance);
            Add(typeof(IWeatherGetter)               , "SunColor.Day"                              , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "SunColor.EarlySunrise"                     , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "SunColor.EarlySunset"                      , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "SunColor.LateSunrise"                      , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "SunColor.LateSunset"                       , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "SunColor.Night"                            , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "SunColor.Sunrise"                          , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "SunColor.Sunset"                           , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "SunDamage"                                 , BasicAction<Percent>.Instance);
            Add(typeof(IWeatherGetter)               , "SunGlare"                                  , BasicAction<Percent>.Instance);
            Add(typeof(IWeatherGetter)               , "SunGlareColor.Day"                         , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "SunGlareColor.EarlySunrise"                , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "SunGlareColor.EarlySunset"                 , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "SunGlareColor.LateSunrise"                 , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "SunGlareColor.LateSunset"                  , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "SunGlareColor.Night"                       , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "SunGlareColor.Sunrise"                     , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "SunGlareColor.Sunset"                      , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "SunGlareLensFlare"                         , FormLinkAction<ILensFlareGetter>.Instance);
            Add(typeof(IClimateGetter)               , "SunGlareTexture"                           , ConvertibleAction<string>.Instance);
            Add(typeof(IWeatherGetter)               , "SunlightColor.Day"                         , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "SunlightColor.EarlySunrise"                , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "SunlightColor.EarlySunset"                 , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "SunlightColor.LateSunrise"                 , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "SunlightColor.LateSunset"                  , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "SunlightColor.Night"                       , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "SunlightColor.Sunrise"                     , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "SunlightColor.Sunset"                      , BasicAction<Color>.Instance);
            Add(typeof(IClimateGetter)               , "SunTexture"                                , ConvertibleAction<string>.Instance);
            Add(typeof(IMessageGetter)               , "Swf"                                       , ConvertibleAction<string>.Instance);
            Add(typeof(IPerkGetter)                  , "Swf"                                       , ConvertibleAction<string>.Instance);
            Add(typeof(IQuestGetter)                 , "SwfFile"                                   , ConvertibleAction<string>.Instance);
            Add(typeof(IFootstepSetGetter)           , "SwimFootsteps"                             , FormLinksAction<IFootstepGetter>.Instance);
            Add(typeof(IFootstepGetter)              , "Tag"                                       , ConvertibleAction<string>.Instance);
            Add(typeof(IContainerGetter)             , "TakeAllSound"                              , FormLinkAction<ISoundDescriptorGetter>.Instance);
            Add(typeof(IHazardGetter)                , "TaperCurse"                                , ConvertibleAction<float>.Instance);
            Add(typeof(IMagicEffectGetter)           , "TaperCurve"                                , ConvertibleAction<float>.Instance);
            Add(typeof(IMagicEffectGetter)           , "TaperDuration"                             , ConvertibleAction<float>.Instance);
            Add(typeof(IHazardGetter)                , "TaperFullEffectRadius"                     , ConvertibleAction<float>.Instance);
            Add(typeof(IHazardGetter)                , "TaperWeight"                               , ConvertibleAction<float>.Instance);
            Add(typeof(IMagicEffectGetter)           , "TaperWeight"                               , ConvertibleAction<float>.Instance);
            Add(typeof(ICameraShotGetter)            , "Target"                                    , EnumsAction.Instance);
            Add(typeof(IInstanceNamingRulesGetter)   , "Target"                                    , FlagsAction.Instance);
            Add(typeof(IHazardGetter)                , "TargetInterval"                            , ConvertibleAction<float>.Instance);
            Add(typeof(IAObjectModificationGetter)   , "TargetOmodKeywords"                        , FormLinksAction<IKeywordGetter>.Instance);
            Add(typeof(ICameraShotGetter)            , "TargetPercentBetweenActors"                , ConvertibleAction<float>.Instance);
            Add(typeof(ICameraShotGetter)            , "TargetSpring"                              , ConvertibleAction<float>.Instance);
            Add(null                                 , "TargetType"                                , EnumsAction.Instance);
            Add(typeof(IWeaponGetter)                , "Template"                                  , FormLinkAction<IWeaponGetter>.Instance);
            Add(typeof(INpcGetter)                   , "TemplateActors.AiDataTemplate"             , FormLinkAction<INpcSpawnGetter>.Instance);
            Add(typeof(INpcGetter)                   , "TemplateActors.AiPackagesTemplate"         , FormLinkAction<INpcSpawnGetter>.Instance);
            Add(typeof(INpcGetter)                   , "TemplateActors.AttackDataTemplate"         , FormLinkAction<INpcSpawnGetter>.Instance);
            Add(typeof(INpcGetter)                   , "TemplateActors.BaseDataTemplate"           , FormLinkAction<INpcSpawnGetter>.Instance);
            Add(typeof(INpcGetter)                   , "TemplateActors.DefPackListTemplate"        , FormLinkAction<INpcSpawnGetter>.Instance);
            Add(typeof(INpcGetter)                   , "TemplateActors.FactionsTemplate"           , FormLinkAction<INpcSpawnGetter>.Instance);
            Add(typeof(INpcGetter)                   , "TemplateActors.InventoryTemplate"          , FormLinkAction<INpcSpawnGetter>.Instance);
            Add(typeof(INpcGetter)                   , "TemplateActors.KeywordsTemplate"           , FormLinkAction<INpcSpawnGetter>.Instance);
            Add(typeof(INpcGetter)                   , "TemplateActors.ModelOrAnimationTemplate"   , FormLinkAction<INpcSpawnGetter>.Instance);
            Add(typeof(INpcGetter)                   , "TemplateActors.ScriptTemplate"             , FormLinkAction<INpcSpawnGetter>.Instance);
            Add(typeof(INpcGetter)                   , "TemplateActors.SpellListTemplate"          , FormLinkAction<INpcSpawnGetter>.Instance);
            Add(typeof(INpcGetter)                   , "TemplateActors.StatsTemplate"              , FormLinkAction<INpcSpawnGetter>.Instance);
            Add(typeof(INpcGetter)                   , "TemplateActors.TraitTemplate"              , FormLinkAction<INpcSpawnGetter>.Instance);
            Add(typeof(IArmorGetter)                 , "TemplateArmor"                             , FormLinkAction<IArmorGetter>.Instance);
            Add(typeof(IQuestGetter)                 , "TextDisplayGlobals"                        , FormLinksAction<IGlobalGetter>.Instance);
            Add(typeof(IBookGetter)                  , "TextOffsetX"                               , ConvertibleAction<uint>.Instance);
            Add(typeof(IBookGetter)                  , "TextOffsetY"                               , ConvertibleAction<uint>.Instance);
            Add(typeof(IBendableSplineGetter)        , "Texture"                                   , FormLinkAction<ITextureSetGetter>.Instance);
            Add(typeof(IProjectileGetter)            , "TextureFilesHashes"                        , MemorySliceByteAction.Instance);
            Add(typeof(INpcGetter)                   , "TextureLighting"                           , BasicAction<Color>.Instance);
            Add(null                                 , "TextureSet"                                , FormLinkAction<ITextureSetGetter>.Instance);
            Add(typeof(ILandscapeTextureGetter)      , "TextureSpecularExponent"                   , ConvertibleAction<byte>.Instance);
            Add(typeof(IArmorAddonGetter)            , "TextureSwapList.Female"                    , FormLinkAction<IFormListGetter>.Instance);
            Add(typeof(IArmorAddonGetter)            , "TextureSwapList.Male"                      , FormLinkAction<IFormListGetter>.Instance);
            Add(typeof(IWeatherGetter)               , "ThunderLightningBeginFadeIn"               , BasicAction<Percent>.Instance);
            Add(typeof(IWeatherGetter)               , "ThunderLightningEndFadeOut"                , BasicAction<Percent>.Instance);
            Add(typeof(IWeatherGetter)               , "ThunderLightningFrequency"                 , BasicAction<Percent>.Instance);
            Add(typeof(ILightGetter)                 , "Time"                                      , ConvertibleAction<int>.Instance);
            Add(typeof(ICameraShotGetter)            , "TimeMultiplierGlobal"                      , ConvertibleAction<float>.Instance);
            Add(typeof(ICameraShotGetter)            , "TimeMultiplierPlayer"                      , ConvertibleAction<float>.Instance);
            Add(typeof(ICameraShotGetter)            , "TimeMultiplierTarget"                      , ConvertibleAction<float>.Instance);
            Add(typeof(IImageSpaceGetter)            , "TintAmount"                                , ConvertibleAction<float>.Instance);
            Add(typeof(IImageSpaceGetter)            , "TintColor"                                 , BasicAction<Color>.Instance);
            Add(typeof(IAssociationTypeGetter)       , "Title.Female"                              , ConvertibleAction<string>.Instance);
            Add(typeof(IAssociationTypeGetter)       , "Title.Male"                                , ConvertibleAction<string>.Instance);
            Add(typeof(ILocationReferenceTypeGetter) , "TNAM"                                      , MemorySliceByteAction.Instance);
            Add(typeof(IProjectileGetter)            , "TracerFrequency"                           , ConvertibleAction<byte>.Instance);
            Add(typeof(IMusicTrackGetter)            , "TrackFilename"                             , ConvertibleAction<string>.Instance);
            Add(typeof(IMusicTrackGetter)            , "Tracks"                                    , FormLinksAction<IMusicTrackGetter>.Instance);
            Add(typeof(IMusicTypeGetter)             , "Tracks"                                    , FormLinksAction<IMusicTrackGetter>.Instance);
            Add(typeof(IPerkGetter)                  , "Trait"                                     , ConvertibleAction<bool>.Instance);
            Add(typeof(IWeatherGetter)               , "TransDelta"                                , ConvertibleAction<float>.Instance);
            Add(typeof(ILoadScreenGetter)            , "Transform"                                 , FormLinkAction<ITransformGetter>.Instance);
            Add(typeof(ITreeGetter)                  , "TrunkAmplitude"                            , ConvertibleAction<float>.Instance);
            Add(typeof(ITreeGetter)                  , "TrunkFlexibility"                          , ConvertibleAction<float>.Instance);
            Add(typeof(ICellGetter)                  , "TVDT"                                      , MemorySliceByteAction.Instance);
            Add(typeof(IArtObjectGetter)             , "Type"                                      , FlagsAction.Instance);
            Add(null                                 , "Type"                                      , EnumsAction.Instance);
            Add(typeof(IRaceGetter)                  , "UnarmedWeapon"                             , FormLinkAction<IWeaponGetter>.Instance);
            Add(typeof(IWeaponGetter)                , "UnequipSound"                              , FormLinkAction<ISoundDescriptorGetter>.Instance);
            Add(typeof(IGrassGetter)                 , "UnitsFromWater"                            , ConvertibleAction<ushort>.Instance);
            Add(typeof(IGrassGetter)                 , "UnitsFromWaterType"                        , EnumsAction.Instance);
            Add(typeof(IShaderParticleGeometryGetter), "Unknown11"                                 , ConvertibleAction<float>.Instance);
            Add(typeof(IShaderParticleGeometryGetter), "Unknown12"                                 , ConvertibleAction<float>.Instance);
            Add(typeof(IShaderParticleGeometryGetter), "Unknown8"                                  , ConvertibleAction<float>.Instance);
            Add(typeof(IShaderParticleGeometryGetter), "Unknown9"                                  , ConvertibleAction<float>.Instance);
            Add(typeof(IWeatherGetter)               , "UnknownColor.Day"                          , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "UnknownColor.EarlySunrise"                 , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "UnknownColor.EarlySunset"                  , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "UnknownColor.LateSunrise"                  , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "UnknownColor.LateSunset"                   , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "UnknownColor.Night"                        , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "UnknownColor.Sunrise"                      , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "UnknownColor.Sunset"                       , BasicAction<Color>.Instance);
            Add(typeof(IAnimatedObjectGetter)        , "UnloadEvent"                               , ConvertibleAction<string>.Instance);
            Add(typeof(ILocationGetter)              , "UnreportedCrimeFaction"                    , FormLinkAction<IFactionGetter>.Instance);
            Add(typeof(IAcousticSpaceGetter)         , "UseSoundFromRegion"                        , FormLinkAction<IRegionGetter>.Instance);
            Add(typeof(IFurnitureGetter)             , "UsesSkill"                                 , EnumsAction.Instance);
            Add(typeof(INpcGetter)                   , "UseTemplateActors"                         , EnumsAction.Instance);
            Add(typeof(IHeadPartGetter)              , "ValidRaces"                                , FormLinkAction<IFormListGetter>.Instance);
            Add(typeof(IArmorGetter)                 , "Value"                                     , ConvertibleAction<int>.Instance);
            Add(typeof(IIngredientGetter)            , "Value"                                     , ConvertibleAction<int>.Instance);
            Add(typeof(IMiscItemGetter)              , "Value"                                     , ConvertibleAction<int>.Instance);
            Add(null                                 , "Value"                                     , ConvertibleAction<uint>.Instance);
            Add(typeof(ISoundKeywordMappingGetter)   , "VatsDescriptor"                            , FormLinkAction<ISoundDescriptorGetter>.Instance);
            Add(typeof(IProjectileGetter)            , "VATSProjectile"                            , FormLinkAction<IProjectileGetter>.Instance);
            Add(typeof(ISoundKeywordMappingGetter)   , "VatsThreshold"                             , ConvertibleAction<float>.Instance);
            Add(typeof(IFactionGetter)               , "VendorBuySellList"                         , FormLinkAction<IFormListGetter>.Instance);
            Add(typeof(IFactionGetter)               , "VendorLocation.CollectionIndex"            , ConvertibleAction<uint>.Instance);
            Add(typeof(IFactionGetter)               , "VendorLocation.Radius"                     , ConvertibleAction<uint>.Instance);
            Add(typeof(IFactionGetter)               , "VendorValues.BuySellEverythingNotInList"   , ConvertibleAction<bool>.Instance);
            Add(typeof(IFactionGetter)               , "VendorValues.BuysNonStolenItems"           , ConvertibleAction<bool>.Instance);
            Add(typeof(IFactionGetter)               , "VendorValues.BuysStolenItems"              , ConvertibleAction<bool>.Instance);
            Add(typeof(IFactionGetter)               , "VendorValues.EndHour"                      , ConvertibleAction<ushort>.Instance);
            Add(typeof(IFactionGetter)               , "VendorValues.Radius"                       , ConvertibleAction<ushort>.Instance);
            Add(typeof(IFactionGetter)               , "VendorValues.StartHour"                    , ConvertibleAction<ushort>.Instance);
            Add(typeof(IPackInGetter)                , "Version"                                   , ConvertibleAction<uint>.Instance);
            Add(typeof(IExplosionGetter)             , "VerticalOffsetMult"                        , ConvertibleAction<float>.Instance);
            Add(typeof(IQuestGetter)                 , "VirtualMachineAdapter.ExtraBindDataVersion", ConvertibleAction<byte>.Instance);
            Add(null                                 , "VirtualMachineAdapter.ObjectFormat"        , ConvertibleAction<ushort>.Instance);
            Add(null                                 , "VirtualMachineAdapter.Version"             , ConvertibleAction<short>.Instance);
            Add(typeof(IWeatherGetter)               , "VisibilityMult"                            , ConvertibleAction<float>.Instance);
            Add(typeof(IWeatherGetter)               , "VisualEffect"                              , FormLinkAction<IVisualEffectGetter>.Instance);
            Add(typeof(IWeatherGetter)               , "VisualEffectBegin"                         , BasicAction<Percent>.Instance);
            Add(typeof(IWeatherGetter)               , "VisualEffectEnd"                           , BasicAction<Percent>.Instance);
            Add(typeof(INpcGetter)                   , "Voice"                                     , FormLinkAction<IVoiceTypeGetter>.Instance);
            Add(typeof(IRaceGetter)                  , "Voices.Female"                             , FormLinkAction<IVoiceTypeGetter>.Instance);
            Add(typeof(IRaceGetter)                  , "Voices.Male"                               , FormLinkAction<IVoiceTypeGetter>.Instance);
            Add(typeof(ITalkingActivatorGetter)      , "VoiceType"                                 , FormLinkAction<IVoiceTypeGetter>.Instance);
            Add(typeof(IClimateGetter)               , "Volatility"                                , ConvertibleAction<byte>.Instance);
            Add(typeof(IWeatherGetter)               , "VolatilityMult"                            , ConvertibleAction<float>.Instance);
            Add(typeof(IFootstepSetGetter)           , "WalkFootsteps"                             , FormLinksAction<IFootstepGetter>.Instance);
            Add(typeof(ICellGetter)                  , "Water"                                     , FormLinkAction<IWaterGetter>.Instance);
            Add(typeof(IWorldspaceGetter)            , "Water"                                     , FormLinkAction<IWaterGetter>.Instance);
            Add(typeof(ICellGetter)                  , "WaterEnvironmentMap"                       , ConvertibleAction<string>.Instance);
            Add(typeof(IWorldspaceGetter)            , "WaterEnvironmentMap"                       , ConvertibleAction<string>.Instance);
            Add(typeof(ICellGetter)                  , "WaterHeight"                               , ConvertibleAction<float>.Instance);
            Add(typeof(IWeatherGetter)               , "WaterMultiplierColor.Day"                  , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "WaterMultiplierColor.EarlySunrise"         , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "WaterMultiplierColor.EarlySunset"          , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "WaterMultiplierColor.LateSunrise"          , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "WaterMultiplierColor.LateSunset"           , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "WaterMultiplierColor.Night"                , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "WaterMultiplierColor.Sunrise"              , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "WaterMultiplierColor.Sunset"               , BasicAction<Color>.Instance);
            Add(typeof(IActivatorGetter)             , "WaterType"                                 , FormLinkAction<IWaterGetter>.Instance);
            Add(typeof(ICellGetter)                  , "WaterVelocity.Angle.X"                     , ConvertibleAction<float>.Instance);
            Add(typeof(ICellGetter)                  , "WaterVelocity.Angle.Y"                     , ConvertibleAction<float>.Instance);
            Add(typeof(ICellGetter)                  , "WaterVelocity.Angle.Z"                     , ConvertibleAction<float>.Instance);
            Add(typeof(ICellGetter)                  , "WaterVelocity.Offset.X"                    , ConvertibleAction<float>.Instance);
            Add(typeof(ICellGetter)                  , "WaterVelocity.Offset.Y"                    , ConvertibleAction<float>.Instance);
            Add(typeof(ICellGetter)                  , "WaterVelocity.Offset.Z"                    , ConvertibleAction<float>.Instance);
            Add(typeof(IGrassGetter)                 , "WavePeriod"                                , ConvertibleAction<float>.Instance);
            Add(typeof(IFurnitureGetter)             , "WBDTDataTypeState"                         , FlagsAction.Instance);
            Add(typeof(IArmorAddonGetter)            , "WeaponAdjust"                              , ConvertibleAction<float>.Instance);
            Add(typeof(IRegionGetter)                , "Weather.Flags"                             , FlagsAction.Instance);
            Add(typeof(IRegionGetter)                , "Weather.LodDisplayDistanceMultiplier"      , ConvertibleAction<float>.Instance);
            Add(typeof(IRegionGetter)                , "Weather.OcclusionAccuracyDist"             , ConvertibleAction<float>.Instance);
            Add(typeof(IRegionGetter)                , "Weather.Priority"                          , ConvertibleAction<byte>.Instance);
            Add(typeof(IAcousticSpaceGetter)         , "WeatherAttenuationDb"                      , ConvertibleAction<float>.Instance);
            Add(typeof(IAmmunitionGetter)            , "Weight"                                    , ConvertibleAction<float>.Instance);
            Add(typeof(IArmorGetter)                 , "Weight"                                    , ConvertibleAction<float>.Instance);
            Add(typeof(IBookGetter)                  , "Weight"                                    , ConvertibleAction<float>.Instance);
            Add(typeof(IContainerGetter)             , "Weight"                                    , ConvertibleAction<float>.Instance);
            Add(typeof(IHolotapeGetter)              , "Weight"                                    , ConvertibleAction<float>.Instance);
            Add(typeof(IIngestibleGetter)            , "Weight"                                    , ConvertibleAction<float>.Instance);
            Add(typeof(IIngredientGetter)            , "Weight"                                    , ConvertibleAction<float>.Instance);
            Add(typeof(IKeyGetter)                   , "Weight"                                    , ConvertibleAction<float>.Instance);
            Add(typeof(ILightGetter)                 , "Weight"                                    , ConvertibleAction<float>.Instance);
            Add(typeof(IMiscItemGetter)              , "Weight"                                    , ConvertibleAction<float>.Instance);
            Add(typeof(IWeaponGetter)                , "Weight"                                    , ConvertibleAction<float>.Instance);
            Add(typeof(INpcGetter)                   , "Weight.Fat"                                , ConvertibleAction<float>.Instance);
            Add(typeof(INpcGetter)                   , "Weight.Muscular"                           , ConvertibleAction<float>.Instance);
            Add(typeof(INpcGetter)                   , "Weight.Thin"                               , ConvertibleAction<float>.Instance);
            Add(typeof(IArmorAddonGetter)            , "WeightSliderEnabled.Female"                , ConvertibleAction<bool>.Instance);
            Add(typeof(IArmorAddonGetter)            , "WeightSliderEnabled.Male"                  , ConvertibleAction<bool>.Instance);
            Add(typeof(ITerminalGetter)              , "WelcomeText"                               , ConvertibleAction<string>.Instance);
            Add(typeof(IWeatherGetter)               , "WindDirection"                             , ConvertibleAction<float>.Instance);
            Add(typeof(IWeatherGetter)               , "WindDirectionRange"                        , ConvertibleAction<float>.Instance);
            Add(typeof(IBendableSplineGetter)        , "WindFlexibility"                           , ConvertibleAction<float>.Instance);
            Add(typeof(IBendableSplineGetter)        , "WindSensibility"                           , ConvertibleAction<float>.Instance);
            Add(typeof(IWeatherGetter)               , "WindSpeed"                                 , BasicAction<Percent>.Instance);
            Add(typeof(IWeatherGetter)               , "WindTurbulance"                            , BasicAction<Percent>.Instance);
            Add(typeof(ITerminalGetter)              , "WorkbenchData"                             , MemorySliceByteAction.Instance);
            Add(typeof(IConstructibleObjectGetter)   , "WorkbenchKeyword"                          , FormLinkAction<IKeywordGetter>.Instance);
            Add(typeof(ILocationGetter)              , "WorldLocationMarkerRef"                    , FormLinkAction<IPlacedSimpleGetter>.Instance);
            Add(typeof(ILocationGetter)              , "WorldLocationRadius"                       , ConvertibleAction<float>.Instance);
            Add(typeof(IWorldspaceGetter)            , "WorldMapCellOffset.X"                      , ConvertibleAction<float>.Instance);
            Add(typeof(IWorldspaceGetter)            , "WorldMapCellOffset.Y"                      , ConvertibleAction<float>.Instance);
            Add(typeof(IWorldspaceGetter)            , "WorldMapCellOffset.Z"                      , ConvertibleAction<float>.Instance);
            Add(typeof(IWorldspaceGetter)            , "WorldMapOffsetScale"                       , ConvertibleAction<float>.Instance);
            Add(typeof(IRegionGetter)                , "Worldspace"                                , FormLinkAction<IWorldspaceGetter>.Instance);
            Add(typeof(IObjectEffectGetter)          , "WornRestrictions"                          , FormLinkAction<IFormListGetter>.Instance);
            Add(typeof(ITextureSetGetter)            , "Wrinkles"                                  , ConvertibleAction<string>.Instance);
            Add(typeof(IPackageGetter)               , "XnamMarker"                                , MemorySliceByteAction.Instance);
            Add(typeof(IRaceGetter)                  , "XPValue"                                   , ConvertibleAction<short>.Instance);
            Add(typeof(INpcGetter)                   , "XpValueOffset"                             , ConvertibleAction<short>.Instance);
            Add(typeof(ICellGetter)                  , "XWCN"                                      , MemorySliceByteAction.Instance);
            Add(typeof(IMovementTypeGetter)          , "YawRun"                                    , ConvertibleAction<float>.Instance);
            Add(typeof(IMovementTypeGetter)          , "YawSprint"                                 , ConvertibleAction<float>.Instance);
            Add(typeof(IMovementTypeGetter)          , "YawStanding"                               , ConvertibleAction<float>.Instance);
            Add(typeof(IMovementTypeGetter)          , "YawWalk"                                   , ConvertibleAction<float>.Instance);
            Add(typeof(ICameraPathGetter)            , "Zoom"                                      , FlagsAction.Instance);
            Add(typeof(IWeaponGetter)                , "Zoom"                                      , FormLinkAction<IZoomGetter>.Instance);
            Add(typeof(ILoadScreenGetter)            , "Zoom.Max"                                  , ConvertibleAction<float>.Instance);
            Add(typeof(ILoadScreenGetter)            , "Zoom.Min"                                  , ConvertibleAction<float>.Instance);
#pragma warning restore format
        }
    }
}