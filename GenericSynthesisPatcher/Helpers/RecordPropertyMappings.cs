using System.Diagnostics.CodeAnalysis;
using System.Drawing;

using GenericSynthesisPatcher.Helpers.Action;

using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Skyrim;

using Noggog;

namespace GenericSynthesisPatcher.Helpers
{
    public static class RecordPropertyMappings
    {
        private static readonly HashSet<IRecordProperty> propertyAliases = new(comparer: new RecordPropertyComparer());
        private static readonly HashSet<IRecordProperty> propertyMappings = new(comparer: new RecordPropertyComparer());

        static RecordPropertyMappings ()
        {
            populateMappings();
            populateAliases();
        }

        public static IReadOnlyList<PropertyAliasMapping> AllAliases => propertyAliases.Select(a => (PropertyAliasMapping)a).ToList().AsReadOnly();
        public static IReadOnlyList<RecordPropertyMapping> AllRPMs => propertyMappings.Select(a => (RecordPropertyMapping)a).ToList().AsReadOnly();

        public static IReadOnlyList<string> GetAllAliases (Type type, string propertyName)
        {
            var list = propertyAliases.Where(p => p is PropertyAliasMapping pam && pam.RealPropertyName.Equals(propertyName, StringComparison.Ordinal) && (pam.Type == null || pam.Type == type)).Select(p => (PropertyAliasMapping)p).ToList();

            foreach (var item in list.ToArray().Where(l => l.Type == null && list.Count(i => i.PropertyName == l.PropertyName) > 1))
                _ = list.Remove(item);

            return list.Select(l => l.PropertyName).ToList().AsReadOnly();
        }

        [SuppressMessage("Style", "IDE0046:Convert to conditional expression", Justification = "Readability")]
        public static bool TryFind (Type? type, string propertyName, out RecordPropertyMapping rpm)
        {
            if (tryFindMapping(type, propertyName, out rpm))
                return true;

            if (tryFindAlias(type, propertyName, out var pam))
                return tryFindMapping(type, pam.RealPropertyName, out rpm);

            return false;
        }

        internal static bool tryFindMapping (Type? type, string key, out RecordPropertyMapping rpm)
        {
            if (type != null && propertyMappings.TryGetValue(new RecordProperty(type, key), out var _rpm) && _rpm is RecordPropertyMapping _RPM)
            {
                rpm = _RPM;
                return true;
            }
            else if (propertyMappings.TryGetValue(new RecordProperty(key), out var _rpmNoType) && _rpmNoType is RecordPropertyMapping _RPMNoType)
            {
                rpm = _RPMNoType;
                return true;
            }

            rpm = default;
            return false;
        }

        [SuppressMessage("Style", "IDE1006:Naming Styles", Justification = "<Pending>")]
        private static void Add (Type? type, string propertyName, IRecordAction action) => _ = propertyMappings.Add(new RecordPropertyMapping(type, propertyName, action));

        [SuppressMessage("Style", "IDE1006:Naming Styles", Justification = "<Pending>")]
        private static void Add (Type? type, string propertyName, string realPropertyName) => _ = propertyAliases.Add(new PropertyAliasMapping(type, propertyName, realPropertyName));

        private static void populateAliases ()
        {
#pragma warning disable format
            Add(null                                 , "BAMT"       , nameof(IArmorGetter.AlternateBlockMaterial));
            Add(null                                 , "DataFlags"  , nameof(IAmmunitionGetter.Flags));
            Add(null                                 , "DESC"       , nameof(IAmmunitionGetter.Description));
            Add(null                                 , "EAMT"       , nameof(IArmorGetter.EnchantmentAmount));
            Add(null                                 , "EDID"       , nameof(IArmorGetter.EditorID));
            Add(null                                 , "EITM"       , nameof(IArmorGetter.ObjectEffect));
            Add(null                                 , "ETYP"       , nameof(IWeaponGetter.EquipmentType));
            Add(null                                 , "FULL"       , nameof(INamedGetter.Name));
            Add(null                                 , "Item"       , nameof(IContainerGetter.Items));
            Add(null                                 , "KWDA"       , nameof(IKeywordedGetter.Keywords));
            Add(null                                 , "LVLD"       , nameof(ILeveledItemGetter.ChanceNone));
            Add(null                                 , "LVLG"       , nameof(ILeveledItemGetter.Global));
            Add(null                                 , "OBND"       , nameof(IArmorGetter.ObjectBounds));
            Add(null                                 , "ONAM"       , nameof(INpcGetter.ShortName));
            Add(null                                 , "RecordFlags", nameof(IAmmunitionGetter.MajorFlags));
            Add(null                                 , "RNAM"       , nameof(INpcGetter.Race));
            Add(null                                 , "VMAD"       , nameof(IArmorGetter.VirtualMachineAdapter));
            Add(null                                 , "XCWT"       , nameof(ICellGetter.Water));
            Add(null                                 , "XEZN"       , nameof(ICellGetter.EncounterZone));
            Add(null                                 , "XLCN"       , nameof(ICellGetter.Location));
            Add(null                                 , "YNAM"       , nameof(IAmmunitionGetter.PickUpSound));
            Add(null                                 , "ZNAM"       , nameof(IAmmunitionGetter.PutDownSound));
            Add(typeof(IAcousticSpaceGetter)         , "BNAM"       , nameof(IAcousticSpaceGetter.EnvironmentType));
            Add(typeof(IAcousticSpaceGetter)         , "RDAT"       , nameof(IAcousticSpaceGetter.UseSoundFromRegion));
            Add(typeof(IAcousticSpaceGetter)         , "SNAM"       , nameof(IAcousticSpaceGetter.AmbientSound));
            Add(typeof(IActionRecordGetter)          , "CNAM"       , nameof(IActionRecordGetter.Color));
            Add(typeof(IActivatorGetter)             , "KNAM"       , nameof(IActivatorGetter.InteractionKeyword));
            Add(typeof(IActivatorGetter)             , "PNAM"       , nameof(IActivatorGetter.MarkerColor));
            Add(typeof(IActivatorGetter)             , "RNAM"       , nameof(IActivatorGetter.ActivateTextOverride));
            Add(typeof(IActivatorGetter)             , "SNAM"       , nameof(IActivatorGetter.LoopingSound));
            Add(typeof(IActivatorGetter)             , "VNAM"       , nameof(IActivatorGetter.ActivationSound));
            Add(typeof(IActivatorGetter)             , "WNAM"       , nameof(IActivatorGetter.WaterType));
            Add(typeof(IActorValueInformationGetter) , "ANAM"       , nameof(IActorValueInformationGetter.Abbreviation));
            Add(typeof(IActorValueInformationGetter) , "AVSK"       , nameof(IActorValueInformationGetter.Skill));
            Add(typeof(IAddonNodeGetter)             , "DATA"       , nameof(IAddonNodeGetter.NodeIndex));
            Add(typeof(IAddonNodeGetter)             , "SNAM"       , nameof(IAddonNodeGetter.Sound));
            Add(typeof(IAlchemicalApparatusGetter)   , "QUAL"       , nameof(IAlchemicalApparatusGetter.Quality));
            Add(typeof(IAmmunitionGetter)            , "DMG"        , nameof(IAmmunitionGetter.Damage));
            Add(typeof(IAnimatedObjectGetter)        , "BNAM"       , nameof(IAnimatedObjectGetter.UnloadEvent));
            Add(typeof(IArmorAddonGetter)            , "MODL"       , nameof(IArmorAddonGetter.AdditionalRaces));
            Add(typeof(IArmorAddonGetter)            , "ONAM"       , nameof(IArmorAddonGetter.ArtObject));
            Add(typeof(IArmorAddonGetter)            , "SNDD"       , nameof(IArmorAddonGetter.FootstepSound));
            Add(typeof(IArmorGetter)                 , "BIDS"       , nameof(IArmorGetter.BashImpactDataSet));
            Add(typeof(IArmorGetter)                 , "BMCT"       , nameof(IArmorGetter.RagdollConstraintTemplate));
            Add(typeof(IArmorGetter)                 , "DNAM"       , nameof(IArmorGetter.ArmorRating));
            Add(typeof(IArmorGetter)                 , "MODL"       , nameof(IArmorGetter.Armature));
            Add(typeof(IArmorGetter)                 , "TNAM"       , nameof(IArmorGetter.TemplateArmor));
            Add(typeof(IArtObjectGetter)             , "DNAM"       , nameof(IArtObjectGetter.Type));
            Add(typeof(IBookGetter)                  , "CNAM"       , nameof(IBookGetter.Description));
            Add(typeof(IBookGetter)                  , "DESC"       , nameof(IBookGetter.BookText));
            Add(typeof(IBookGetter)                  , "INAM"       , nameof(IBookGetter.InventoryArt));
            Add(typeof(ICameraPathGetter)            , "ANAM"       , nameof(ICameraPathGetter.RelatedPaths));
            Add(typeof(ICameraPathGetter)            , "SNAM"       , nameof(ICameraPathGetter.Shots));
            Add(typeof(ICameraShotGetter)            , "MNAM"       , nameof(ICameraShotGetter.ImageSpaceModifier));
            Add(typeof(ICellGetter)                  , "LTMP"       , nameof(ICellGetter.LightingTemplate));
            Add(typeof(ICellGetter)                  , "MHDT"       , nameof(ICellGetter.MaxHeightData));
            Add(typeof(ICellGetter)                  , "TVDT"       , nameof(ICellGetter.OcclusionData));
            Add(typeof(ICellGetter)                  , "XCAS"       , nameof(ICellGetter.AcousticSpace));
            Add(typeof(ICellGetter)                  , "XCCM"       , nameof(ICellGetter.SkyAndWeatherFromRegion));
            Add(typeof(ICellGetter)                  , "XCIM"       , nameof(ICellGetter.ImageSpace));
            Add(typeof(ICellGetter)                  , "XCLR"       , nameof(ICellGetter.Regions));
            Add(typeof(ICellGetter)                  , "XCLW"       , nameof(ICellGetter.WaterHeight));
            Add(typeof(ICellGetter)                  , "XCLX"       , nameof(ICellGetter.Grid));
            Add(typeof(ICellGetter)                  , "XCMO"       , nameof(ICellGetter.Music));
            Add(typeof(ICellGetter)                  , "XRNK"       , nameof(ICellGetter.FactionRank));
            Add(typeof(ICellGetter)                  , "XILL"       , nameof(ICellGetter.LockList));
            Add(typeof(ICellGetter)                  , "XNAM"       , nameof(ICellGetter.WaterNoiseTexture));
            Add(typeof(ICellGetter)                  , "XOWN"       , nameof(ICellGetter.Owner));
            Add(typeof(ICellGetter)                  , "XWEM"       , nameof(ICellGetter.WaterEnvironmentMap));
            Add(typeof(IClimateGetter)               , "FNAM"       , nameof(IClimateGetter.SunTexture));
            Add(typeof(IClimateGetter)               , "GNAM"       , nameof(IClimateGetter.SunGlareTexture));
            Add(typeof(ICollisionLayerGetter)        , "BNAM"       , nameof(ICollisionLayerGetter.Index));
            Add(typeof(ICollisionLayerGetter)        , "CNAM"       , nameof(ICollisionLayerGetter.CollidesWith));
            Add(typeof(ICollisionLayerGetter)        , "FNAM"       , nameof(ICollisionLayerGetter.DebugColor));
            Add(typeof(ICollisionLayerGetter)        , "GNAM"       , nameof(ICollisionLayerGetter.Flags));
            Add(typeof(ICollisionLayerGetter)        , "MNAM"       , nameof(ICollisionLayerGetter.Name));
            Add(typeof(IColorRecordGetter)           , "CNAM"       , nameof(IColorRecordGetter.Color));
            Add(typeof(IColorRecordGetter)           , "FNAM"       , nameof(IColorRecordGetter.Playable));
            Add(typeof(ICombatStyleGetter)           , "CSLR"       , nameof(ICombatStyleGetter.LongRangeStrafeMult));
            Add(typeof(IConstructibleObjectGetter)   , "BNAM"       , nameof(IConstructibleObjectGetter.WorkbenchKeyword));
            Add(typeof(IConstructibleObjectGetter)   , "CNAM"       , nameof(IConstructibleObjectGetter.CreatedObject));
            Add(typeof(IConstructibleObjectGetter)   , "NAM1"       , nameof(IConstructibleObjectGetter.CreatedObjectCount));
            Add(typeof(IContainerGetter)             , "QNAM"       , nameof(IContainerGetter.CloseSound));
            Add(typeof(IContainerGetter)             , "SNAM"       , nameof(IContainerGetter.OpenSound));
            Add(typeof(IDialogBranchGetter)          , "QNAM"       , nameof(IDialogBranchGetter.Quest));
            Add(typeof(IDialogBranchGetter)          , "SNAM"       , nameof(IDialogBranchGetter.StartingTopic));
            Add(typeof(IDialogBranchGetter)          , "TNAM"       , nameof(IDialogBranchGetter.Category));
            Add(typeof(IDialogTopicGetter)           , "BNAM"       , nameof(IDialogTopicGetter.Branch));
            Add(typeof(IDialogTopicGetter)           , "PNAM"       , nameof(IDialogTopicGetter.Priority));
            Add(typeof(IDialogTopicGetter)           , "QNAM"       , nameof(IDialogTopicGetter.Quest));
            Add(typeof(IDialogTopicGetter)           , "SNAM"       , nameof(IDialogTopicGetter.Subtype));
            Add(typeof(IDialogViewGetter)            , "BNAM"       , nameof(IDialogViewGetter.Branches));
            Add(typeof(IDialogViewGetter)            , "QNAM"       , nameof(IDialogViewGetter.Quest));
            Add(typeof(IDoorGetter)                  , "ANAM"       , nameof(IDoorGetter.CloseSound));
            Add(typeof(IDoorGetter)                  , "BNAM"       , nameof(IDoorGetter.LoopSound));
            Add(typeof(IDoorGetter)                  , "SNAM"       , nameof(IDoorGetter.OpenSound));
            Add(typeof(IEffectShaderGetter)          , "ICO2"       , nameof(IEffectShaderGetter.ParticleShaderTexture));
            Add(typeof(IEffectShaderGetter)          , "ICON"       , nameof(IEffectShaderGetter.FillTexture));
            Add(typeof(IEffectShaderGetter)          , "NAM7"       , nameof(IEffectShaderGetter.HolesTexture));
            Add(typeof(IEffectShaderGetter)          , "NAM8"       , nameof(IEffectShaderGetter.MembranePaletteTexture));
            Add(typeof(IEffectShaderGetter)          , "NAM9"       , nameof(IEffectShaderGetter.ParticlePaletteTexture));
            Add(typeof(IEquipTypeGetter)             , "DATA"       , nameof(IEquipTypeGetter.UseAllParents));
            Add(typeof(IEquipTypeGetter)             , "PNAM"       , nameof(IEquipTypeGetter.SlotParents));
            Add(typeof(IExplosionGetter)             , "MNAM"       , nameof(IExplosionGetter.ImageSpaceModifier));
            Add(typeof(IEyesGetter)                  , "Texture"    , nameof(IEyesGetter.Icon));
            Add(typeof(IFactionGetter)               , "CRGR"       , nameof(IFactionGetter.SharedCrimeFactionList));
            Add(typeof(IFactionGetter)               , "JAIL"       , nameof(IFactionGetter.ExteriorJailMarker));
            Add(typeof(IFactionGetter)               , "JOUT"       , nameof(IFactionGetter.JailOutfit));
            Add(typeof(IFactionGetter)               , "PLCN"       , nameof(IFactionGetter.PlayerInventoryContainer));
            Add(typeof(IFactionGetter)               , "PLVD"       , nameof(IFactionGetter.VendorLocation));
            Add(typeof(IFactionGetter)               , "STOL"       , nameof(IFactionGetter.StolenGoodsContainer));
            Add(typeof(IFactionGetter)               , "VENC"       , nameof(IFactionGetter.MerchantContainer));
            Add(typeof(IFactionGetter)               , "VEND"       , nameof(IFactionGetter.VendorBuySellList));
            Add(typeof(IFactionGetter)               , "WAIT"       , nameof(IFactionGetter.FollowerWaitMarker));
            Add(typeof(IFactionGetter)               , "XNAM"       , nameof(IFactionGetter.Relations));
            Add(typeof(IFloraGetter)                 , "PFIG"       , nameof(IFloraGetter.Ingredient));
            Add(typeof(IFloraGetter)                 , "RNAM"       , nameof(IFloraGetter.ActivateTextOverride));
            Add(typeof(IFloraGetter)                 , "SNAM"       , nameof(IFloraGetter.HarvestSound));
            Add(typeof(IFootstepGetter)              , "ANAM"       , nameof(IFootstepGetter.Tag));
            Add(typeof(IFootstepGetter)              , "DATA"       , nameof(IFootstepGetter.ImpactDataSet));
            Add(typeof(IFormListGetter)              , "FormID"     , nameof(IFormListGetter.Items));
            Add(typeof(IFormListGetter)              , "FormIDs"    , nameof(IFormListGetter.Items));
            Add(typeof(IFormListGetter)              , "LNAM"       , nameof(IFormListGetter.Items));
            Add(typeof(IFurnitureGetter)             , "KNAM"       , nameof(IFurnitureGetter.InteractionKeyword));
            Add(typeof(IFurnitureGetter)             , "NAM1"       , nameof(IFurnitureGetter.AssociatedSpell));
            Add(typeof(IFurnitureGetter)             , "XMRK"       , nameof(IFurnitureGetter.ModelFilename));
            Add(typeof(IHazardGetter)                , "MNAM"       , nameof(IHazardGetter.ImageSpaceModifier));
            Add(typeof(IHeadPartGetter)              , "CNAM"       , nameof(IHeadPartGetter.Color));
            Add(typeof(IHeadPartGetter)              , "HNAM"       , nameof(IHeadPartGetter.ExtraParts));
            Add(typeof(IHeadPartGetter)              , "PNAM"       , nameof(IHeadPartGetter.Type));
            Add(typeof(IHeadPartGetter)              , "Race"       , nameof(IHeadPartGetter.ValidRaces));
            Add(typeof(IHeadPartGetter)              , "Races"      , nameof(IHeadPartGetter.ValidRaces));
            Add(typeof(IHeadPartGetter)              , "RNAM"       , nameof(IHeadPartGetter.ValidRaces));
            Add(typeof(IHeadPartGetter)              , "TNAM"       , nameof(IHeadPartGetter.TextureSet));
            Add(typeof(IIdleAnimationGetter)         , "ANAM"       , nameof(IIdleAnimationGetter.RelatedIdles));
            Add(typeof(IIdleAnimationGetter)         , "DNAM"       , nameof(IIdleAnimationGetter.Filename));
            Add(typeof(IIdleAnimationGetter)         , "ENAM"       , nameof(IIdleAnimationGetter.AnimationEvent));
            Add(typeof(IIdleMarkerGetter)            , "IDLA"       , nameof(IIdleMarkerGetter.Animations));
            Add(typeof(IIdleMarkerGetter)            , "IDLF"       , nameof(IIdleMarkerGetter.Flags));
            Add(typeof(IIdleMarkerGetter)            , "IDLT"       , nameof(IIdleMarkerGetter.IdleTimer));
            Add(typeof(IImpactGetter)                , "DNAM"       , nameof(IImpactGetter.TextureSet));
            Add(typeof(IImpactGetter)                , "ENAM"       , nameof(IImpactGetter.SecondaryTextureSet));
            Add(typeof(IImpactGetter)                , "NAM1"       , nameof(IImpactGetter.Sound2));
            Add(typeof(IImpactGetter)                , "NAM2"       , nameof(IImpactGetter.Hazard));
            Add(typeof(IImpactGetter)                , "SNAM"       , nameof(IImpactGetter.Sound1));
            Add(typeof(IIngestibleGetter)            , "DATA"       , nameof(IIngredientGetter.Weight));
            Add(typeof(IIngredientGetter)            , "ETYP"       , nameof(IIngredientGetter.EquipType));
            Add(typeof(IKeywordGetter)               , "CNAM"       , nameof(IKeywordGetter.Color));
            Add(typeof(ILightGetter)                 , "FNAM"       , nameof(ILightGetter.FadeValue));
            Add(typeof(ILightGetter)                 , "LNAM"       , nameof(ILightGetter.Lens));
            Add(typeof(ILightGetter)                 , "SNAM"       , nameof(ILightGetter.Sound));
            Add(typeof(ILandscapeTextureGetter)      , "GNAM"       , nameof(ILandscapeTextureGetter.Grasses));
            Add(typeof(ILandscapeTextureGetter)      , "MNAM"       , nameof(ILandscapeTextureGetter.MaterialType));
            Add(typeof(ILandscapeTextureGetter)      , "SNAM"       , nameof(ILandscapeTextureGetter.TextureSpecularExponent));
            Add(typeof(ILandscapeTextureGetter)      , "TNAM"       , nameof(ILandscapeTextureGetter.TextureSet));
            Add(typeof(ILoadScreenGetter)            , "NNAM"       , nameof(ILoadScreenGetter.LoadingScreenNif));
            Add(typeof(ILoadScreenGetter)            , "SNAM"       , nameof(ILoadScreenGetter.InitialScale));
            Add(typeof(ILocationGetter)              , "CNAM"       , nameof(ILocationGetter.Color));
            Add(typeof(ILocationGetter)              , "FNAM"       , nameof(ILocationGetter.UnreportedCrimeFaction));
            Add(typeof(ILocationGetter)              , "MNAM"       , nameof(ILocationGetter.WorldLocationMarkerRef));
            Add(typeof(ILocationGetter)              , "NAM0"       , nameof(ILocationGetter.HorseMarkerRef));
            Add(typeof(ILocationGetter)              , "NAM1"       , nameof(ILocationGetter.Music));
            Add(typeof(ILocationGetter)              , "PNAM"       , nameof(ILocationGetter.ParentLocation));
            Add(typeof(ILocationGetter)              , "RNAM"       , nameof(ILocationGetter.WorldLocationRadius));
            Add(typeof(ILocationReferenceTypeGetter) , "CNAM"       , nameof(ILocationReferenceTypeGetter.Color));
            Add(typeof(IMagicEffectGetter)           , "DNAM"       , nameof(IMagicEffectGetter.Description));
            Add(typeof(IMagicEffectGetter)           , "MDOB"       , nameof(IMagicEffectGetter.MenuDisplayObject));
            Add(typeof(IMaterialTypeGetter)          , "BNAM"       , nameof(IMaterialTypeGetter.Buoyancy));
            Add(typeof(IMaterialTypeGetter)          , "CNAM"       , nameof(IMaterialTypeGetter.HavokDisplayColor));
            Add(typeof(IMaterialTypeGetter)          , "HNAM"       , nameof(IMaterialTypeGetter.HavokImpactDataSet));
            Add(typeof(IMaterialTypeGetter)          , "PNAM"       , nameof(IMaterialTypeGetter.Parent));
            Add(typeof(IMessageGetter)               , "QNAM"       , nameof(IMessageGetter.Quest));
            Add(typeof(IMessageGetter)               , "TNAM"       , nameof(IMessageGetter.DisplayTime));
            Add(typeof(IMoveableStaticGetter)        , "SNAM"       , nameof(IMoveableStaticGetter.LoopingSound));
            Add(typeof(IMusicTrackGetter)            , "CNAM"       , nameof(IMusicTrackGetter.Type));
            Add(typeof(IMusicTrackGetter)            , "DNAM"       , nameof(IMusicTrackGetter.FadeOut));
            Add(typeof(IMusicTrackGetter)            , "FLTV"       , nameof(IMusicTrackGetter.Duration));
            Add(typeof(IMusicTrackGetter)            , "SNAM"       , nameof(IMusicTrackGetter.Tracks));
            Add(typeof(IMusicTypeGetter)             , "TNAM"       , nameof(IMusicTypeGetter.Tracks));
            Add(typeof(IMusicTypeGetter)             , "WNAM"       , nameof(IMusicTypeGetter.FadeDuration));
            Add(typeof(INpcGetter)                   , "ANAM"       , nameof(INpcGetter.FarAwayModel));
            Add(typeof(INpcGetter)                   , "ATKR"       , nameof(INpcGetter.AttackRace));
            Add(typeof(INpcGetter)                   , "CNAM"       , nameof(INpcGetter.Class));
            Add(typeof(INpcGetter)                   , "CRIF"       , nameof(INpcGetter.CrimeFaction));
            Add(typeof(INpcGetter)                   , "DNAM"       , nameof(INpcGetter.PlayerSkills));
            Add(typeof(INpcGetter)                   , "DOFT"       , nameof(INpcGetter.DefaultOutfit));
            Add(typeof(INpcGetter)                   , "DPLT"       , nameof(INpcGetter.DefaultPackageList));
            Add(typeof(INpcGetter)                   , "ECOR"       , nameof(INpcGetter.CombatOverridePackageList));
            Add(typeof(INpcGetter)                   , "FTST"       , nameof(INpcGetter.HeadTexture));
            Add(typeof(INpcGetter)                   , "GNAM"       , nameof(INpcGetter.GiftFilter));
            Add(typeof(INpcGetter)                   , "GWOR"       , nameof(INpcGetter.GuardWarnOverridePackageList));
            Add(typeof(INpcGetter)                   , "HCLF"       , nameof(INpcGetter.HairColor));
            Add(typeof(INpcGetter)                   , "INAM"       , nameof(INpcGetter.DeathItem));
            Add(typeof(INpcGetter)                   , "NAM6"       , nameof(INpcGetter.Height));
            Add(typeof(INpcGetter)                   , "NAM7"       , nameof(INpcGetter.Weight));
            Add(typeof(INpcGetter)                   , "NAM8"       , nameof(INpcGetter.SoundLevel));
            Add(typeof(INpcGetter)                   , "OCOR"       , nameof(INpcGetter.ObserveDeadBodyOverridePackageList));
            Add(typeof(INpcGetter)                   , "PKID"       , nameof(INpcGetter.Packages));
            Add(typeof(INpcGetter)                   , "PNAM"       , nameof(INpcGetter.HeadParts));
            Add(typeof(INpcGetter)                   , "QNAM"       , nameof(INpcGetter.TextureLighting));
            Add(typeof(INpcGetter)                   , "SNAM"       , nameof(INpcGetter.Factions));
            Add(typeof(INpcGetter)                   , "SOFT"       , nameof(INpcGetter.SleepingOutfit));
            Add(typeof(INpcGetter)                   , "SPLO"       , nameof(INpcGetter.ActorEffect));
            Add(typeof(INpcGetter)                   , "SPOR"       , nameof(INpcGetter.SpectatorOverridePackageList));
            Add(typeof(INpcGetter)                   , "TPLT"       , nameof(INpcGetter.Template));
            Add(typeof(INpcGetter)                   , "VTCK"       , nameof(INpcGetter.Voice));
            Add(typeof(INpcGetter)                   , "WNAM"       , nameof(INpcGetter.WornArmor));
            Add(typeof(INpcGetter)                   , "ZNAM"       , nameof(INpcGetter.CombatStyle));
            Add(typeof(IPackageGetter)               , "CNAM"       , nameof(IPackageGetter.CombatStyle));
            Add(typeof(IPackageGetter)               , "QNAM"       , nameof(IPackageGetter.OwnerQuest));
            Add(typeof(IPackageGetter)               , "XNAM"       , nameof(IPackageGetter.XnamMarker));
            Add(typeof(IPerkGetter)                  , "NNAM"       , nameof(IPerkGetter.NextPerk));
            Add(typeof(IProjectileGetter)            , "VNAM"       , nameof(IProjectileGetter.SoundLevel));
            Add(typeof(IQuestGetter)                 , "ANAM"       , nameof(IQuestGetter.NextAliasID));
            Add(typeof(IQuestGetter)                 , "FLTR"       , nameof(IQuestGetter.Filter));
            Add(typeof(IQuestGetter)                 , "QTGL"       , nameof(IQuestGetter.TextDisplayGlobals));
            Add(typeof(IRaceGetter)                  , "ATKR"       , nameof(IRaceGetter.AttackRace));
            Add(typeof(IRaceGetter)                  , "ENAM"       , nameof(IRaceGetter.Eyes));
            Add(typeof(IRaceGetter)                  , "FLMV"       , nameof(IRaceGetter.BaseMovementDefaultFly));
            Add(typeof(IRaceGetter)                  , "GNAM"       , nameof(IRaceGetter.BodyPartData));
            Add(typeof(IRaceGetter)                  , "HNAM"       , nameof(IRaceGetter.Hairs));
            Add(typeof(IRaceGetter)                  , "LNAM"       , nameof(IRaceGetter.CloseLootSound));
            Add(typeof(IRaceGetter)                  , "NAM4"       , nameof(IRaceGetter.MaterialType));
            Add(typeof(IRaceGetter)                  , "NAM5"       , nameof(IRaceGetter.ImpactDataSet));
            Add(typeof(IRaceGetter)                  , "NAM7"       , nameof(IRaceGetter.DecapitationFX));
            Add(typeof(IRaceGetter)                  , "NAM8"       , nameof(IRaceGetter.MorphRace));
            Add(typeof(IRaceGetter)                  , "ONAM"       , nameof(IRaceGetter.OpenLootSound));
            Add(typeof(IRaceGetter)                  , "PNAM"       , nameof(IRaceGetter.FacegenMainClamp));
            Add(typeof(IRaceGetter)                  , "QNAM"       , nameof(IRaceGetter.EquipmentSlots));
            Add(typeof(IRaceGetter)                  , "RNAM"       , nameof(IRaceGetter.ArmorRace));
            Add(typeof(IRaceGetter)                  , "RNMV"       , nameof(IRaceGetter.BaseMovementDefaultRun));
            Add(typeof(IRaceGetter)                  , "SNMV"       , nameof(IRaceGetter.BaseMovementDefaultSneak));
            Add(typeof(IRaceGetter)                  , "SPMV"       , nameof(IRaceGetter.BaseMovementDefaultSprint));
            Add(typeof(IRaceGetter)                  , "SWMV"       , nameof(IRaceGetter.BaseMovementDefaultSwim));
            Add(typeof(IRaceGetter)                  , "UNAM"       , nameof(IRaceGetter.FacegenFaceClamp));
            Add(typeof(IRaceGetter)                  , "UNES"       , nameof(IRaceGetter.UnarmedEquipSlot));
            Add(typeof(IRaceGetter)                  , "VNAM"       , nameof(IRaceGetter.EquipmentFlags));
            Add(typeof(IRaceGetter)                  , "WKMV"       , nameof(IRaceGetter.BaseMovementDefaultWalk));
            Add(typeof(IRaceGetter)                  , "WNAM"       , nameof(IRaceGetter.Skin));
            Add(typeof(IRegionGetter)                , "RCLR"       , nameof(IRegionGetter.MapColor));
            Add(typeof(IRegionGetter)                , "WNAM"       , nameof(IRegionGetter.Worldspace));
            Add(typeof(ISceneGetter)                 , "INAM"       , nameof(ISceneGetter.LastActionIndex));
            Add(typeof(ISceneGetter)                 , "PNAM"       , nameof(ISceneGetter.Quest));
            Add(typeof(IScrollGetter)                , "MDOB"       , nameof(IScrollGetter.MenuDisplayObject));
            Add(typeof(IShoutGetter)                 , "MDOB"       , nameof(IShoutGetter.MenuDisplayObject));
            Add(typeof(ISoulGemGetter)               , "NAM0"       , nameof(ISoulGemGetter.LinkedTo));
            Add(typeof(ISoulGemGetter)               , "SLCP"       , nameof(ISoulGemGetter.MaximumCapacity));
            Add(typeof(ISoulGemGetter)               , "SOUL"       , nameof(ISoulGemGetter.ContainedSoul));
            Add(typeof(ISoundCategoryGetter)         , "PNAM"       , nameof(ISoundCategoryGetter.Parent));
            Add(typeof(ISoundCategoryGetter)         , "UNAM"       , nameof(ISoundCategoryGetter.DefaultMenuVolume));
            Add(typeof(ISoundCategoryGetter)         , "VNAM"       , nameof(ISoundCategoryGetter.StaticVolumeMultiplier));
            Add(typeof(ISoundDescriptorGetter)       , "CNAM"       , nameof(ISoundDescriptorGetter.Type));
            Add(typeof(ISoundDescriptorGetter)       , "FNAM"       , nameof(ISoundDescriptorGetter.String));
            Add(typeof(ISoundDescriptorGetter)       , "GNAM"       , nameof(ISoundDescriptorGetter.Category));
            Add(typeof(ISoundDescriptorGetter)       , "ONAM"       , nameof(ISoundDescriptorGetter.OutputModel));
            Add(typeof(ISoundDescriptorGetter)       , "SNAM"       , nameof(ISoundDescriptorGetter.AlternateSoundFor));
            Add(typeof(ISoundMarkerGetter)           , "SDSC"       , nameof(ISoundMarkerGetter.SoundDescriptor));
            Add(typeof(ISoundOutputModelGetter)      , "MNAM"       , nameof(ISoundOutputModelGetter.Type));
            Add(typeof(ISpellGetter)                 , "MDOB"       , nameof(ISpellGetter.MenuDisplayObject));
            Add(typeof(ITalkingActivatorGetter)      , "SNAM"       , nameof(ITalkingActivatorGetter.LoopingSound));
            Add(typeof(ITalkingActivatorGetter)      , "VNAM"       , nameof(ITalkingActivatorGetter.VoiceType));
            Add(typeof(ITreeGetter)                  , "PFIG"       , nameof(ITreeGetter.Ingredient));
            Add(typeof(ITreeGetter)                  , "SNAM"       , nameof(ITreeGetter.HarvestSound));
            Add(typeof(IWaterGetter)                 , "ANAM"       , nameof(IWaterGetter.Opacity));
            Add(typeof(IWaterGetter)                 , "INAM"       , nameof(IWaterGetter.ImageSpace));
            Add(typeof(IWaterGetter)                 , "SNAM"       , nameof(IWaterGetter.OpenSound));
            Add(typeof(IWaterGetter)                 , "TNAM"       , nameof(IWaterGetter.Material));
            Add(typeof(IWaterGetter)                 , "XNAM"       , nameof(IWaterGetter.Spell));
            Add(typeof(IWeaponGetter)                , "BIDS"       , nameof(IWeaponGetter.BlockBashImpact));
            Add(typeof(IWeaponGetter)                , "CNAM"       , nameof(IWeaponGetter.Template));
            Add(typeof(IWeaponGetter)                , "INAM"       , nameof(IWeaponGetter.ImpactDataSet));
            Add(typeof(IWeaponGetter)                , "NAM7"       , nameof(IWeaponGetter.AttackLoopSound));
            Add(typeof(IWeaponGetter)                , "NAM8"       , nameof(IWeaponGetter.UnequipSound));
            Add(typeof(IWeaponGetter)                , "NAM9"       , nameof(IWeaponGetter.EquipSound));
            Add(typeof(IWeaponGetter)                , "SNAM"       , nameof(IWeaponGetter.AttackSound));
            Add(typeof(IWeaponGetter)                , "TNAM"       , nameof(IWeaponGetter.AttackFailSound));
            Add(typeof(IWeaponGetter)                , "UNAM"       , nameof(IWeaponGetter.IdleSound));
            Add(typeof(IWeaponGetter)                , "VNAM"       , nameof(IWeaponGetter.DetectionSoundLevel));
            Add(typeof(IWeaponGetter)                , "WNAM"       , nameof(IWeaponGetter.FirstPersonModel));
            Add(typeof(IWeaponGetter)                , "XNAM"       , nameof(IWeaponGetter.AttackSound2D));
            Add(typeof(IWeatherGetter)               , "GNAM"       , nameof(IWeatherGetter.SunGlareLensFlare));
            Add(typeof(IWeatherGetter)               , "MNAM"       , nameof(IWeatherGetter.Precipitation));
            Add(typeof(IWeatherGetter)               , "NNAM"       , nameof(IWeatherGetter.VisualEffect));
            Add(typeof(IWordOfPowerGetter)           , "TNAM"       , nameof(IWordOfPowerGetter.Translation));
            Add(typeof(IWorldspaceGetter)            , "CNAM"       , nameof(IWorldspaceGetter.Climate));
            Add(typeof(IWorldspaceGetter)            , "LTMP"       , nameof(IWorldspaceGetter.InteriorLighting));
            Add(typeof(IWorldspaceGetter)            , "MHDT"       , nameof(IWorldspaceGetter.MaxHeight));
            Add(typeof(IWorldspaceGetter)            , "NAM3"       , nameof(IWorldspaceGetter.LodWater));
            Add(typeof(IWorldspaceGetter)            , "NAM4"       , nameof(IWorldspaceGetter.LodWaterHeight));
            Add(typeof(IWorldspaceGetter)            , "NAMA"       , nameof(IWorldspaceGetter.DistantLodMultiplier));
            Add(typeof(IWorldspaceGetter)            , "OFST"       , nameof(IWorldspaceGetter.OffsetData));
            Add(typeof(IWorldspaceGetter)            , "ZNAM"       , nameof(IWorldspaceGetter.Music));
#pragma warning restore format
        }

        private static void populateMappings ()
        {
#pragma warning disable format
            Add(typeof(IActorValueInformationGetter) , "Abbreviation"                              , ConvertibleAction<string>.Instance);
            Add(typeof(IRaceGetter)                  , "AccelerationRate"                          , ConvertibleAction<float>.Instance);
            Add(typeof(ICellGetter)                  , "AcousticSpace"                             , FormLinkAction<IAcousticSpaceGetter>.Instance);
            Add(typeof(ICameraShotGetter)            , "Action"                                    , EnumsAction.Instance);
            Add(typeof(IActivatorGetter)             , "ActivateTextOverride"                      , ConvertibleAction<string>.Instance);
            Add(typeof(IFloraGetter)                 , "ActivateTextOverride"                      , ConvertibleAction<string>.Instance);
            Add(typeof(IActivatorGetter)             , "ActivationSound"                           , FormLinkAction<ISoundDescriptorGetter>.Instance);
            Add(typeof(ILocationGetter)              , "ActorCellMarkerReference"                  , FormLinksAction<IPlacedGetter>.Instance);
            Add(typeof(INpcGetter)                   , "ActorEffect"                               , FormLinksAction<ISpellRecordGetter>.Instance);
            Add(typeof(IRaceGetter)                  , "ActorEffect"                               , FormLinksAction<ISpellRecordGetter>.Instance);
            Add(typeof(IIngestibleGetter)            , "Addiction"                                 , FormLinkAction<ISkyrimMajorRecordGetter>.Instance);
            Add(typeof(IIngestibleGetter)            , "AddictionChance"                           , ConvertibleAction<float>.Instance);
            Add(typeof(IArmorAddonGetter)            , "AdditionalRaces"                           , FormLinksAction<IRaceGetter>.Instance);
            Add(typeof(IEffectShaderGetter)          , "AddonModels"                               , FormLinkAction<IDebrisGetter>.Instance);
            Add(typeof(IEffectShaderGetter)          , "AddonModelsFadeInTime"                     , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "AddonModelsFadeOutTime"                    , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "AddonModelsScaleEnd"                       , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "AddonModelsScaleInTime"                    , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "AddonModelsScaleOutTime"                   , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "AddonModelsScaleStart"                     , ConvertibleAction<float>.Instance);
            Add(typeof(INpcGetter)                   , "AIData.Aggression"                         , EnumsAction.Instance);
            Add(typeof(INpcGetter)                   , "AIData.AggroRadiusBehavior"                , ConvertibleAction<bool>.Instance);
            Add(typeof(INpcGetter)                   , "AIData.Assistance"                         , EnumsAction.Instance);
            Add(typeof(INpcGetter)                   , "AIData.Attack"                             , ConvertibleAction<uint>.Instance);
            Add(typeof(INpcGetter)                   , "AIData.Confidence"                         , EnumsAction.Instance);
            Add(typeof(INpcGetter)                   , "AIData.EnergyLevel"                        , ConvertibleAction<byte>.Instance);
            Add(typeof(INpcGetter)                   , "AIData.Mood"                               , EnumsAction.Instance);
            Add(typeof(INpcGetter)                   , "AIData.Responsibility"                     , EnumsAction.Instance);
            Add(typeof(INpcGetter)                   , "AIData.Warn"                               , ConvertibleAction<uint>.Instance);
            Add(typeof(INpcGetter)                   , "AIData.WarnOrAttack"                       , ConvertibleAction<uint>.Instance);
            Add(typeof(IRaceGetter)                  , "AimAngleTolerance"                         , ConvertibleAction<float>.Instance);
            Add(typeof(IArmorGetter)                 , "AlternateBlockMaterial"                    , FormLinkAction<IMaterialTypeGetter>.Instance);
            Add(typeof(IWeaponGetter)                , "AlternateBlockMaterial"                    , FormLinkAction<IMaterialTypeGetter>.Instance);
            Add(typeof(ISoundDescriptorGetter)       , "AlternateSoundFor"                         , FormLinkAction<ISoundDescriptorGetter>.Instance);
            Add(typeof(IAddonNodeGetter)             , "AlwaysLoaded"                              , ConvertibleAction<bool>.Instance);
            Add(typeof(ILightingTemplateGetter)      , "AmbientColor"                              , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "AmbientColor.Day"                          , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "AmbientColor.Night"                        , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "AmbientColor.Sunrise"                      , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "AmbientColor.Sunset"                       , BasicAction<Color>.Instance);
            Add(typeof(ILightingTemplateGetter)      , "AmbientColors.DirectionalXMinus"           , BasicAction<Color>.Instance);
            Add(typeof(ILightingTemplateGetter)      , "AmbientColors.DirectionalXPlus"            , BasicAction<Color>.Instance);
            Add(typeof(ILightingTemplateGetter)      , "AmbientColors.DirectionalYMinus"           , BasicAction<Color>.Instance);
            Add(typeof(ILightingTemplateGetter)      , "AmbientColors.DirectionalYPlus"            , BasicAction<Color>.Instance);
            Add(typeof(ILightingTemplateGetter)      , "AmbientColors.DirectionalZMinus"           , BasicAction<Color>.Instance);
            Add(typeof(ILightingTemplateGetter)      , "AmbientColors.DirectionalZPlus"            , BasicAction<Color>.Instance);
            Add(typeof(ILightingTemplateGetter)      , "AmbientColors.Scale"                       , ConvertibleAction<float>.Instance);
            Add(typeof(ILightingTemplateGetter)      , "AmbientColors.Specular"                    , BasicAction<Color>.Instance);
            Add(typeof(IAcousticSpaceGetter)         , "AmbientSound"                              , FormLinkAction<ISoundDescriptorGetter>.Instance);
            Add(typeof(IEffectShaderGetter)          , "AmbientSound"                              , FormLinkAction<ISoundGetter>.Instance);
            Add(typeof(IWeatherGetter)               , "ANAM"                                      , MemorySliceByteAction.Instance);
            Add(typeof(IImpactGetter)                , "AngleThreshold"                            , ConvertibleAction<float>.Instance);
            Add(typeof(IRaceGetter)                  , "AngularAccelerationRate"                   , ConvertibleAction<float>.Instance);
            Add(typeof(IRaceGetter)                  , "AngularTolerance"                          , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "AngularVelocity.X"                         , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "AngularVelocity.Y"                         , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "AngularVelocity.Z"                         , ConvertibleAction<float>.Instance);
            Add(typeof(IImageSpaceAdapterGetter)     , "Animatable"                                , ConvertibleAction<bool>.Instance);
            Add(typeof(IMovementTypeGetter)          , "AnimationChangeThresholds.Directional"     , ConvertibleAction<float>.Instance);
            Add(typeof(IMovementTypeGetter)          , "AnimationChangeThresholds.MovementSpeed"   , ConvertibleAction<float>.Instance);
            Add(typeof(IMovementTypeGetter)          , "AnimationChangeThresholds.RotationSpeed"   , ConvertibleAction<float>.Instance);
            Add(typeof(IIdleAnimationGetter)         , "AnimationEvent"                            , ConvertibleAction<string>.Instance);
            Add(typeof(IIdleAnimationGetter)         , "AnimationGroupSection"                     , ConvertibleAction<byte>.Instance);
            Add(typeof(IIdleMarkerGetter)            , "Animations"                                , FormLinksAction<IIdleAnimationGetter>.Instance);
            Add(typeof(IArmorGetter)                 , "Armature"                                  , FormLinksAction<IArmorAddonGetter>.Instance);
            Add(typeof(IRaceGetter)                  , "ArmorRace"                                 , FormLinkAction<IRaceGetter>.Instance);
            Add(typeof(IArmorGetter)                 , "ArmorRating"                               , ConvertibleAction<float>.Instance);
            Add(typeof(IArmorAddonGetter)            , "ArtObject"                                 , FormLinkAction<IArtObjectGetter>.Instance);
            Add(typeof(IFurnitureGetter)             , "AssociatedSpell"                           , FormLinkAction<ISpellGetter>.Instance);
            Add(typeof(IRelationshipGetter)          , "AssociationType"                           , FormLinkAction<IAssociationTypeGetter>.Instance);
            Add(typeof(IWeaponGetter)                , "AttackFailSound"                           , FormLinkAction<ISoundDescriptorGetter>.Instance);
            Add(typeof(IWeaponGetter)                , "AttackLoopSound"                           , FormLinkAction<ISoundDescriptorGetter>.Instance);
            Add(typeof(INpcGetter)                   , "AttackRace"                                , FormLinkAction<IRaceGetter>.Instance);
            Add(typeof(IRaceGetter)                  , "AttackRace"                                , FormLinkAction<IRaceGetter>.Instance);
            Add(typeof(IWeaponGetter)                , "AttackSound"                               , FormLinkAction<ISoundDescriptorGetter>.Instance);
            Add(typeof(IWeaponGetter)                , "AttackSound2D"                             , FormLinkAction<ISoundDescriptorGetter>.Instance);
            Add(typeof(ISoundOutputModelGetter)      , "Attenuation.Curve"                         , MemorySliceByteAction.Instance);
            Add(typeof(ISoundOutputModelGetter)      , "Attenuation.MaxDistance"                   , ConvertibleAction<float>.Instance);
            Add(typeof(ISoundOutputModelGetter)      , "Attenuation.MinDistance"                   , ConvertibleAction<float>.Instance);
            Add(typeof(IWeatherGetter)               , "Aurora"                                    , ModelAction.Instance);
            Add(typeof(ICombatStyleGetter)           , "AvoidThreatChance"                         , ConvertibleAction<float>.Instance);
            Add(typeof(IMovementTypeGetter)          , "BackRun"                                   , ConvertibleAction<float>.Instance);
            Add(typeof(IMovementTypeGetter)          , "BackWalk"                                  , ConvertibleAction<float>.Instance);
            Add(typeof(IRaceGetter)                  , "BaseCarryWeight"                           , ConvertibleAction<float>.Instance);
            Add(typeof(IMagicEffectGetter)           , "BaseCost"                                  , ConvertibleAction<float>.Instance);
            Add(typeof(IScrollGetter)                , "BaseCost"                                  , ConvertibleAction<uint>.Instance);
            Add(typeof(ISpellGetter)                 , "BaseCost"                                  , ConvertibleAction<uint>.Instance);
            Add(typeof(IObjectEffectGetter)          , "BaseEnchantment"                           , FormLinkAction<IObjectEffectGetter>.Instance);
            Add(typeof(IRaceGetter)                  , "BaseMass"                                  , ConvertibleAction<float>.Instance);
            Add(typeof(IRaceGetter)                  , "BaseMovementDefaultFly"                    , FormLinkAction<IMovementTypeGetter>.Instance);
            Add(typeof(IRaceGetter)                  , "BaseMovementDefaultRun"                    , FormLinkAction<IMovementTypeGetter>.Instance);
            Add(typeof(IRaceGetter)                  , "BaseMovementDefaultSneak"                  , FormLinkAction<IMovementTypeGetter>.Instance);
            Add(typeof(IRaceGetter)                  , "BaseMovementDefaultSprint"                 , FormLinkAction<IMovementTypeGetter>.Instance);
            Add(typeof(IRaceGetter)                  , "BaseMovementDefaultSwim"                   , FormLinkAction<IMovementTypeGetter>.Instance);
            Add(typeof(IRaceGetter)                  , "BaseMovementDefaultWalk"                   , FormLinkAction<IMovementTypeGetter>.Instance);
            Add(typeof(IArmorGetter)                 , "BashImpactDataSet"                         , FormLinkAction<IImpactDataSetGetter>.Instance);
            Add(typeof(IWeaponGetter)                , "BasicStats.Damage"                         , ConvertibleAction<ushort>.Instance);
            Add(typeof(IWeaponGetter)                , "BasicStats.Value"                          , ConvertibleAction<uint>.Instance);
            Add(typeof(IWeaponGetter)                , "BasicStats.Weight"                         , ConvertibleAction<float>.Instance);
            Add(typeof(IRaceGetter)                  , "BehaviorGraph.Female"                      , ModelAction.Instance);
            Add(typeof(IRaceGetter)                  , "BehaviorGraph.Male"                        , ModelAction.Instance);
            Add(typeof(IEffectShaderGetter)          , "BirthPositionOffset"                       , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "BirthPositionOffsetRangePlusMinus"         , ConvertibleAction<float>.Instance);
            Add(typeof(IClassGetter)                 , "BleedoutDefault"                           , ConvertibleAction<float>.Instance);
            Add(typeof(IWeaponGetter)                , "BlockBashImpact"                           , FormLinkAction<IImpactDataSetGetter>.Instance);
            Add(typeof(IWeatherGetter)               , "BNAM"                                      , MemorySliceByteAction.Instance);
            Add(typeof(IRaceGetter)                  , "BodyBipedObject"                           , EnumsAction.Instance);
            Add(typeof(IRaceGetter)                  , "BodyPartData"                              , FormLinkAction<IBodyPartDataGetter>.Instance);
            Add(null                                 , "BodyTemplate.ArmorType"                    , EnumsAction.Instance);
            Add(null                                 , "BodyTemplate.FirstPersonFlags"             , FlagsAction.Instance);
            Add(null                                 , "BodyTemplate.Flags"                        , FlagsAction.Instance);
            Add(typeof(IBookGetter)                  , "BookText"                                  , ConvertibleAction<string>.Instance);
            Add(typeof(IShaderParticleGeometryGetter), "BoxSize"                                   , ConvertibleAction<uint>.Instance);
            Add(typeof(IDialogTopicGetter)           , "Branch"                                    , FormLinkAction<IDialogBranchGetter>.Instance);
            Add(typeof(IDialogViewGetter)            , "Branches"                                  , FormLinksAction<IDialogBranchGetter>.Instance);
            Add(typeof(ITreeGetter)                  , "BranchFlexibility"                         , ConvertibleAction<float>.Instance);
            Add(typeof(IMaterialTypeGetter)          , "Buoyancy"                                  , ConvertibleAction<float>.Instance);
            Add(typeof(IScrollGetter)                , "CastDuration"                              , ConvertibleAction<float>.Instance);
            Add(typeof(ISpellGetter)                 , "CastDuration"                              , ConvertibleAction<float>.Instance);
            Add(typeof(IMagicEffectGetter)           , "CastingArt"                                , FormLinkAction<IArtObjectGetter>.Instance);
            Add(typeof(IMagicEffectGetter)           , "CastingLight"                              , FormLinkAction<ILightGetter>.Instance);
            Add(typeof(IMagicEffectGetter)           , "CastingSoundLevel"                         , EnumsAction.Instance);
            Add(null                                 , "CastType"                                  , EnumsAction.Instance);
            Add(typeof(IDialogBranchGetter)          , "Category"                                  , EnumsAction.Instance);
            Add(typeof(IDialogTopicGetter)           , "Category"                                  , EnumsAction.Instance);
            Add(typeof(ISoundDescriptorGetter)       , "Category"                                  , FormLinkAction<ISoundCategoryGetter>.Instance);
            Add(typeof(IShaderParticleGeometryGetter), "CenterOffsetMax"                           , ConvertibleAction<float>.Instance);
            Add(typeof(IShaderParticleGeometryGetter), "CenterOffsetMin"                           , ConvertibleAction<float>.Instance);
            Add(null                                 , "ChanceNone"                                , BasicAction<Percent>.Instance);
            Add(null                                 , "ChargeTime"                                , ConvertibleAction<float>.Instance);
            Add(typeof(IRelationshipGetter)          , "Child"                                     , FormLinkAction<INpcGetter>.Instance);
            Add(typeof(IImageSpaceGetter)            , "Cinematic.Brightness"                      , ConvertibleAction<float>.Instance);
            Add(typeof(IImageSpaceGetter)            , "Cinematic.Contrast"                        , ConvertibleAction<float>.Instance);
            Add(typeof(IImageSpaceGetter)            , "Cinematic.Saturation"                      , ConvertibleAction<float>.Instance);
            Add(typeof(INpcGetter)                   , "Class"                                     , FormLinkAction<IClassGetter>.Instance);
            Add(typeof(IWorldspaceGetter)            , "Climate"                                   , FormLinkAction<IClimateGetter>.Instance);
            Add(typeof(IRaceGetter)                  , "CloseLootSound"                            , FormLinkAction<ISoundDescriptorGetter>.Instance);
            Add(typeof(ICombatStyleGetter)           , "CloseRange.CircleMult"                     , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)           , "CloseRange.FallbackMult"                   , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)           , "CloseRange.FlankDistance"                  , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)           , "CloseRange.StalkTime"                      , ConvertibleAction<float>.Instance);
            Add(typeof(IContainerGetter)             , "CloseSound"                                , FormLinkAction<ISoundDescriptorGetter>.Instance);
            Add(typeof(IDoorGetter)                  , "CloseSound"                                , FormLinkAction<ISoundDescriptorGetter>.Instance);
            Add(typeof(IWeatherGetter)               , "CloudLodAmbientColor.Day"                  , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "CloudLodAmbientColor.Night"                , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "CloudLodAmbientColor.Sunrise"              , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "CloudLodAmbientColor.Sunset"               , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "CloudLodDiffuseColor.Day"                  , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "CloudLodDiffuseColor.Night"                , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "CloudLodDiffuseColor.Sunrise"              , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "CloudLodDiffuseColor.Sunset"               , BasicAction<Color>.Instance);
            Add(typeof(IWorldspaceGetter)            , "CloudModel"                                , ModelAction.Instance);
            Add(null                                 , "CNAM"                                      , MemorySliceByteAction.Instance);
            Add(typeof(ICollisionLayerGetter)        , "CollidesWith"                              , FormLinksAction<ICollisionLayerGetter>.Instance);
            Add(typeof(IProjectileGetter)            , "CollisionLayer"                            , FormLinkAction<ICollisionLayerGetter>.Instance);
            Add(typeof(IProjectileGetter)            , "CollisionRadius"                           , ConvertibleAction<float>.Instance);
            Add(typeof(IHeadPartGetter)              , "Color"                                     , FormLinkAction<IColorRecordGetter>.Instance);
            Add(null                                 , "Color"                                     , BasicAction<Color>.Instance);
            Add(typeof(IEffectShaderGetter)          , "ColorKey1"                                 , BasicAction<Color>.Instance);
            Add(typeof(IEffectShaderGetter)          , "ColorKey1Alpha"                            , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "ColorKey1Time"                             , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "ColorKey2"                                 , BasicAction<Color>.Instance);
            Add(typeof(IEffectShaderGetter)          , "ColorKey2Alpha"                            , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "ColorKey2Time"                             , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "ColorKey3"                                 , BasicAction<Color>.Instance);
            Add(typeof(IEffectShaderGetter)          , "ColorKey3Alpha"                            , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "ColorKey3Time"                             , ConvertibleAction<float>.Instance);
            Add(typeof(IGrassGetter)                 , "ColorRange"                                , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "ColorScale"                                , ConvertibleAction<float>.Instance);
            Add(typeof(INpcGetter)                   , "CombatOverridePackageList"                 , FormLinkAction<IFormListGetter>.Instance);
            Add(typeof(INpcGetter)                   , "CombatStyle"                               , FormLinkAction<ICombatStyleGetter>.Instance);
            Add(typeof(IPackageGetter)               , "CombatStyle"                               , FormLinkAction<ICombatStyleGetter>.Instance);
            Add(typeof(IProjectileGetter)            , "ConeSpread"                                , ConvertibleAction<float>.Instance);
            Add(typeof(INpcGetter)                   , "Configuration.BleedoutOverride"            , ConvertibleAction<short>.Instance);
            Add(typeof(INpcGetter)                   , "Configuration.CalcMaxLevel"                , ConvertibleAction<short>.Instance);
            Add(typeof(INpcGetter)                   , "Configuration.CalcMinLevel"                , ConvertibleAction<short>.Instance);
            Add(typeof(INpcGetter)                   , "Configuration.DispositionBase"             , ConvertibleAction<short>.Instance);
            Add(typeof(INpcGetter)                   , "Configuration.Flags"                       , FlagsAction.Instance);
            Add(typeof(INpcGetter)                   , "Configuration.HealthOffset"                , ConvertibleAction<short>.Instance);
            Add(typeof(INpcGetter)                   , "Configuration.MagickaOffset"               , ConvertibleAction<short>.Instance);
            Add(typeof(INpcGetter)                   , "Configuration.SpeedMultiplier"             , ConvertibleAction<short>.Instance);
            Add(typeof(INpcGetter)                   , "Configuration.StaminaOffset"               , ConvertibleAction<short>.Instance);
            Add(typeof(INpcGetter)                   , "Configuration.TemplateFlags"               , FlagsAction.Instance);
            Add(typeof(IIngestibleGetter)            , "ConsumeSound"                              , FormLinkAction<ISoundDescriptorGetter>.Instance);
            Add(typeof(ISoulGemGetter)               , "ContainedSoul"                             , EnumsAction.Instance);
            Add(typeof(IProjectileGetter)            , "CountdownSound"                            , FormLinkAction<ISoundDescriptorGetter>.Instance);
            Add(typeof(IMagicEffectGetter)           , "CounterEffects"                            , FormLinksAction<IMagicEffectGetter>.Instance);
            Add(typeof(IConstructibleObjectGetter)   , "CreatedObject"                             , FormLinkAction<IConstructibleGetter>.Instance);
            Add(typeof(IConstructibleObjectGetter)   , "CreatedObjectCount"                        , ConvertibleAction<ushort>.Instance);
            Add(typeof(INpcGetter)                   , "CrimeFaction"                              , FormLinkAction<IFactionGetter>.Instance);
            Add(typeof(IFactionGetter)               , "CrimeValues.Arrest"                        , ConvertibleAction<bool>.Instance);
            Add(typeof(IFactionGetter)               , "CrimeValues.Assault"                       , ConvertibleAction<ushort>.Instance);
            Add(typeof(IFactionGetter)               , "CrimeValues.AttackOnSight"                 , ConvertibleAction<bool>.Instance);
            Add(typeof(IFactionGetter)               , "CrimeValues.Escape"                        , ConvertibleAction<ushort>.Instance);
            Add(typeof(IFactionGetter)               , "CrimeValues.Murder"                        , ConvertibleAction<ushort>.Instance);
            Add(typeof(IFactionGetter)               , "CrimeValues.Pickpocket"                    , ConvertibleAction<ushort>.Instance);
            Add(typeof(IFactionGetter)               , "CrimeValues.StealMult"                     , ConvertibleAction<float>.Instance);
            Add(typeof(IFactionGetter)               , "CrimeValues.Trespass"                      , ConvertibleAction<ushort>.Instance);
            Add(typeof(IFactionGetter)               , "CrimeValues.Werewolf"                      , ConvertibleAction<ushort>.Instance);
            Add(typeof(IWeaponGetter)                , "Critical.Damage"                           , ConvertibleAction<ushort>.Instance);
            Add(typeof(IWeaponGetter)                , "Critical.Effect"                           , FormLinkAction<ISpellGetter>.Instance);
            Add(typeof(IWeaponGetter)                , "Critical.Flags"                            , FlagsAction.Instance);
            Add(typeof(IWeaponGetter)                , "Critical.PercentMult"                      , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)           , "CSGDDataTypeState"                         , FlagsAction.Instance);
            Add(typeof(ICombatStyleGetter)           , "CSMD"                                      , MemorySliceByteAction.Instance);
            Add(typeof(IAmmunitionGetter)            , "Damage"                                    , ConvertibleAction<float>.Instance);
            Add(typeof(IExplosionGetter)             , "Damage"                                    , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "DamagePerSecond"                           , ConvertibleAction<ushort>.Instance);
            Add(typeof(IWeaponGetter)                , "Data.AnimationAttackMult"                  , ConvertibleAction<float>.Instance);
            Add(typeof(IWeaponGetter)                , "Data.AnimationType"                        , EnumsAction.Instance);
            Add(typeof(IWeaponGetter)                , "Data.AttackAnimation"                      , EnumsAction.Instance);
            Add(typeof(IWeaponGetter)                , "Data.BaseVATStoHitChance"                  , ConvertibleAction<byte>.Instance);
            Add(typeof(IMusicTypeGetter)             , "Data.DuckingDecibel"                       , ConvertibleAction<float>.Instance);
            Add(typeof(IWeaponGetter)                , "Data.EmbeddedWeaponAV"                     , ConvertibleAction<byte>.Instance);
            Add(typeof(ISoundOutputModelGetter)      , "Data.Flags"                                , FlagsAction.Instance);
            Add(typeof(IWeaponGetter)                , "Data.Flags"                                , FlagsAction.Instance);
            Add(typeof(IWeaponGetter)                , "Data.NumProjectiles"                       , ConvertibleAction<byte>.Instance);
            Add(typeof(IWeaponGetter)                , "Data.OnHit"                                , EnumsAction.Instance);
            Add(typeof(IMusicTypeGetter)             , "Data.Priority"                             , ConvertibleAction<ushort>.Instance);
            Add(typeof(IWeaponGetter)                , "Data.RangeMax"                             , ConvertibleAction<float>.Instance);
            Add(typeof(IWeaponGetter)                , "Data.RangeMin"                             , ConvertibleAction<float>.Instance);
            Add(typeof(IWeaponGetter)                , "Data.Reach"                                , ConvertibleAction<float>.Instance);
            Add(typeof(IWeaponGetter)                , "Data.Resist"                               , EnumsAction.Instance);
            Add(typeof(ISoundOutputModelGetter)      , "Data.ReverbSendPercent"                    , BasicAction<Percent>.Instance);
            Add(typeof(IWeaponGetter)                , "Data.RumbleDuration"                       , ConvertibleAction<float>.Instance);
            Add(typeof(IWeaponGetter)                , "Data.RumbleLeftMotorStrength"              , ConvertibleAction<float>.Instance);
            Add(typeof(IWeaponGetter)                , "Data.RumbleRightMotorStrength"             , ConvertibleAction<float>.Instance);
            Add(typeof(IWeaponGetter)                , "Data.SightFOV"                             , ConvertibleAction<float>.Instance);
            Add(typeof(IWeaponGetter)                , "Data.Skill"                                , EnumsAction.Instance);
            Add(typeof(IWeaponGetter)                , "Data.Speed"                                , ConvertibleAction<float>.Instance);
            Add(typeof(IWeaponGetter)                , "Data.Stagger"                              , ConvertibleAction<float>.Instance);
            Add(typeof(IPackageGetter)               , "DataInputVersion"                          , ConvertibleAction<int>.Instance);
            Add(typeof(INpcGetter)                   , "DeathItem"                                 , FormLinkAction<ILeveledItemGetter>.Instance);
            Add(typeof(ICollisionLayerGetter)        , "DebugColor"                                , BasicAction<Color>.Instance);
            Add(typeof(IImpactGetter)                , "Decal.Color"                               , BasicAction<Color>.Instance);
            Add(typeof(ITextureSetGetter)            , "Decal.Color"                               , BasicAction<Color>.Instance);
            Add(typeof(IImpactGetter)                , "Decal.Depth"                               , ConvertibleAction<float>.Instance);
            Add(typeof(ITextureSetGetter)            , "Decal.Depth"                               , ConvertibleAction<float>.Instance);
            Add(typeof(IImpactGetter)                , "Decal.Flags"                               , FlagsAction.Instance);
            Add(typeof(ITextureSetGetter)            , "Decal.Flags"                               , FlagsAction.Instance);
            Add(typeof(IImpactGetter)                , "Decal.MaxHeight"                           , ConvertibleAction<float>.Instance);
            Add(typeof(ITextureSetGetter)            , "Decal.MaxHeight"                           , ConvertibleAction<float>.Instance);
            Add(typeof(IImpactGetter)                , "Decal.MaxWidth"                            , ConvertibleAction<float>.Instance);
            Add(typeof(ITextureSetGetter)            , "Decal.MaxWidth"                            , ConvertibleAction<float>.Instance);
            Add(typeof(IImpactGetter)                , "Decal.MinHeight"                           , ConvertibleAction<float>.Instance);
            Add(typeof(ITextureSetGetter)            , "Decal.MinHeight"                           , ConvertibleAction<float>.Instance);
            Add(typeof(IImpactGetter)                , "Decal.MinWidth"                            , ConvertibleAction<float>.Instance);
            Add(typeof(ITextureSetGetter)            , "Decal.MinWidth"                            , ConvertibleAction<float>.Instance);
            Add(typeof(IImpactGetter)                , "Decal.ParallaxPasses"                      , ConvertibleAction<byte>.Instance);
            Add(typeof(ITextureSetGetter)            , "Decal.ParallaxPasses"                      , ConvertibleAction<byte>.Instance);
            Add(typeof(IImpactGetter)                , "Decal.ParallaxScale"                       , ConvertibleAction<float>.Instance);
            Add(typeof(ITextureSetGetter)            , "Decal.ParallaxScale"                       , ConvertibleAction<float>.Instance);
            Add(typeof(IImpactGetter)                , "Decal.Shininess"                           , ConvertibleAction<float>.Instance);
            Add(typeof(ITextureSetGetter)            , "Decal.Shininess"                           , ConvertibleAction<float>.Instance);
            Add(typeof(IProjectileGetter)            , "DecalData"                                 , FormLinkAction<ITextureSetGetter>.Instance);
            Add(typeof(IRaceGetter)                  , "DecapitationFX"                            , FormLinkAction<IArtObjectGetter>.Instance);
            Add(typeof(IReverbParametersGetter)      , "DecayHfRatio"                              , ConvertibleAction<float>.Instance);
            Add(typeof(IReverbParametersGetter)      , "DecayMilliseconds"                         , ConvertibleAction<ushort>.Instance);
            Add(typeof(IRaceGetter)                  , "DecelerationRate"                          , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "DeepColor"                                 , BasicAction<Color>.Instance);
            Add(typeof(ISoundCategoryGetter)         , "DefaultMenuVolume"                         , ConvertibleAction<float>.Instance);
            Add(typeof(INpcGetter)                   , "DefaultOutfit"                             , FormLinkAction<IOutfitGetter>.Instance);
            Add(typeof(INpcGetter)                   , "DefaultPackageList"                        , FormLinkAction<IFormListGetter>.Instance);
            Add(typeof(IProjectileGetter)            , "DefaultWeaponSource"                       , FormLinkAction<IWeaponGetter>.Instance);
            Add(typeof(ICombatStyleGetter)           , "DefensiveMult"                             , ConvertibleAction<float>.Instance);
            Add(typeof(IGrassGetter)                 , "Density"                                   , ConvertibleAction<byte>.Instance);
            Add(typeof(IReverbParametersGetter)      , "DensityPercent"                            , BasicAction<Percent>.Instance);
            Add(typeof(IWaterGetter)                 , "DepthNormals"                              , ConvertibleAction<float>.Instance);
            Add(typeof(IImageSpaceGetter)            , "DepthOfField.BlurRadius"                   , ConvertibleAction<byte>.Instance);
            Add(typeof(IImageSpaceGetter)            , "DepthOfField.Distance"                     , ConvertibleAction<float>.Instance);
            Add(typeof(IImageSpaceGetter)            , "DepthOfField.Range"                        , ConvertibleAction<float>.Instance);
            Add(typeof(IImageSpaceGetter)            , "DepthOfField.Sky"                          , ConvertibleAction<bool>.Instance);
            Add(typeof(IImageSpaceGetter)            , "DepthOfField.Strength"                     , ConvertibleAction<float>.Instance);
            Add(typeof(IImageSpaceAdapterGetter)     , "DepthOfFieldFlags"                         , FlagsAction.Instance);
            Add(typeof(IWaterGetter)                 , "DepthReflections"                          , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "DepthRefraction"                           , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "DepthSpecularLighting"                     , ConvertibleAction<float>.Instance);
            Add(null                                 , "Description"                               , ConvertibleAction<string>.Instance);
            Add(typeof(IWeaponGetter)                , "DetectionSoundLevel"                       , EnumsAction.Instance);
            Add(typeof(IArmorAddonGetter)            , "DetectionSoundValue"                       , ConvertibleAction<byte>.Instance);
            Add(typeof(IReverbParametersGetter)      , "DiffusionPercent"                          , BasicAction<Percent>.Instance);
            Add(typeof(ILightingTemplateGetter)      , "DirectionalAmbientColors.DirectionalXMinus", BasicAction<Color>.Instance);
            Add(typeof(ILightingTemplateGetter)      , "DirectionalAmbientColors.DirectionalXPlus" , BasicAction<Color>.Instance);
            Add(typeof(ILightingTemplateGetter)      , "DirectionalAmbientColors.DirectionalYMinus", BasicAction<Color>.Instance);
            Add(typeof(ILightingTemplateGetter)      , "DirectionalAmbientColors.DirectionalYPlus" , BasicAction<Color>.Instance);
            Add(typeof(ILightingTemplateGetter)      , "DirectionalAmbientColors.DirectionalZMinus", BasicAction<Color>.Instance);
            Add(typeof(ILightingTemplateGetter)      , "DirectionalAmbientColors.DirectionalZPlus" , BasicAction<Color>.Instance);
            Add(typeof(ILightingTemplateGetter)      , "DirectionalAmbientColors.Scale"            , ConvertibleAction<float>.Instance);
            Add(typeof(ILightingTemplateGetter)      , "DirectionalAmbientColors.Specular"         , BasicAction<Color>.Instance);
            Add(typeof(ILightingTemplateGetter)      , "DirectionalColor"                          , BasicAction<Color>.Instance);
            Add(typeof(ILightingTemplateGetter)      , "DirectionalFade"                           , ConvertibleAction<float>.Instance);
            Add(typeof(ILightingTemplateGetter)      , "DirectionalRotationXY"                     , ConvertibleAction<int>.Instance);
            Add(typeof(ILightingTemplateGetter)      , "DirectionalRotationZ"                      , ConvertibleAction<int>.Instance);
            Add(typeof(IProjectileGetter)            , "DisaleSound"                               , FormLinkAction<ISoundDescriptorGetter>.Instance);
            Add(typeof(IWaterGetter)                 , "DisplacementDampner"                       , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "DisplacementFalloff"                       , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "DisplacementFoce"                          , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "DisplacementStartingSize"                  , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "DisplacementVelocity"                      , ConvertibleAction<float>.Instance);
            Add(typeof(IMessageGetter)               , "DisplayTime"                               , ConvertibleAction<uint>.Instance);
            Add(typeof(IWorldspaceGetter)            , "DistantLodMultiplier"                      , ConvertibleAction<float>.Instance);
            Add(typeof(IDialogViewGetter)            , "DNAM"                                      , MemorySliceByteAction.Instance);
            Add(typeof(IWeatherGetter)               , "DNAM"                                      , MemorySliceByteAction.Instance);
            Add(typeof(IStaticGetter)                , "DNAMDataTypeState"                         , FlagsAction.Instance);
            Add(typeof(IWaterGetter)                 , "DNAMDataTypeState"                         , FlagsAction.Instance);
            Add(typeof(IMagicEffectGetter)           , "DualCastArt"                               , FormLinkAction<IDualCastDataGetter>.Instance);
            Add(typeof(IMagicEffectGetter)           , "DualCastScale"                             , ConvertibleAction<float>.Instance);
            Add(null                                 , "Duration"                                  , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "EdgeColor"                                 , BasicAction<Color>.Instance);
            Add(typeof(IEffectShaderGetter)          , "EdgeEffectAlphaFadeInTime"                 , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "EdgeEffectAlphaFadeOutTime"                , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "EdgeEffectAlphaPulseAmplitude"             , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "EdgeEffectAlphaPulseFrequency"             , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "EdgeEffectColor"                           , BasicAction<Color>.Instance);
            Add(typeof(IEffectShaderGetter)          , "EdgeEffectFallOff"                         , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "EdgeEffectFullAlphaRatio"                  , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "EdgeEffectFullAlphaTime"                   , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "EdgeEffectPersistentAlphaRatio"            , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "EdgeWidth"                                 , ConvertibleAction<float>.Instance);
            Add(null                                 , "EditorID"                                  , ConvertibleAction<string>.Instance);
            Add(typeof(IVisualEffectGetter)          , "EffectArt"                                 , FormLinkAction<IArtObjectGetter>.Instance);
            Add(typeof(IWeatherGetter)               , "EffectLightingColor.Day"                   , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "EffectLightingColor.Night"                 , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "EffectLightingColor.Sunrise"               , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "EffectLightingColor.Sunset"                , BasicAction<Color>.Instance);
            Add(typeof(IIngestibleGetter)            , "Effects"                                   , EffectsAction.Instance);
            Add(typeof(IIngredientGetter)            , "Effects"                                   , EffectsAction.Instance);
            Add(typeof(IObjectEffectGetter)          , "Effects"                                   , EffectsAction.Instance);
            Add(typeof(IScrollGetter)                , "Effects"                                   , EffectsAction.Instance);
            Add(typeof(ISpellGetter)                 , "Effects"                                   , EffectsAction.Instance);
            Add(typeof(IDualCastDataGetter)          , "EffectShader"                              , FormLinkAction<IEffectShaderGetter>.Instance);
            Add(typeof(IDialogViewGetter)            , "ENAM"                                      , MemorySliceByteAction.Instance);
            Add(typeof(IImageSpaceGetter)            , "ENAM"                                      , MemorySliceByteAction.Instance);
            Add(typeof(IMagicEffectGetter)           , "EnchantArt"                                , FormLinkAction<IArtObjectGetter>.Instance);
            Add(typeof(IArmorGetter)                 , "EnchantmentAmount"                         , ConvertibleAction<ushort>.Instance);
            Add(typeof(IObjectEffectGetter)          , "EnchantmentAmount"                         , ConvertibleAction<int>.Instance);
            Add(typeof(IWeaponGetter)                , "EnchantmentAmount"                         , ConvertibleAction<ushort>.Instance);
            Add(typeof(IObjectEffectGetter)          , "EnchantmentCost"                           , ConvertibleAction<uint>.Instance);
            Add(typeof(IMagicEffectGetter)           , "EnchantShader"                             , FormLinkAction<IEffectShaderGetter>.Instance);
            Add(typeof(IObjectEffectGetter)          , "EnchantType"                               , EnumsAction.Instance);
            Add(typeof(IMagicEffectGetter)           , "EnchantVisuals"                            , FormLinkAction<IVisualEffectGetter>.Instance);
            Add(typeof(ICellGetter)                  , "EncounterZone"                             , FormLinkAction<IEncounterZoneGetter>.Instance);
            Add(typeof(IWorldspaceGetter)            , "EncounterZone"                             , FormLinkAction<IEncounterZoneGetter>.Instance);
            Add(typeof(IObjectEffectGetter)          , "ENITDataTypeState"                         , FlagsAction.Instance);
            Add(typeof(ILeveledItemGetter)           , "Entries"                                   , LeveledItemAction.Instance);
            Add(typeof(ILeveledNpcGetter)            , "Entries"                                   , LeveledNpcAction.Instance);
            Add(typeof(ILeveledSpellGetter)          , "Entries"                                   , LeveledSpellAction.Instance);
            Add(typeof(IAcousticSpaceGetter)         , "EnvironmentType"                           , FormLinkAction<IReverbParametersGetter>.Instance);
            Add(typeof(IMagicEffectGetter)           , "EquipAbility"                              , FormLinkAction<ISpellGetter>.Instance);
            Add(typeof(IRaceGetter)                  , "EquipmentFlags"                            , FlagsAction.Instance);
            Add(typeof(ICombatStyleGetter)           , "EquipmentScoreMultMagic"                   , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)           , "EquipmentScoreMultMelee"                   , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)           , "EquipmentScoreMultRanged"                  , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)           , "EquipmentScoreMultShout"                   , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)           , "EquipmentScoreMultStaff"                   , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)           , "EquipmentScoreMultUnarmed"                 , ConvertibleAction<float>.Instance);
            Add(typeof(IRaceGetter)                  , "EquipmentSlots"                            , FormLinksAction<IEquipTypeGetter>.Instance);
            Add(null                                 , "EquipmentType"                             , FormLinkAction<IEquipTypeGetter>.Instance);
            Add(typeof(IWeaponGetter)                , "EquipSound"                                , FormLinkAction<ISoundDescriptorGetter>.Instance);
            Add(typeof(IIngredientGetter)            , "EquipType"                                 , FormLinkAction<IEquipTypeGetter>.Instance);
            Add(null                                 , "Explosion"                                 , FormLinkAction<IExplosionGetter>.Instance);
            Add(typeof(IProjectileGetter)            , "ExplosionAltTriggerProximity"              , ConvertibleAction<float>.Instance);
            Add(typeof(IProjectileGetter)            , "ExplosionAltTriggerTimer"                  , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "ExplosionWindSpeed"                        , ConvertibleAction<float>.Instance);
            Add(typeof(IRaceGetter)                  , "ExportingExtraNam2"                        , ConvertibleAction<bool>.Instance);
            Add(typeof(IFactionGetter)               , "ExteriorJailMarker"                        , FormLinkAction<IPlacedObjectGetter>.Instance);
            Add(typeof(IHeadPartGetter)              , "ExtraParts"                                , FormLinksAction<IHeadPartGetter>.Instance);
            Add(typeof(IRaceGetter)                  , "Eyes"                                      , FormLinksAction<IEyesGetter>.Instance);
            Add(typeof(IRaceGetter)                  , "FacegenFaceClamp"                          , ConvertibleAction<float>.Instance);
            Add(typeof(IRaceGetter)                  , "FacegenMainClamp"                          , ConvertibleAction<float>.Instance);
            Add(typeof(INpcGetter)                   , "FaceMorph.BrowsForwardVsBack"              , ConvertibleAction<float>.Instance);
            Add(typeof(INpcGetter)                   , "FaceMorph.BrowsInVsOut"                    , ConvertibleAction<float>.Instance);
            Add(typeof(INpcGetter)                   , "FaceMorph.BrowsUpVsDown"                   , ConvertibleAction<float>.Instance);
            Add(typeof(INpcGetter)                   , "FaceMorph.CheeksForwardVsBack"             , ConvertibleAction<float>.Instance);
            Add(typeof(INpcGetter)                   , "FaceMorph.CheeksUpVsDown"                  , ConvertibleAction<float>.Instance);
            Add(typeof(INpcGetter)                   , "FaceMorph.ChinNarrowVsWide"                , ConvertibleAction<float>.Instance);
            Add(typeof(INpcGetter)                   , "FaceMorph.ChinUnderbiteVsOverbite"         , ConvertibleAction<float>.Instance);
            Add(typeof(INpcGetter)                   , "FaceMorph.ChinUpVsDown"                    , ConvertibleAction<float>.Instance);
            Add(typeof(INpcGetter)                   , "FaceMorph.EyesForwardVsBack"               , ConvertibleAction<float>.Instance);
            Add(typeof(INpcGetter)                   , "FaceMorph.EyesInVsOut"                     , ConvertibleAction<float>.Instance);
            Add(typeof(INpcGetter)                   , "FaceMorph.EyesUpVsDown"                    , ConvertibleAction<float>.Instance);
            Add(typeof(INpcGetter)                   , "FaceMorph.JawForwardVsBack"                , ConvertibleAction<float>.Instance);
            Add(typeof(INpcGetter)                   , "FaceMorph.JawNarrowVsWide"                 , ConvertibleAction<float>.Instance);
            Add(typeof(INpcGetter)                   , "FaceMorph.JawUpVsDown"                     , ConvertibleAction<float>.Instance);
            Add(typeof(INpcGetter)                   , "FaceMorph.LipsInVsOut"                     , ConvertibleAction<float>.Instance);
            Add(typeof(INpcGetter)                   , "FaceMorph.LipsUpVsDown"                    , ConvertibleAction<float>.Instance);
            Add(typeof(INpcGetter)                   , "FaceMorph.NoseLongVsShort"                 , ConvertibleAction<float>.Instance);
            Add(typeof(INpcGetter)                   , "FaceMorph.NoseUpVsDown"                    , ConvertibleAction<float>.Instance);
            Add(typeof(INpcGetter)                   , "FaceParts.Eyes"                            , ConvertibleAction<uint>.Instance);
            Add(typeof(INpcGetter)                   , "FaceParts.Mouth"                           , ConvertibleAction<uint>.Instance);
            Add(typeof(INpcGetter)                   , "FaceParts.Nose"                            , ConvertibleAction<uint>.Instance);
            Add(typeof(ICellGetter)                  , "FactionRank"                               , ConvertibleAction<int>.Instance);
            Add(typeof(INpcGetter)                   , "Factions"                                  , RankPlacementAction.Instance);
            Add(typeof(IMusicTypeGetter)             , "FadeDuration"                              , ConvertibleAction<float>.Instance);
            Add(typeof(IProjectileGetter)            , "FadeDuration"                              , ConvertibleAction<float>.Instance);
            Add(typeof(IMusicTrackGetter)            , "FadeOut"                                   , ConvertibleAction<float>.Instance);
            Add(typeof(ILightGetter)                 , "FadeValue"                                 , ConvertibleAction<float>.Instance);
            Add(typeof(IMaterialObjectGetter)        , "FalloffBias"                               , ConvertibleAction<float>.Instance);
            Add(typeof(ILightGetter)                 , "FalloffExponent"                           , ConvertibleAction<float>.Instance);
            Add(typeof(IMaterialObjectGetter)        , "FalloffScale"                              , ConvertibleAction<float>.Instance);
            Add(typeof(INpcGetter)                   , "FarAwayModel"                              , FormLinkAction<IArmorGetter>.Instance);
            Add(typeof(IEffectShaderGetter)          , "FillAlphaFadeInTime"                       , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "FillAlphaPulseAmplitude"                   , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "FillAlphaPulseFrequency"                   , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "FillColorKey1"                             , BasicAction<Color>.Instance);
            Add(typeof(IEffectShaderGetter)          , "FillColorKey1Scale"                        , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "FillColorKey1Time"                         , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "FillColorKey2"                             , BasicAction<Color>.Instance);
            Add(typeof(IEffectShaderGetter)          , "FillColorKey2Scale"                        , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "FillColorKey2Time"                         , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "FillColorKey3"                             , BasicAction<Color>.Instance);
            Add(typeof(IEffectShaderGetter)          , "FillColorKey3Scale"                        , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "FillColorKey3Time"                         , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "FillFadeOutTime"                           , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "FillFullAlphaRatio"                        , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "FillFullAlphaTime"                         , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "FillPersistentAlphaRatio"                  , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "FillTextureAnimationSpeedU"                , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "FillTextureAnimationSpeedV"                , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "FillTextureScaleU"                         , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "FillTextureScaleV"                         , ConvertibleAction<float>.Instance);
            Add(typeof(IQuestGetter)                 , "Filter"                                    , ConvertibleAction<string>.Instance);
            Add(typeof(IWeaponGetter)                , "FirstPersonModel"                          , FormLinkAction<IStaticGetter>.Instance);
            Add(typeof(IArmorAddonGetter)            , "FirstPersonModel.Female"                   , ModelAction.Instance);
            Add(typeof(IArmorAddonGetter)            , "FirstPersonModel.Male"                     , ModelAction.Instance);
            Add(typeof(IWorldspaceGetter)            , "FixedDimensionsCenterCell.X"               , ConvertibleAction<short>.Instance);
            Add(typeof(IWorldspaceGetter)            , "FixedDimensionsCenterCell.Y"               , ConvertibleAction<short>.Instance);
            Add(null                                 , "Flags"                                     , FlagsAction.Instance);
            Add(typeof(ILightGetter)                 , "FlickerIntensityAmplitude"                 , ConvertibleAction<float>.Instance);
            Add(typeof(ILightGetter)                 , "FlickerMovementAmplitude"                  , ConvertibleAction<float>.Instance);
            Add(typeof(ILightGetter)                 , "FlickerPeriod"                             , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)           , "Flight.DiveBombChance"                     , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)           , "Flight.FlyingAttackChance"                 , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)           , "Flight.GroundAttackChance"                 , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)           , "Flight.GroundAttackTime"                   , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)           , "Flight.HoverChance"                        , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)           , "Flight.HoverTime"                          , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)           , "Flight.PerchAttackChance"                  , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)           , "Flight.PerchAttackTime"                    , ConvertibleAction<float>.Instance);
            Add(typeof(IRaceGetter)                  , "FlightRadius"                              , ConvertibleAction<float>.Instance);
            Add(typeof(ITalkingActivatorGetter)      , "FNAM"                                      , ConvertibleAction<short>.Instance);
            Add(null                                 , "FNAM"                                      , MemorySliceByteAction.Instance);
            Add(typeof(IWaterGetter)                 , "FogAboveWaterAmount"                       , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "FogAboveWaterDistanceFarPlane"             , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "FogAboveWaterDistanceNearPlane"            , ConvertibleAction<float>.Instance);
            Add(typeof(ILightingTemplateGetter)      , "FogClipDistance"                           , ConvertibleAction<float>.Instance);
            Add(typeof(IWeatherGetter)               , "FogDistanceDayFar"                         , ConvertibleAction<float>.Instance);
            Add(typeof(IWeatherGetter)               , "FogDistanceDayMax"                         , ConvertibleAction<float>.Instance);
            Add(typeof(IWeatherGetter)               , "FogDistanceDayNear"                        , ConvertibleAction<float>.Instance);
            Add(typeof(IWeatherGetter)               , "FogDistanceDayPower"                       , ConvertibleAction<float>.Instance);
            Add(typeof(IWeatherGetter)               , "FogDistanceNightFar"                       , ConvertibleAction<float>.Instance);
            Add(typeof(IWeatherGetter)               , "FogDistanceNightMax"                       , ConvertibleAction<float>.Instance);
            Add(typeof(IWeatherGetter)               , "FogDistanceNightNear"                      , ConvertibleAction<float>.Instance);
            Add(typeof(IWeatherGetter)               , "FogDistanceNightPower"                     , ConvertibleAction<float>.Instance);
            Add(typeof(ILightingTemplateGetter)      , "FogFar"                                    , ConvertibleAction<float>.Instance);
            Add(typeof(ILightingTemplateGetter)      , "FogFarColor"                               , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "FogFarColor.Day"                           , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "FogFarColor.Night"                         , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "FogFarColor.Sunrise"                       , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "FogFarColor.Sunset"                        , BasicAction<Color>.Instance);
            Add(typeof(ILightingTemplateGetter)      , "FogMax"                                    , ConvertibleAction<float>.Instance);
            Add(typeof(ILightingTemplateGetter)      , "FogNear"                                   , ConvertibleAction<float>.Instance);
            Add(typeof(ILightingTemplateGetter)      , "FogNearColor"                              , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "FogNearColor.Day"                          , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "FogNearColor.Night"                        , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "FogNearColor.Sunrise"                      , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "FogNearColor.Sunset"                       , BasicAction<Color>.Instance);
            Add(typeof(ILightingTemplateGetter)      , "FogPower"                                  , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "FogUnderWaterAmount"                       , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "FogUnderWaterDistanceFarPlane"             , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "FogUnderWaterDistanceNearPlane"            , ConvertibleAction<float>.Instance);
            Add(typeof(IFactionGetter)               , "FollowerWaitMarker"                        , FormLinkAction<IPlacedObjectGetter>.Instance);
            Add(typeof(IArmorAddonGetter)            , "FootstepSound"                             , FormLinkAction<IFootstepSetGetter>.Instance);
            Add(typeof(IExplosionGetter)             , "Force"                                     , ConvertibleAction<float>.Instance);
            Add(null                                 , "FormVersion"                               , ConvertibleAction<ushort>.Instance);
            Add(typeof(IMovementTypeGetter)          , "ForwardRun"                                , ConvertibleAction<float>.Instance);
            Add(typeof(IMovementTypeGetter)          , "ForwardWalk"                               , ConvertibleAction<float>.Instance);
            Add(typeof(ILightGetter)                 , "FOV"                                       , ConvertibleAction<float>.Instance);
            Add(typeof(INpcGetter)                   , "GiftFilter"                                , FormLinkAction<IFormListGetter>.Instance);
            Add(typeof(ILeveledItemGetter)           , "Global"                                    , FormLinkAction<IGlobalGetter>.Instance);
            Add(typeof(ILeveledNpcGetter)            , "Global"                                    , FormLinkAction<IGlobalGetter>.Instance);
            Add(typeof(IWaterGetter)                 , "GNAM"                                      , MemorySliceByteAction.Instance);
            Add(typeof(ILandscapeTextureGetter)      , "Grasses"                                   , FormLinksAction<IGrassGetter>.Instance);
            Add(typeof(IProjectileGetter)            , "Gravity"                                   , ConvertibleAction<float>.Instance);
            Add(typeof(IShaderParticleGeometryGetter), "GravityVelocity"                           , ConvertibleAction<float>.Instance);
            Add(typeof(ICellGetter)                  , "Grid.Flags"                                , EnumsAction.Instance);
            Add(typeof(ICellGetter)                  , "Grid.Point.X"                              , ConvertibleAction<int>.Instance);
            Add(typeof(ICellGetter)                  , "Grid.Point.Y"                              , ConvertibleAction<int>.Instance);
            Add(typeof(ICombatStyleGetter)           , "GroupOffensiveMult"                        , ConvertibleAction<float>.Instance);
            Add(typeof(INpcGetter)                   , "GuardWarnOverridePackageList"              , FormLinkAction<IFormListGetter>.Instance);
            Add(typeof(IRaceGetter)                  , "HairBipedObject"                           , EnumsAction.Instance);
            Add(typeof(INpcGetter)                   , "HairColor"                                 , FormLinkAction<IColorRecordGetter>.Instance);
            Add(typeof(IRaceGetter)                  , "Hairs"                                     , FormLinksAction<IHairGetter>.Instance);
            Add(typeof(IScrollGetter)                , "HalfCostPerk"                              , FormLinkAction<IPerkGetter>.Instance);
            Add(typeof(ISpellGetter)                 , "HalfCostPerk"                              , FormLinkAction<IPerkGetter>.Instance);
            Add(typeof(IFloraGetter)                 , "HarvestSound"                              , FormLinkAction<ISoundDescriptorGetter>.Instance);
            Add(typeof(ITreeGetter)                  , "HarvestSound"                              , FormLinkAction<ISoundDescriptorGetter>.Instance);
            Add(typeof(IMaterialObjectGetter)        , "HasSnow"                                   , ConvertibleAction<bool>.Instance);
            Add(typeof(IMaterialTypeGetter)          , "HavokDisplayColor"                         , BasicAction<Color>.Instance);
            Add(typeof(ILandscapeTextureGetter)      , "HavokFriction"                             , ConvertibleAction<byte>.Instance);
            Add(typeof(IMaterialTypeGetter)          , "HavokImpactDataSet"                        , FormLinkAction<IImpactDataSetGetter>.Instance);
            Add(typeof(ILandscapeTextureGetter)      , "HavokRestitution"                          , ConvertibleAction<byte>.Instance);
            Add(typeof(IImpactGetter)                , "Hazard"                                    , FormLinkAction<IHazardGetter>.Instance);
            Add(typeof(IImageSpaceGetter)            , "Hdr.BloomBlurRadius"                       , ConvertibleAction<float>.Instance);
            Add(typeof(IImageSpaceGetter)            , "Hdr.BloomScale"                            , ConvertibleAction<float>.Instance);
            Add(typeof(IImageSpaceGetter)            , "Hdr.BloomThreshold"                        , ConvertibleAction<float>.Instance);
            Add(typeof(IImageSpaceGetter)            , "Hdr.EyeAdaptSpeed"                         , ConvertibleAction<float>.Instance);
            Add(typeof(IImageSpaceGetter)            , "Hdr.EyeAdaptStrength"                      , ConvertibleAction<float>.Instance);
            Add(typeof(IImageSpaceGetter)            , "Hdr.ReceiveBloomThreshold"                 , ConvertibleAction<float>.Instance);
            Add(typeof(IImageSpaceGetter)            , "Hdr.SkyScale"                              , ConvertibleAction<float>.Instance);
            Add(typeof(IImageSpaceGetter)            , "Hdr.SunlightScale"                         , ConvertibleAction<float>.Instance);
            Add(typeof(IImageSpaceGetter)            , "Hdr.White"                                 , ConvertibleAction<float>.Instance);
            Add(typeof(IRaceGetter)                  , "HeadBipedObject"                           , EnumsAction.Instance);
            Add(typeof(INpcGetter)                   , "HeadParts"                                 , FormLinksAction<IHeadPartGetter>.Instance);
            Add(typeof(INpcGetter)                   , "HeadTexture"                               , FormLinkAction<ITextureSetGetter>.Instance);
            Add(typeof(INpcGetter)                   , "Height"                                    , ConvertibleAction<float>.Instance);
            Add(typeof(IRaceGetter)                  , "Height.Female"                             , ConvertibleAction<float>.Instance);
            Add(typeof(IRaceGetter)                  , "Height.Male"                               , ConvertibleAction<float>.Instance);
            Add(typeof(IGrassGetter)                 , "HeightRange"                               , ConvertibleAction<float>.Instance);
            Add(typeof(IReverbParametersGetter)      , "HfReferenceHertz"                          , ConvertibleAction<ushort>.Instance);
            Add(typeof(IPerkGetter)                  , "Hidden"                                    , ConvertibleAction<bool>.Instance);
            Add(typeof(IDualCastDataGetter)          , "HitEffectArt"                              , FormLinkAction<IArtObjectGetter>.Instance);
            Add(typeof(IMagicEffectGetter)           , "HitEffectArt"                              , FormLinkAction<IArtObjectGetter>.Instance);
            Add(typeof(IMagicEffectGetter)           , "HitShader"                                 , FormLinkAction<IEffectShaderGetter>.Instance);
            Add(typeof(IMagicEffectGetter)           , "HitVisuals"                                , FormLinkAction<IVisualEffectGetter>.Instance);
            Add(typeof(IEffectShaderGetter)          , "HolesEndTime"                              , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "HolesEndValue"                             , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "HolesStartTime"                            , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "HolesStartValue"                           , ConvertibleAction<float>.Instance);
            Add(typeof(IWeatherGetter)               , "HorizonColor.Day"                          , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "HorizonColor.Night"                        , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "HorizonColor.Sunrise"                      , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "HorizonColor.Sunset"                       , BasicAction<Color>.Instance);
            Add(typeof(ILocationGetter)              , "HorseMarkerRef"                            , FormLinkAction<IPlacedObjectGetter>.Instance);
            Add(typeof(IClassGetter)                 , "Icon"                                      , ConvertibleAction<string>.Instance);
            Add(typeof(IPackageGetter)               , "IdleAnimations.Animations"                 , FormLinksAction<IIdleAnimationGetter>.Instance);
            Add(typeof(IPackageGetter)               , "IdleAnimations.TimerSetting"               , ConvertibleAction<float>.Instance);
            Add(typeof(IPackageGetter)               , "IdleAnimations.Type"                       , EnumsAction.Instance);
            Add(typeof(IWeaponGetter)                , "IdleSound"                                 , FormLinkAction<ISoundDescriptorGetter>.Instance);
            Add(typeof(IIdleMarkerGetter)            , "IdleTimer"                                 , ConvertibleAction<float>.Instance);
            Add(typeof(ICellGetter)                  , "ImageSpace"                                , FormLinkAction<IImageSpaceGetter>.Instance);
            Add(typeof(IWaterGetter)                 , "ImageSpace"                                , FormLinkAction<IImageSpaceGetter>.Instance);
            Add(null                                 , "ImageSpaceModifier"                        , FormLinkAction<IImageSpaceAdapterGetter>.Instance);
            Add(typeof(IHazardGetter)                , "ImageSpaceRadius"                          , ConvertibleAction<float>.Instance);
            Add(typeof(IWeatherGetter)               , "ImageSpaces.Day"                           , FormLinkAction<IImageSpaceGetter>.Instance);
            Add(typeof(IWeatherGetter)               , "ImageSpaces.Night"                         , FormLinkAction<IImageSpaceGetter>.Instance);
            Add(typeof(IWeatherGetter)               , "ImageSpaces.Sunrise"                       , FormLinkAction<IImageSpaceGetter>.Instance);
            Add(typeof(IWeatherGetter)               , "ImageSpaces.Sunset"                        , FormLinkAction<IImageSpaceGetter>.Instance);
            Add(typeof(IMagicEffectGetter)           , "ImpactData"                                , FormLinkAction<IImpactDataSetGetter>.Instance);
            Add(null                                 , "ImpactDataSet"                             , FormLinkAction<IImpactDataSetGetter>.Instance);
            Add(typeof(IProjectileGetter)            , "ImpactForce"                               , ConvertibleAction<float>.Instance);
            Add(typeof(IMessageGetter)               , "INAM"                                      , MemorySliceByteAction.Instance);
            Add(typeof(ICollisionLayerGetter)        , "Index"                                     , ConvertibleAction<uint>.Instance);
            Add(typeof(IFloraGetter)                 , "Ingredient"                                , FormLinkAction<IHarvestTargetGetter>.Instance);
            Add(typeof(ITreeGetter)                  , "Ingredient"                                , FormLinkAction<IHarvestTargetGetter>.Instance);
            Add(typeof(IIngredientGetter)            , "IngredientValue"                           , ConvertibleAction<int>.Instance);
            Add(typeof(IDualCastDataGetter)          , "InheritScale"                              , FlagsAction.Instance);
            Add(typeof(ILoadScreenGetter)            , "InitialRotation.X"                         , ConvertibleAction<short>.Instance);
            Add(typeof(ILoadScreenGetter)            , "InitialRotation.Y"                         , ConvertibleAction<short>.Instance);
            Add(typeof(ILoadScreenGetter)            , "InitialRotation.Z"                         , ConvertibleAction<short>.Instance);
            Add(typeof(IShaderParticleGeometryGetter), "InitialRotationRange"                      , ConvertibleAction<float>.Instance);
            Add(typeof(ILoadScreenGetter)            , "InitialScale"                              , ConvertibleAction<float>.Instance);
            Add(typeof(ILoadScreenGetter)            , "InitialTranslationOffset.X"                , ConvertibleAction<float>.Instance);
            Add(typeof(ILoadScreenGetter)            , "InitialTranslationOffset.Y"                , ConvertibleAction<float>.Instance);
            Add(typeof(ILoadScreenGetter)            , "InitialTranslationOffset.Z"                , ConvertibleAction<float>.Instance);
            Add(typeof(IRaceGetter)                  , "InjuredHealthPercent"                      , ConvertibleAction<float>.Instance);
            Add(typeof(IActivatorGetter)             , "InteractionKeyword"                        , FormLinkAction<IKeywordGetter>.Instance);
            Add(typeof(IFurnitureGetter)             , "InteractionKeyword"                        , FormLinkAction<IKeywordGetter>.Instance);
            Add(typeof(IWorldspaceGetter)            , "InteriorLighting"                          , FormLinkAction<ILightingTemplateGetter>.Instance);
            Add(typeof(IPackageGetter)               , "InterruptOverride"                         , EnumsAction.Instance);
            Add(typeof(IPackageGetter)               , "InteruptFlags"                             , FlagsAction.Instance);
            Add(typeof(IBookGetter)                  , "InventoryArt"                              , FormLinkAction<IStaticGetter>.Instance);
            Add(typeof(IAssociationTypeGetter)       , "IsFamily"                                  , ConvertibleAction<bool>.Instance);
            Add(typeof(IExplosionGetter)             , "ISRadius"                                  , ConvertibleAction<float>.Instance);
            Add(typeof(IFormListGetter)              , "Items"                                     , FormLinksAction<ISkyrimMajorRecordGetter>.Instance);
            Add(typeof(IOutfitGetter)                , "Items"                                     , FormLinksAction<IOutfitTargetGetter>.Instance);
            Add(null                                 , "Items"                                     , ContainerItemsAction.Instance);
            Add(typeof(IFactionGetter)               , "JailOutfit"                                , FormLinkAction<IOutfitGetter>.Instance);
            Add(null                                 , "Keywords"                                  , FormLinksAction<IKeywordGetter>.Instance);
            Add(typeof(IWorldspaceGetter)            , "LandDefaults.DefaultLandHeight"            , ConvertibleAction<float>.Instance);
            Add(typeof(IWorldspaceGetter)            , "LandDefaults.DefaultWaterHeight"           , ConvertibleAction<float>.Instance);
            Add(typeof(ISceneGetter)                 , "LastActionIndex"                           , ConvertibleAction<uint>.Instance);
            Add(typeof(ITreeGetter)                  , "LeafAmplitude"                             , ConvertibleAction<float>.Instance);
            Add(typeof(ITreeGetter)                  , "LeafFrequency"                             , ConvertibleAction<float>.Instance);
            Add(typeof(IMovementTypeGetter)          , "LeftRun"                                   , ConvertibleAction<float>.Instance);
            Add(typeof(IMovementTypeGetter)          , "LeftWalk"                                  , ConvertibleAction<float>.Instance);
            Add(typeof(ILightGetter)                 , "Lens"                                      , FormLinkAction<ILensFlareGetter>.Instance);
            Add(typeof(IPerkGetter)                  , "Level"                                     , ConvertibleAction<byte>.Instance);
            Add(typeof(IHazardGetter)                , "Lifetime"                                  , ConvertibleAction<float>.Instance);
            Add(typeof(IProjectileGetter)            , "Lifetime"                                  , ConvertibleAction<float>.Instance);
            Add(null                                 , "Light"                                     , FormLinkAction<ILightGetter>.Instance);
            Add(typeof(ILightingTemplateGetter)      , "LightFadeEndDistance"                      , ConvertibleAction<float>.Instance);
            Add(typeof(ILightingTemplateGetter)      , "LightFadeStartDistance"                    , ConvertibleAction<float>.Instance);
            Add(typeof(ICellGetter)                  , "Lighting.AmbientColor"                     , BasicAction<Color>.Instance);
            Add(typeof(ICellGetter)                  , "Lighting.DirectionalColor"                 , BasicAction<Color>.Instance);
            Add(typeof(ICellGetter)                  , "Lighting.DirectionalFade"                  , ConvertibleAction<float>.Instance);
            Add(typeof(ICellGetter)                  , "Lighting.DirectionalRotationXY"            , ConvertibleAction<int>.Instance);
            Add(typeof(ICellGetter)                  , "Lighting.DirectionalRotationZ"             , ConvertibleAction<int>.Instance);
            Add(typeof(ICellGetter)                  , "Lighting.FogClipDistance"                  , ConvertibleAction<float>.Instance);
            Add(typeof(ICellGetter)                  , "Lighting.FogFar"                           , ConvertibleAction<float>.Instance);
            Add(typeof(ICellGetter)                  , "Lighting.FogFarColor"                      , BasicAction<Color>.Instance);
            Add(typeof(ICellGetter)                  , "Lighting.FogMax"                           , ConvertibleAction<float>.Instance);
            Add(typeof(ICellGetter)                  , "Lighting.FogNear"                          , ConvertibleAction<float>.Instance);
            Add(typeof(ICellGetter)                  , "Lighting.FogNearColor"                     , BasicAction<Color>.Instance);
            Add(typeof(ICellGetter)                  , "Lighting.FogPower"                         , ConvertibleAction<float>.Instance);
            Add(typeof(ICellGetter)                  , "Lighting.Inherits"                         , FlagsAction.Instance);
            Add(typeof(ICellGetter)                  , "Lighting.LightFadeBegin"                   , ConvertibleAction<float>.Instance);
            Add(typeof(ICellGetter)                  , "Lighting.LightFadeEnd"                     , ConvertibleAction<float>.Instance);
            Add(typeof(ICellGetter)                  , "LightingTemplate"                          , FormLinkAction<ILightingTemplateGetter>.Instance);
            Add(typeof(IWeatherGetter)               , "LightningColor"                            , BasicAction<Color>.Instance);
            Add(typeof(IHazardGetter)                , "Limit"                                     , ConvertibleAction<uint>.Instance);
            Add(typeof(IWaterGetter)                 , "LinearVelocity.X"                          , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "LinearVelocity.Y"                          , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "LinearVelocity.Z"                          , ConvertibleAction<float>.Instance);
            Add(typeof(ISoulGemGetter)               , "LinkedTo"                                  , FormLinkAction<ISoulGemGetter>.Instance);
            Add(typeof(ICellGetter)                  , "LNAM"                                      , MemorySliceByteAction.Instance);
            Add(typeof(IWeatherGetter)               , "LNAM"                                      , MemorySliceByteAction.Instance);
            Add(typeof(ILoadScreenGetter)            , "LoadingScreenNif"                          , FormLinkAction<IStaticGetter>.Instance);
            Add(typeof(ICameraShotGetter)            , "Location"                                  , EnumsAction.Instance);
            Add(null                                 , "Location"                                  , FormLinkAction<ILocationGetter>.Instance);
            Add(typeof(ILocationGetter)              , "LocationCellMarkerReference"               , FormLinksAction<IPlacedGetter>.Instance);
            Add(typeof(ICellGetter)                  , "LockList"                                  , FormLinkAction<ILockListGetter>.Instance);
            Add(typeof(IWorldspaceGetter)            , "LodWater"                                  , FormLinkAction<IWaterGetter>.Instance);
            Add(typeof(IWorldspaceGetter)            , "LodWaterHeight"                            , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)           , "LongRangeStrafeMult"                       , ConvertibleAction<float>.Instance);
            Add(typeof(ISoundDescriptorGetter)       , "LoopAndRumble.Loop"                        , EnumsAction.Instance);
            Add(typeof(ISoundDescriptorGetter)       , "LoopAndRumble.RumbleValues"                , ConvertibleAction<byte>.Instance);
            Add(typeof(IMusicTrackGetter)            , "LoopData.Begins"                           , ConvertibleAction<float>.Instance);
            Add(typeof(IMusicTrackGetter)            , "LoopData.Count"                            , ConvertibleAction<uint>.Instance);
            Add(typeof(IMusicTrackGetter)            , "LoopData.Ends"                             , ConvertibleAction<float>.Instance);
            Add(typeof(IIdleAnimationGetter)         , "LoopingSecondsMax"                         , ConvertibleAction<byte>.Instance);
            Add(typeof(IIdleAnimationGetter)         , "LoopingSecondsMin"                         , ConvertibleAction<byte>.Instance);
            Add(typeof(IActivatorGetter)             , "LoopingSound"                              , FormLinkAction<ISoundDescriptorGetter>.Instance);
            Add(typeof(IMoveableStaticGetter)        , "LoopingSound"                              , FormLinkAction<ISoundDescriptorGetter>.Instance);
            Add(typeof(ITalkingActivatorGetter)      , "LoopingSound"                              , FormLinkAction<ISoundMarkerGetter>.Instance);
            Add(typeof(IDoorGetter)                  , "LoopSound"                                 , FormLinkAction<ISoundDescriptorGetter>.Instance);
            Add(typeof(IMagicEffectGetter)           , "MagicSkill"                                , EnumsAction.Instance);
            Add(null                                 , "MajorFlags"                                , FlagsAction.Instance);
            Add(typeof(IRegionGetter)                , "MapColor"                                  , BasicAction<Color>.Instance);
            Add(typeof(IWorldspaceGetter)            , "MapData.CameraInitialPitch"                , ConvertibleAction<float>.Instance);
            Add(typeof(IWorldspaceGetter)            , "MapData.CameraMaxHeight"                   , ConvertibleAction<float>.Instance);
            Add(typeof(IWorldspaceGetter)            , "MapData.CameraMinHeight"                   , ConvertibleAction<float>.Instance);
            Add(typeof(IWorldspaceGetter)            , "MapData.NorthwestCellCoords.X"             , ConvertibleAction<short>.Instance);
            Add(typeof(IWorldspaceGetter)            , "MapData.NorthwestCellCoords.Y"             , ConvertibleAction<short>.Instance);
            Add(typeof(IWorldspaceGetter)            , "MapData.SoutheastCellCoords.X"             , ConvertibleAction<short>.Instance);
            Add(typeof(IWorldspaceGetter)            , "MapData.SoutheastCellCoords.Y"             , ConvertibleAction<short>.Instance);
            Add(typeof(IWorldspaceGetter)            , "MapData.UsableDimensions.X"                , ConvertibleAction<int>.Instance);
            Add(typeof(IWorldspaceGetter)            , "MapData.UsableDimensions.Y"                , ConvertibleAction<int>.Instance);
            Add(typeof(IActivatorGetter)             , "MarkerColor"                               , BasicAction<Color>.Instance);
            Add(typeof(IAddonNodeGetter)             , "MasterParticleSystemCap"                   , ConvertibleAction<ushort>.Instance);
            Add(typeof(IStaticGetter)                , "Material"                                  , FormLinkAction<IMaterialObjectGetter>.Instance);
            Add(typeof(IWaterGetter)                 , "Material"                                  , FormLinkAction<IMaterialTypeGetter>.Instance);
            Add(typeof(ILandscapeTextureGetter)      , "MaterialType"                              , FormLinkAction<IMaterialTypeGetter>.Instance);
            Add(typeof(IRaceGetter)                  , "MaterialType"                              , FormLinkAction<IMaterialTypeGetter>.Instance);
            Add(typeof(IMaterialObjectGetter)        , "MaterialUvScale"                           , ConvertibleAction<float>.Instance);
            Add(typeof(IStaticGetter)                , "MaxAngle"                                  , ConvertibleAction<float>.Instance);
            Add(typeof(IWorldspaceGetter)            , "MaxHeight"                                 , WorldspaceMaxHeightAction.Instance);
            Add(typeof(ICellGetter)                  , "MaxHeightData"                             , CellMaxHeightDataAction.Instance);
            Add(typeof(ISoulGemGetter)               , "MaximumCapacity"                           , EnumsAction.Instance);
            Add(typeof(IEncounterZoneGetter)         , "MaxLevel"                                  , ConvertibleAction<sbyte>.Instance);
            Add(typeof(IGrassGetter)                 , "MaxSlope"                                  , ConvertibleAction<byte>.Instance);
            Add(typeof(ICameraShotGetter)            , "MaxTime"                                   , ConvertibleAction<float>.Instance);
            Add(typeof(IClassGetter)                 , "MaxTrainingLevel"                          , ConvertibleAction<byte>.Instance);
            Add(typeof(ICombatStyleGetter)           , "Melee.AttackStaggeredMult"                 , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)           , "Melee.BashAttackMult"                      , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)           , "Melee.BashMult"                            , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)           , "Melee.BashPowerAttackMult"                 , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)           , "Melee.BashRecoilMult"                      , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)           , "Melee.PowerAttackBlockingMult"             , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)           , "Melee.PowerAttackStaggeredMult"            , ConvertibleAction<float>.Instance);
            Add(typeof(ICombatStyleGetter)           , "Melee.SpecialAttackMult"                   , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "MembraneBlendOperation"                    , EnumsAction.Instance);
            Add(typeof(IEffectShaderGetter)          , "MembraneDestBlendMode"                     , EnumsAction.Instance);
            Add(typeof(IEffectShaderGetter)          , "MembraneSourceBlendMode"                   , EnumsAction.Instance);
            Add(typeof(IEffectShaderGetter)          , "MembraneZTest"                             , EnumsAction.Instance);
            Add(null                                 , "MenuDisplayObject"                         , FormLinkAction<IStaticGetter>.Instance);
            Add(typeof(IFactionGetter)               , "MerchantContainer"                         , FormLinkAction<IPlacedObjectGetter>.Instance);
            Add(typeof(IMagicEffectGetter)           , "MinimumSkillLevel"                         , ConvertibleAction<uint>.Instance);
            Add(typeof(IEncounterZoneGetter)         , "MinLevel"                                  , ConvertibleAction<sbyte>.Instance);
            Add(typeof(IGrassGetter)                 , "MinSlope"                                  , ConvertibleAction<byte>.Instance);
            Add(typeof(ICameraShotGetter)            , "MinTime"                                   , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "MNAM"                                      , MemorySliceByteAction.Instance);
            Add(null                                 , "Model"                                     , ModelAction.Instance);
            Add(typeof(IWeatherGetter)               , "MoonGlareColor.Day"                        , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "MoonGlareColor.Night"                      , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "MoonGlareColor.Sunrise"                    , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "MoonGlareColor.Sunset"                     , BasicAction<Color>.Instance);
            Add(typeof(IClimateGetter)               , "Moons"                                     , FlagsAction.Instance);
            Add(typeof(IRaceGetter)                  , "MorphRace"                                 , FormLinkAction<IRaceGetter>.Instance);
            Add(typeof(IRaceGetter)                  , "MountData.DismountOffset.X"                , ConvertibleAction<float>.Instance);
            Add(typeof(IRaceGetter)                  , "MountData.DismountOffset.Y"                , ConvertibleAction<float>.Instance);
            Add(typeof(IRaceGetter)                  , "MountData.DismountOffset.Z"                , ConvertibleAction<float>.Instance);
            Add(typeof(IRaceGetter)                  , "MountData.MountCameraOffset.X"             , ConvertibleAction<float>.Instance);
            Add(typeof(IRaceGetter)                  , "MountData.MountCameraOffset.Y"             , ConvertibleAction<float>.Instance);
            Add(typeof(IRaceGetter)                  , "MountData.MountCameraOffset.Z"             , ConvertibleAction<float>.Instance);
            Add(typeof(IRaceGetter)                  , "MountData.MountOffset.X"                   , ConvertibleAction<float>.Instance);
            Add(typeof(IRaceGetter)                  , "MountData.MountOffset.Y"                   , ConvertibleAction<float>.Instance);
            Add(typeof(IRaceGetter)                  , "MountData.MountOffset.Z"                   , ConvertibleAction<float>.Instance);
            Add(null                                 , "Music"                                     , FormLinkAction<IMusicTypeGetter>.Instance);
            Add(typeof(IProjectileGetter)            , "MuzzleFlash"                               , FormLinkAction<ILightGetter>.Instance);
            Add(typeof(IProjectileGetter)            , "MuzzleFlashDuration"                       , ConvertibleAction<float>.Instance);
            Add(typeof(IWeatherGetter)               , "NAM0DataTypeState"                         , FlagsAction.Instance);
            Add(typeof(IWeatherGetter)               , "NAM2"                                      , MemorySliceByteAction.Instance);
            Add(typeof(IWeatherGetter)               , "NAM3"                                      , MemorySliceByteAction.Instance);
            Add(typeof(INpcGetter)                   , "NAM5"                                      , ConvertibleAction<ushort>.Instance);
            Add(null                                 , "Name"                                      , ConvertibleAction<string>.Instance);
            Add(typeof(ILightGetter)                 , "NearClip"                                  , ConvertibleAction<float>.Instance);
            Add(typeof(ICameraShotGetter)            , "NearTargetDistance"                        , ConvertibleAction<float>.Instance);
            Add(typeof(IQuestGetter)                 , "NextAliasID"                               , ConvertibleAction<uint>.Instance);
            Add(typeof(IPerkGetter)                  , "NextPerk"                                  , FormLinkAction<IPerkGetter>.Instance);
            Add(typeof(IImpactGetter)                , "NoDecalData"                               , ConvertibleAction<bool>.Instance);
            Add(typeof(IAddonNodeGetter)             , "NodeIndex"                                 , ConvertibleAction<int>.Instance);
            Add(typeof(IWaterGetter)                 , "NoiseFalloff"                              , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "NoiseFlowmapScale"                         , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "NoiseLayerOneAmplitudeScale"               , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "NoiseLayerOneUvScale"                      , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "NoiseLayerOneWindDirection"                , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "NoiseLayerOneWindSpeed"                    , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "NoiseLayerThreeAmplitudeScale"             , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "NoiseLayerThreeUvScale"                    , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "NoiseLayerThreeWindDirection"              , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "NoiseLayerThreeWindSpeed"                  , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "NoiseLayerTwoAmplitudeScale"               , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "NoiseLayerTwoUvScale"                      , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "NoiseLayerTwoWindDirection"                , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "NoiseLayerTwoWindSpeed"                    , ConvertibleAction<float>.Instance);
            Add(typeof(IMaterialObjectGetter)        , "NoiseUvScale"                              , ConvertibleAction<float>.Instance);
            Add(typeof(IMaterialObjectGetter)        , "NormalDampener"                            , ConvertibleAction<float>.Instance);
            Add(typeof(IRaceGetter)                  , "NumberOfTintsInList"                       , ConvertibleAction<ushort>.Instance);
            Add(typeof(IPerkGetter)                  , "NumRanks"                                  , ConvertibleAction<byte>.Instance);
            Add(typeof(IShaderParticleGeometryGetter), "NumSubtexturesX"                           , ConvertibleAction<uint>.Instance);
            Add(typeof(IShaderParticleGeometryGetter), "NumSubtexturesY"                           , ConvertibleAction<uint>.Instance);
            Add(null                                 , "ObjectBounds"                              , ObjectBoundsAction.Instance);
            Add(null                                 , "ObjectBounds.First.X"                      , ConvertibleAction<short>.Instance);
            Add(null                                 , "ObjectBounds.First.Y"                      , ConvertibleAction<short>.Instance);
            Add(null                                 , "ObjectBounds.First.Z"                      , ConvertibleAction<short>.Instance);
            Add(null                                 , "ObjectBounds.Second.X"                     , ConvertibleAction<short>.Instance);
            Add(null                                 , "ObjectBounds.Second.Y"                     , ConvertibleAction<short>.Instance);
            Add(null                                 , "ObjectBounds.Second.Z"                     , ConvertibleAction<short>.Instance);
            Add(typeof(IWorldspaceGetter)            , "ObjectBoundsMax.X"                         , ConvertibleAction<float>.Instance);
            Add(typeof(IWorldspaceGetter)            , "ObjectBoundsMax.Y"                         , ConvertibleAction<float>.Instance);
            Add(typeof(IWorldspaceGetter)            , "ObjectBoundsMin.X"                         , ConvertibleAction<float>.Instance);
            Add(typeof(IWorldspaceGetter)            , "ObjectBoundsMin.Y"                         , ConvertibleAction<float>.Instance);
            Add(null                                 , "ObjectEffect"                              , FormLinkAction<IEffectRecordGetter>.Instance);
            Add(typeof(INpcGetter)                   , "ObserveDeadBodyOverridePackageList"        , FormLinkAction<IFormListGetter>.Instance);
            Add(typeof(ICellGetter)                  , "OcclusionData"                             , MemorySliceByteAction.Instance);
            Add(typeof(ICombatStyleGetter)           , "OffensiveMult"                             , ConvertibleAction<float>.Instance);
            Add(typeof(IWorldspaceGetter)            , "OffsetData"                                , MemorySliceByteAction.Instance);
            Add(typeof(IWeatherGetter)               , "ONAM"                                      , MemorySliceByteAction.Instance);
            Add(typeof(IPackageGetter)               , "OnBegin.Idle"                              , FormLinkAction<IIdleAnimationGetter>.Instance);
            Add(typeof(IPackageGetter)               , "OnBegin.QNAM"                              , MemorySliceByteAction.Instance);
            Add(typeof(IPackageGetter)               , "OnBegin.SCDA"                              , MemorySliceByteAction.Instance);
            Add(typeof(IPackageGetter)               , "OnBegin.SCHR"                              , MemorySliceByteAction.Instance);
            Add(typeof(IPackageGetter)               , "OnBegin.SCTX"                              , MemorySliceByteAction.Instance);
            Add(typeof(IPackageGetter)               , "OnBegin.TNAM"                              , MemorySliceByteAction.Instance);
            Add(typeof(IPackageGetter)               , "OnChange.Idle"                             , FormLinkAction<IIdleAnimationGetter>.Instance);
            Add(typeof(IPackageGetter)               , "OnChange.QNAM"                             , MemorySliceByteAction.Instance);
            Add(typeof(IPackageGetter)               , "OnChange.SCDA"                             , MemorySliceByteAction.Instance);
            Add(typeof(IPackageGetter)               , "OnChange.SCHR"                             , MemorySliceByteAction.Instance);
            Add(typeof(IPackageGetter)               , "OnChange.SCTX"                             , MemorySliceByteAction.Instance);
            Add(typeof(IPackageGetter)               , "OnChange.TNAM"                             , MemorySliceByteAction.Instance);
            Add(typeof(IPackageGetter)               , "OnEnd.Idle"                                , FormLinkAction<IIdleAnimationGetter>.Instance);
            Add(typeof(IPackageGetter)               , "OnEnd.QNAM"                                , MemorySliceByteAction.Instance);
            Add(typeof(IPackageGetter)               , "OnEnd.SCDA"                                , MemorySliceByteAction.Instance);
            Add(typeof(IPackageGetter)               , "OnEnd.SCHR"                                , MemorySliceByteAction.Instance);
            Add(typeof(IPackageGetter)               , "OnEnd.SCTX"                                , MemorySliceByteAction.Instance);
            Add(typeof(IPackageGetter)               , "OnEnd.TNAM"                                , MemorySliceByteAction.Instance);
            Add(typeof(IWaterGetter)                 , "Opacity"                                   , ConvertibleAction<byte>.Instance);
            Add(typeof(IRaceGetter)                  , "OpenLootSound"                             , FormLinkAction<ISoundDescriptorGetter>.Instance);
            Add(null                                 , "OpenSound"                                 , FormLinkAction<ISoundDescriptorGetter>.Instance);
            Add(typeof(IImpactGetter)                , "Orientation"                               , EnumsAction.Instance);
            Add(typeof(ISoundDescriptorGetter)       , "OutputModel"                               , FormLinkAction<ISoundOutputModelGetter>.Instance);
            Add(typeof(ICellGetter)                  , "Owner"                                     , FormLinkAction<IOwnerGetter>.Instance);
            Add(typeof(IEncounterZoneGetter)         , "Owner"                                     , FormLinkAction<IOwnerGetter>.Instance);
            Add(typeof(IPackageGetter)               , "OwnerQuest"                                , FormLinkAction<IQuestGetter>.Instance);
            Add(typeof(INpcGetter)                   , "Packages"                                  , FormLinksAction<IPackageGetter>.Instance);
            Add(typeof(IPackageGetter)               , "PackageTemplate"                           , FormLinkAction<IPackageGetter>.Instance);
            Add(typeof(IMaterialTypeGetter)          , "Parent"                                    , FormLinkAction<IMaterialTypeGetter>.Instance);
            Add(typeof(IRelationshipGetter)          , "Parent"                                    , FormLinkAction<INpcGetter>.Instance);
            Add(typeof(ISoundCategoryGetter)         , "Parent"                                    , FormLinkAction<ISoundCategoryGetter>.Instance);
            Add(typeof(IWorldspaceGetter)            , "Parent.Flags"                              , FlagsAction.Instance);
            Add(typeof(IWorldspaceGetter)            , "Parent.Worldspace"                         , FormLinkAction<IWorldspaceGetter>.Instance);
            Add(typeof(ILocationGetter)              , "ParentLocation"                            , FormLinkAction<ILocationGetter>.Instance);
            Add(typeof(IAssociationTypeGetter)       , "ParentTitle.Female"                        , ConvertibleAction<string>.Instance);
            Add(typeof(IAssociationTypeGetter)       , "ParentTitle.Male"                          , ConvertibleAction<string>.Instance);
            Add(typeof(IEffectShaderGetter)          , "ParticleAcceleration1"                     , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "ParticleAcceleration2"                     , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "ParticleAcceleration3"                     , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "ParticleAccelerationAlongNormal"           , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "ParticleAnimatedEndFrame"                  , ConvertibleAction<uint>.Instance);
            Add(typeof(IEffectShaderGetter)          , "ParticleAnimatedFrameCount"                , ConvertibleAction<uint>.Instance);
            Add(typeof(IEffectShaderGetter)          , "ParticleAnimatedFrameCountVariation"       , ConvertibleAction<uint>.Instance);
            Add(typeof(IEffectShaderGetter)          , "ParticleAnimatedLoopStartFrame"            , ConvertibleAction<uint>.Instance);
            Add(typeof(IEffectShaderGetter)          , "ParticleAnimatedLoopStartVariation"        , ConvertibleAction<uint>.Instance);
            Add(typeof(IEffectShaderGetter)          , "ParticleAnimatedStartFrame"                , ConvertibleAction<uint>.Instance);
            Add(typeof(IEffectShaderGetter)          , "ParticleAnimatedStartFrameVariation"       , ConvertibleAction<uint>.Instance);
            Add(typeof(IEffectShaderGetter)          , "ParticleBirthRampDownTime"                 , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "ParticleBirthRampUpTime"                   , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "ParticleBlendOperation"                    , EnumsAction.Instance);
            Add(typeof(IShaderParticleGeometryGetter), "ParticleDensity"                           , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "ParticleDestBlendMode"                     , EnumsAction.Instance);
            Add(typeof(IEffectShaderGetter)          , "ParticleFullBirthRatio"                    , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "ParticleFullBirthTime"                     , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "ParticleInitialRotationDegree"             , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "ParticleInitialRotationDegreePlusMinus"    , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "ParticleInitialSpeedAlongNormal"           , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "ParticleInitialSpeedAlongNormalPlusMinus"  , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "ParticleInitialVelocity1"                  , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "ParticleInitialVelocity2"                  , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "ParticleInitialVelocity3"                  , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "ParticleLifetime"                          , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "ParticleLifetimePlusMinus"                 , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "ParticlePeristentCount"                    , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "ParticleRotationSpeedDegreePerSec"         , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "ParticleRotationSpeedDegreePerSecPlusMinus", ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "ParticleScaleKey1"                         , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "ParticleScaleKey1Time"                     , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "ParticleScaleKey2"                         , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "ParticleScaleKey2Time"                     , ConvertibleAction<float>.Instance);
            Add(typeof(IShaderParticleGeometryGetter), "ParticleSizeX"                             , ConvertibleAction<float>.Instance);
            Add(typeof(IShaderParticleGeometryGetter), "ParticleSizeY"                             , ConvertibleAction<float>.Instance);
            Add(typeof(IEffectShaderGetter)          , "ParticleSourceBlendMode"                   , EnumsAction.Instance);
            Add(typeof(IEffectShaderGetter)          , "ParticleZTest"                             , EnumsAction.Instance);
            Add(typeof(ISoundDescriptorGetter)       , "PercentFrequencyShift"                     , BasicAction<Percent>.Instance);
            Add(typeof(ISoundDescriptorGetter)       , "PercentFrequencyVariance"                  , BasicAction<Percent>.Instance);
            Add(typeof(IMagicEffectGetter)           , "PerkToApply"                               , FormLinkAction<IPerkGetter>.Instance);
            Add(typeof(IClimateGetter)               , "PhaseLength"                               , ConvertibleAction<byte>.Instance);
            Add(null                                 , "PickUpSound"                               , FormLinkAction<ISoundDescriptorGetter>.Instance);
            Add(typeof(IExplosionGetter)             , "PlacedObject"                              , FormLinkAction<IExplodeSpawnGetter>.Instance);
            Add(typeof(IImpactGetter)                , "PlacementRadius"                           , ConvertibleAction<float>.Instance);
            Add(typeof(IColorRecordGetter)           , "Playable"                                  , ConvertibleAction<bool>.Instance);
            Add(typeof(IPerkGetter)                  , "Playable"                                  , ConvertibleAction<bool>.Instance);
            Add(typeof(IFactionGetter)               , "PlayerInventoryContainer"                  , FormLinkAction<IPlacedObjectGetter>.Instance);
            Add(typeof(INpcGetter)                   , "PlayerSkills"                              , PlayerSkillsAction.Instance);
            Add(typeof(INpcGetter)                   , "PlayerSkills.FarAwayModelDistance"         , ConvertibleAction<float>.Instance);
            Add(typeof(INpcGetter)                   , "PlayerSkills.GearedUpWeapons"              , ConvertibleAction<byte>.Instance);
            Add(typeof(INpcGetter)                   , "PlayerSkills.Health"                       , ConvertibleAction<ushort>.Instance);
            Add(typeof(INpcGetter)                   , "PlayerSkills.Magicka"                      , ConvertibleAction<ushort>.Instance);
            Add(typeof(INpcGetter)                   , "PlayerSkills.Stamina"                      , ConvertibleAction<ushort>.Instance);
            Add(typeof(IFloraGetter)                 , "PNAM"                                      , MemorySliceByteAction.Instance);
            Add(typeof(IFurnitureGetter)             , "PNAM"                                      , MemorySliceByteAction.Instance);
            Add(typeof(ITalkingActivatorGetter)      , "PNAM"                                      , ConvertibleAction<int>.Instance);
            Add(typeof(IGrassGetter)                 , "PositionRange"                             , ConvertibleAction<float>.Instance);
            Add(typeof(IWeatherGetter)               , "Precipitation"                             , FormLinkAction<IShaderParticleGeometryGetter>.Instance);
            Add(typeof(IWeatherGetter)               , "PrecipitationBeginFadeIn"                  , BasicAction<Percent>.Instance);
            Add(typeof(IWeatherGetter)               , "PrecipitationEndFadeOut"                   , BasicAction<Percent>.Instance);
            Add(typeof(IPackageGetter)               , "PreferredSpeed"                            , EnumsAction.Instance);
            Add(typeof(IDialogTopicGetter)           , "Priority"                                  , ConvertibleAction<float>.Instance);
            Add(typeof(IQuestGetter)                 , "Priority"                                  , ConvertibleAction<byte>.Instance);
            Add(typeof(ISoundDescriptorGetter)       , "Priority"                                  , ConvertibleAction<sbyte>.Instance);
            Add(typeof(IArmorAddonGetter)            , "Priority.Female"                           , ConvertibleAction<byte>.Instance);
            Add(typeof(IArmorAddonGetter)            , "Priority.Male"                             , ConvertibleAction<byte>.Instance);
            Add(typeof(IFloraGetter)                 , "Production.Fall"                           , ConvertibleAction<byte>.Instance);
            Add(typeof(ITreeGetter)                  , "Production.Fall"                           , ConvertibleAction<byte>.Instance);
            Add(typeof(IFloraGetter)                 , "Production.Spring"                         , ConvertibleAction<byte>.Instance);
            Add(typeof(ITreeGetter)                  , "Production.Spring"                         , ConvertibleAction<byte>.Instance);
            Add(typeof(IFloraGetter)                 , "Production.Summer"                         , ConvertibleAction<byte>.Instance);
            Add(typeof(ITreeGetter)                  , "Production.Summer"                         , ConvertibleAction<byte>.Instance);
            Add(typeof(IFloraGetter)                 , "Production.Winter"                         , ConvertibleAction<byte>.Instance);
            Add(typeof(ITreeGetter)                  , "Production.Winter"                         , ConvertibleAction<byte>.Instance);
            Add(null                                 , "Projectile"                                , FormLinkAction<IProjectileGetter>.Instance);
            Add(typeof(IMaterialObjectGetter)        , "ProjectionVector.X"                        , ConvertibleAction<float>.Instance);
            Add(typeof(IMaterialObjectGetter)        , "ProjectionVector.Y"                        , ConvertibleAction<float>.Instance);
            Add(typeof(IMaterialObjectGetter)        , "ProjectionVector.Z"                        , ConvertibleAction<float>.Instance);
            Add(null                                 , "PutDownSound"                              , FormLinkAction<ISoundDescriptorGetter>.Instance);
            Add(typeof(IAlchemicalApparatusGetter)   , "Quality"                                   , EnumsAction.Instance);
            Add(null                                 , "Quest"                                     , FormLinkAction<IQuestGetter>.Instance);
            Add(typeof(IQuestGetter)                 , "QuestFormVersion"                          , ConvertibleAction<byte>.Instance);
            Add(null                                 , "Race"                                      , FormLinkAction<IRaceGetter>.Instance);
            Add(typeof(IImageSpaceAdapterGetter)     , "RadialBlurCenter.X"                        , ConvertibleAction<float>.Instance);
            Add(typeof(IImageSpaceAdapterGetter)     , "RadialBlurCenter.Y"                        , ConvertibleAction<float>.Instance);
            Add(typeof(IImageSpaceAdapterGetter)     , "RadialBlurUseTarget"                       , ConvertibleAction<bool>.Instance);
            Add(typeof(IExplosionGetter)             , "Radius"                                    , ConvertibleAction<float>.Instance);
            Add(typeof(IHazardGetter)                , "Radius"                                    , ConvertibleAction<float>.Instance);
            Add(typeof(ILightGetter)                 , "Radius"                                    , ConvertibleAction<uint>.Instance);
            Add(typeof(IArmorGetter)                 , "RagdollConstraintTemplate"                 , ConvertibleAction<string>.Instance);
            Add(null                                 , "Range"                                     , ConvertibleAction<float>.Instance);
            Add(typeof(IEncounterZoneGetter)         , "Rank"                                      , ConvertibleAction<sbyte>.Instance);
            Add(typeof(IRelationshipGetter)          , "Rank"                                      , EnumsAction.Instance);
            Add(typeof(ILocationGetter)              , "ReferenceCellPersistentReferences"         , FormLinksAction<IPlacedSimpleGetter>.Instance);
            Add(typeof(ILocationGetter)              , "ReferenceCellStaticReferences"             , FormLinksAction<IPlacedSimpleGetter>.Instance);
            Add(typeof(ILocationGetter)              , "ReferenceCellUnique"                       , FormLinksAction<INpcGetter>.Instance);
            Add(typeof(IReverbParametersGetter)      , "ReflectDelayMS"                            , ConvertibleAction<byte>.Instance);
            Add(typeof(IWaterGetter)                 , "ReflectionColor"                           , BasicAction<Color>.Instance);
            Add(typeof(IReverbParametersGetter)      , "Reflections"                               , ConvertibleAction<sbyte>.Instance);
            Add(typeof(ICellGetter)                  , "Regions"                                   , FormLinksAction<IRegionGetter>.Instance);
            Add(typeof(IIdleAnimationGetter)         , "RelatedIdles"                              , FormLinksAction<IIdleRelationGetter>.Instance);
            Add(typeof(ICameraPathGetter)            , "RelatedPaths"                              , FormLinksAction<ICameraPathGetter>.Instance);
            Add(typeof(IFactionGetter)               , "Relations"                                 , RelationsAction.Instance);
            Add(typeof(IProjectileGetter)            , "RelaunchInterval"                          , ConvertibleAction<float>.Instance);
            Add(typeof(IIdleAnimationGetter)         , "ReplayDelay"                               , ConvertibleAction<ushort>.Instance);
            Add(typeof(IMagicEffectGetter)           , "ResistValue"                               , EnumsAction.Instance);
            Add(typeof(IImpactGetter)                , "Result"                                    , EnumsAction.Instance);
            Add(typeof(IReverbParametersGetter)      , "ReverbAmp"                                 , ConvertibleAction<sbyte>.Instance);
            Add(typeof(IReverbParametersGetter)      , "ReverbDelayMS"                             , ConvertibleAction<byte>.Instance);
            Add(typeof(IMovementTypeGetter)          , "RightRun"                                  , ConvertibleAction<float>.Instance);
            Add(typeof(IMovementTypeGetter)          , "RightWalk"                                 , ConvertibleAction<float>.Instance);
            Add(typeof(IReverbParametersGetter)      , "RoomFilter"                                , ConvertibleAction<sbyte>.Instance);
            Add(typeof(IReverbParametersGetter)      , "RoomHfFilter"                              , ConvertibleAction<sbyte>.Instance);
            Add(typeof(IMovementTypeGetter)          , "RotateInPlaceRun"                          , ConvertibleAction<float>.Instance);
            Add(typeof(IMovementTypeGetter)          , "RotateInPlaceWalk"                         , ConvertibleAction<float>.Instance);
            Add(typeof(IMovementTypeGetter)          , "RotateWhileMovingRun"                      , ConvertibleAction<float>.Instance);
            Add(typeof(ILoadScreenGetter)            , "RotationOffsetConstraints.Max"             , ConvertibleAction<short>.Instance);
            Add(typeof(ILoadScreenGetter)            , "RotationOffsetConstraints.Min"             , ConvertibleAction<short>.Instance);
            Add(typeof(IShaderParticleGeometryGetter), "RotationVelocity"                          , ConvertibleAction<float>.Instance);
            Add(typeof(IFootstepSetGetter)           , "RunForwardAlternateFootsteps"              , FormLinksAction<IFootstepGetter>.Instance);
            Add(typeof(IFootstepSetGetter)           , "RunForwardFootsteps"                       , FormLinksAction<IFootstepGetter>.Instance);
            Add(typeof(IEffectShaderGetter)          , "SceneGraphEmitDepthLimit"                  , ConvertibleAction<uint>.Instance);
            Add(typeof(IPackageGetter)               , "ScheduleDate"                              , ConvertibleAction<byte>.Instance);
            Add(typeof(IPackageGetter)               , "ScheduleDayOfWeek"                         , EnumsAction.Instance);
            Add(typeof(IPackageGetter)               , "ScheduleDurationInMinutes"                 , ConvertibleAction<int>.Instance);
            Add(typeof(IPackageGetter)               , "ScheduleHour"                              , ConvertibleAction<sbyte>.Instance);
            Add(typeof(IPackageGetter)               , "ScheduleMinute"                            , ConvertibleAction<sbyte>.Instance);
            Add(typeof(IPackageGetter)               , "ScheduleMonth"                             , ConvertibleAction<sbyte>.Instance);
            Add(typeof(IWeaponGetter)                , "ScopeModel"                                , ModelAction.Instance);
            Add(typeof(IMagicEffectGetter)           , "ScriptEffectAIDelayTime"                   , ConvertibleAction<float>.Instance);
            Add(typeof(IMagicEffectGetter)           , "ScriptEffectAIScore"                       , ConvertibleAction<float>.Instance);
            Add(typeof(IMagicEffectGetter)           , "SecondActorValue"                          , EnumsAction.Instance);
            Add(typeof(IMagicEffectGetter)           , "SecondActorValueWeight"                    , ConvertibleAction<float>.Instance);
            Add(typeof(IImpactGetter)                , "SecondaryTextureSet"                       , FormLinkAction<ITextureSetGetter>.Instance);
            Add(typeof(IVisualEffectGetter)          , "Shader"                                    , FormLinkAction<IEffectShaderGetter>.Instance);
            Add(typeof(IWaterGetter)                 , "ShallowColor"                              , BasicAction<Color>.Instance);
            Add(typeof(IFactionGetter)               , "SharedCrimeFactionList"                    , FormLinkAction<IFormListGetter>.Instance);
            Add(typeof(IRaceGetter)                  , "ShieldBipedObject"                         , EnumsAction.Instance);
            Add(typeof(IAmmunitionGetter)            , "ShortName"                                 , ConvertibleAction<string>.Instance);
            Add(typeof(INpcGetter)                   , "ShortName"                                 , ConvertibleAction<string>.Instance);
            Add(typeof(ICameraPathGetter)            , "Shots"                                     , FormLinksAction<ICameraShotGetter>.Instance);
            Add(typeof(IMaterialObjectGetter)        , "SinglePassColor"                           , BasicAction<Color>.Instance);
            Add(typeof(IRaceGetter)                  , "Size"                                      , EnumsAction.Instance);
            Add(typeof(IActorValueInformationGetter) , "Skill.ImproveMult"                         , ConvertibleAction<float>.Instance);
            Add(typeof(IActorValueInformationGetter) , "Skill.ImproveOffset"                       , ConvertibleAction<float>.Instance);
            Add(typeof(IActorValueInformationGetter) , "Skill.OffsetMult"                          , ConvertibleAction<float>.Instance);
            Add(typeof(IActorValueInformationGetter) , "Skill.UseMult"                             , ConvertibleAction<float>.Instance);
            Add(typeof(IRaceGetter)                  , "SkillBoost0.Boost"                         , ConvertibleAction<sbyte>.Instance);
            Add(typeof(IRaceGetter)                  , "SkillBoost0.Skill"                         , EnumsAction.Instance);
            Add(typeof(IRaceGetter)                  , "SkillBoost1.Boost"                         , ConvertibleAction<sbyte>.Instance);
            Add(typeof(IRaceGetter)                  , "SkillBoost1.Skill"                         , EnumsAction.Instance);
            Add(typeof(IRaceGetter)                  , "SkillBoost2.Boost"                         , ConvertibleAction<sbyte>.Instance);
            Add(typeof(IRaceGetter)                  , "SkillBoost2.Skill"                         , EnumsAction.Instance);
            Add(typeof(IRaceGetter)                  , "SkillBoost3.Boost"                         , ConvertibleAction<sbyte>.Instance);
            Add(typeof(IRaceGetter)                  , "SkillBoost3.Skill"                         , EnumsAction.Instance);
            Add(typeof(IRaceGetter)                  , "SkillBoost4.Boost"                         , ConvertibleAction<sbyte>.Instance);
            Add(typeof(IRaceGetter)                  , "SkillBoost4.Skill"                         , EnumsAction.Instance);
            Add(typeof(IRaceGetter)                  , "SkillBoost5.Boost"                         , ConvertibleAction<sbyte>.Instance);
            Add(typeof(IRaceGetter)                  , "SkillBoost5.Skill"                         , EnumsAction.Instance);
            Add(typeof(IRaceGetter)                  , "SkillBoost6.Boost"                         , ConvertibleAction<sbyte>.Instance);
            Add(typeof(IRaceGetter)                  , "SkillBoost6.Skill"                         , EnumsAction.Instance);
            Add(typeof(IMagicEffectGetter)           , "SkillUsageMultiplier"                      , ConvertibleAction<float>.Instance);
            Add(typeof(IRaceGetter)                  , "Skin"                                      , FormLinkAction<IArmorGetter>.Instance);
            Add(typeof(ICellGetter)                  , "SkyAndWeatherFromRegion"                   , FormLinkAction<IRegionGetter>.Instance);
            Add(typeof(IWeatherGetter)               , "SkyLowerColor.Day"                         , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "SkyLowerColor.Night"                       , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "SkyLowerColor.Sunrise"                     , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "SkyLowerColor.Sunset"                      , BasicAction<Color>.Instance);
            Add(null                                 , "SkyrimMajorRecordFlags"                    , FlagsAction.Instance);
            Add(typeof(IWeatherGetter)               , "SkyStatics"                                , FormLinksAction<IStaticGetter>.Instance);
            Add(typeof(IWeatherGetter)               , "SkyStaticsColor.Day"                       , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "SkyStaticsColor.Night"                     , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "SkyStaticsColor.Sunrise"                   , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "SkyStaticsColor.Sunset"                    , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "SkyUpperColor.Day"                         , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "SkyUpperColor.Night"                       , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "SkyUpperColor.Sunrise"                     , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "SkyUpperColor.Sunset"                      , BasicAction<Color>.Instance);
            Add(typeof(INpcGetter)                   , "SleepingOutfit"                            , FormLinkAction<IOutfitGetter>.Instance);
            Add(typeof(IEquipTypeGetter)             , "SlotParents"                               , FormLinksAction<IEquipTypeGetter>.Instance);
            Add(typeof(ISoundOutputModelGetter)      , "SNAM"                                      , MemorySliceByteAction.Instance);
            Add(typeof(ISoundMarkerGetter)           , "SNDD"                                      , MemorySliceByteAction.Instance);
            Add(typeof(IAddonNodeGetter)             , "Sound"                                     , FormLinkAction<ISoundDescriptorGetter>.Instance);
            Add(typeof(IHazardGetter)                , "Sound"                                     , FormLinkAction<ISoundDescriptorGetter>.Instance);
            Add(typeof(ILightGetter)                 , "Sound"                                     , FormLinkAction<ISoundDescriptorGetter>.Instance);
            Add(typeof(IProjectileGetter)            , "Sound"                                     , FormLinkAction<ISoundDescriptorGetter>.Instance);
            Add(typeof(IExplosionGetter)             , "Sound1"                                    , FormLinkAction<ISoundDescriptorGetter>.Instance);
            Add(typeof(IImpactGetter)                , "Sound1"                                    , FormLinkAction<ISoundGetter>.Instance);
            Add(typeof(IExplosionGetter)             , "Sound2"                                    , FormLinkAction<ISoundDescriptorGetter>.Instance);
            Add(typeof(IImpactGetter)                , "Sound2"                                    , FormLinkAction<ISoundGetter>.Instance);
            Add(typeof(ISoundMarkerGetter)           , "SoundDescriptor"                           , FormLinkAction<ISoundDescriptorGetter>.Instance);
            Add(typeof(IProjectileGetter)            , "SoundLevel"                                , ConvertibleAction<uint>.Instance);
            Add(null                                 , "SoundLevel"                                , EnumsAction.Instance);
            Add(typeof(IExplosionGetter)             , "SpawnProjectile"                           , FormLinkAction<IProjectileGetter>.Instance);
            Add(typeof(INpcGetter)                   , "SpectatorOverridePackageList"              , FormLinkAction<IFormListGetter>.Instance);
            Add(typeof(IWaterGetter)                 , "SpecularBrightness"                        , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "SpecularPower"                             , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "SpecularRadius"                            , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "SpecularSunPower"                          , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "SpecularSunSparkleMagnitude"               , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "SpecularSunSparklePower"                   , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "SpecularSunSpecularMagnitude"              , ConvertibleAction<float>.Instance);
            Add(typeof(IMovementTypeGetter)          , "SPEDDataTypeState"                         , FlagsAction.Instance);
            Add(typeof(IProjectileGetter)            , "Speed"                                     , ConvertibleAction<float>.Instance);
            Add(typeof(IHazardGetter)                , "Spell"                                     , FormLinkAction<IEffectRecordGetter>.Instance);
            Add(typeof(IWaterGetter)                 , "Spell"                                     , FormLinkAction<ISpellGetter>.Instance);
            Add(typeof(IMagicEffectGetter)           , "SpellmakingArea"                           , ConvertibleAction<uint>.Instance);
            Add(typeof(IMagicEffectGetter)           , "SpellmakingCastingTime"                    , ConvertibleAction<float>.Instance);
            Add(typeof(IWeatherGetter)               , "StarsColor.Day"                            , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "StarsColor.Night"                          , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "StarsColor.Sunrise"                        , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "StarsColor.Sunset"                         , BasicAction<Color>.Instance);
            Add(typeof(IDialogBranchGetter)          , "StartingTopic"                             , FormLinkAction<IDialogTopicGetter>.Instance);
            Add(typeof(ISoundDescriptorGetter)       , "StaticAttenuation"                         , ConvertibleAction<float>.Instance);
            Add(typeof(ISoundCategoryGetter)         , "StaticVolumeMultiplier"                    , ConvertibleAction<float>.Instance);
            Add(typeof(IFactionGetter)               , "StolenGoodsContainer"                      , FormLinkAction<IPlacedObjectGetter>.Instance);
            Add(typeof(ISoundDescriptorGetter)       , "String"                                    , ConvertibleAction<string>.Instance);
            Add(typeof(IDialogTopicGetter)           , "Subtype"                                   , EnumsAction.Instance);
            Add(typeof(IWeatherGetter)               , "SunColor.Day"                              , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "SunColor.Night"                            , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "SunColor.Sunrise"                          , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "SunColor.Sunset"                           , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "SunDamage"                                 , BasicAction<Percent>.Instance);
            Add(typeof(IWeatherGetter)               , "SunGlare"                                  , BasicAction<Percent>.Instance);
            Add(typeof(IWeatherGetter)               , "SunGlareColor.Day"                         , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "SunGlareColor.Night"                       , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "SunGlareColor.Sunrise"                     , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "SunGlareColor.Sunset"                      , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "SunGlareLensFlare"                         , FormLinkAction<ILensFlareGetter>.Instance);
            Add(typeof(IWeatherGetter)               , "SunlightColor.Day"                         , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "SunlightColor.Night"                       , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "SunlightColor.Sunrise"                     , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "SunlightColor.Sunset"                      , BasicAction<Color>.Instance);
            Add(typeof(IFootstepGetter)              , "Tag"                                       , ConvertibleAction<string>.Instance);
            Add(typeof(IMagicEffectGetter)           , "TaperCurve"                                , ConvertibleAction<float>.Instance);
            Add(typeof(IMagicEffectGetter)           , "TaperDuration"                             , ConvertibleAction<float>.Instance);
            Add(typeof(IMagicEffectGetter)           , "TaperWeight"                               , ConvertibleAction<float>.Instance);
            Add(typeof(ICameraShotGetter)            , "Target"                                    , EnumsAction.Instance);
            Add(typeof(IHazardGetter)                , "TargetInterval"                            , ConvertibleAction<float>.Instance);
            Add(typeof(ICameraShotGetter)            , "TargetPercentBetweenActors"                , ConvertibleAction<float>.Instance);
            Add(null                                 , "TargetType"                                , EnumsAction.Instance);
            Add(typeof(IClassGetter)                 , "Teaches"                                   , EnumsAction.Instance);
            Add(typeof(INpcGetter)                   , "Template"                                  , FormLinkAction<INpcSpawnGetter>.Instance);
            Add(typeof(IWeaponGetter)                , "Template"                                  , FormLinkAction<IWeaponGetter>.Instance);
            Add(typeof(IArmorGetter)                 , "TemplateArmor"                             , FormLinkAction<IArmorGetter>.Instance);
            Add(typeof(IQuestGetter)                 , "TextDisplayGlobals"                        , FormLinksAction<IGlobalGetter>.Instance);
            Add(typeof(IEffectShaderGetter)          , "TextureCountU"                             , ConvertibleAction<uint>.Instance);
            Add(typeof(IEffectShaderGetter)          , "TextureCountV"                             , ConvertibleAction<uint>.Instance);
            Add(typeof(IProjectileGetter)            , "TextureFilesHashes"                        , MemorySliceByteAction.Instance);
            Add(typeof(INpcGetter)                   , "TextureLighting"                           , BasicAction<Color>.Instance);
            Add(null                                 , "TextureSet"                                , FormLinkAction<ITextureSetGetter>.Instance);
            Add(typeof(ILandscapeTextureGetter)      , "TextureSpecularExponent"                   , ConvertibleAction<byte>.Instance);
            Add(typeof(IWeatherGetter)               , "ThunderLightningBeginFadeIn"               , BasicAction<Percent>.Instance);
            Add(typeof(IWeatherGetter)               , "ThunderLightningEndFadeOut"                , BasicAction<Percent>.Instance);
            Add(typeof(IWeatherGetter)               , "ThunderLightningFrequency"                 , BasicAction<Percent>.Instance);
            Add(typeof(ILightGetter)                 , "Time"                                      , ConvertibleAction<int>.Instance);
            Add(typeof(ICameraShotGetter)            , "TimeMultiplierGlobal"                      , ConvertibleAction<float>.Instance);
            Add(typeof(ICameraShotGetter)            , "TimeMultiplierPlayer"                      , ConvertibleAction<float>.Instance);
            Add(typeof(ICameraShotGetter)            , "TimeMultiplierTarget"                      , ConvertibleAction<float>.Instance);
            Add(typeof(IImageSpaceGetter)            , "Tint.Amount"                               , ConvertibleAction<float>.Instance);
            Add(typeof(IImageSpaceGetter)            , "Tint.Color"                                , BasicAction<Color>.Instance);
            Add(typeof(IAssociationTypeGetter)       , "Title.Female"                              , ConvertibleAction<string>.Instance);
            Add(typeof(IAssociationTypeGetter)       , "Title.Male"                                , ConvertibleAction<string>.Instance);
            Add(typeof(IDialogTopicGetter)           , "TopicFlags"                                , FlagsAction.Instance);
            Add(typeof(IProjectileGetter)            , "TracerChance"                              , ConvertibleAction<float>.Instance);
            Add(typeof(IMusicTrackGetter)            , "Tracks"                                    , FormLinksAction<IMusicTrackGetter>.Instance);
            Add(typeof(IMusicTypeGetter)             , "Tracks"                                    , FormLinksAction<IMusicTrackGetter>.Instance);
            Add(typeof(IPerkGetter)                  , "Trait"                                     , ConvertibleAction<bool>.Instance);
            Add(typeof(IWeatherGetter)               , "TransDelta"                                , ConvertibleAction<float>.Instance);
            Add(typeof(IWordOfPowerGetter)           , "Translation"                               , ConvertibleAction<string>.Instance);
            Add(typeof(ITreeGetter)                  , "TrunkFlexibility"                          , ConvertibleAction<float>.Instance);
            Add(typeof(IArtObjectGetter)             , "Type"                                      , FlagsAction.Instance);
            Add(null                                 , "Type"                                      , EnumsAction.Instance);
            Add(typeof(IRaceGetter)                  , "UnarmedDamage"                             , ConvertibleAction<float>.Instance);
            Add(typeof(IRaceGetter)                  , "UnarmedEquipSlot"                          , FormLinkAction<IEquipTypeGetter>.Instance);
            Add(typeof(IRaceGetter)                  , "UnarmedReach"                              , ConvertibleAction<float>.Instance);
            Add(typeof(IWeaponGetter)                , "UnequipSound"                              , FormLinkAction<ISoundDescriptorGetter>.Instance);
            Add(typeof(IGrassGetter)                 , "UnitsFromWater"                            , ConvertibleAction<ushort>.Instance);
            Add(typeof(IGrassGetter)                 , "UnitsFromWaterType"                        , EnumsAction.Instance);
            Add(typeof(IWeatherGetter)               , "UnknownColor.Day"                          , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "UnknownColor.Night"                        , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "UnknownColor.Sunrise"                      , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "UnknownColor.Sunset"                       , BasicAction<Color>.Instance);
            Add(typeof(IAnimatedObjectGetter)        , "UnloadEvent"                               , ConvertibleAction<string>.Instance);
            Add(typeof(ILocationGetter)              , "UnreportedCrimeFaction"                    , FormLinkAction<IFactionGetter>.Instance);
            Add(typeof(IEquipTypeGetter)             , "UseAllParents"                             , ConvertibleAction<bool>.Instance);
            Add(typeof(IAcousticSpaceGetter)         , "UseSoundFromRegion"                        , FormLinkAction<IRegionGetter>.Instance);
            Add(typeof(IHeadPartGetter)              , "ValidRaces"                                , FormLinkAction<IFormListGetter>.Instance);
            Add(null                                 , "Value"                                     , ConvertibleAction<uint>.Instance);
            Add(typeof(ISoundDescriptorGetter)       , "Variance"                                  , ConvertibleAction<sbyte>.Instance);
            Add(typeof(IFactionGetter)               , "VendorBuySellList"                         , FormLinkAction<IFormListGetter>.Instance);
            Add(typeof(IFactionGetter)               , "VendorValues.EndHour"                      , ConvertibleAction<ushort>.Instance);
            Add(typeof(IFactionGetter)               , "VendorValues.NotSellBuy"                   , ConvertibleAction<bool>.Instance);
            Add(typeof(IFactionGetter)               , "VendorValues.OnlyBuysStolenItems"          , ConvertibleAction<bool>.Instance);
            Add(typeof(IFactionGetter)               , "VendorValues.Radius"                       , ConvertibleAction<ushort>.Instance);
            Add(typeof(IFactionGetter)               , "VendorValues.StartHour"                    , ConvertibleAction<ushort>.Instance);
            Add(typeof(IExplosionGetter)             , "VerticalOffsetMult"                        , ConvertibleAction<float>.Instance);
            Add(typeof(IWeatherGetter)               , "VisualEffect"                              , FormLinkAction<IVisualEffectGetter>.Instance);
            Add(typeof(IWeatherGetter)               , "VisualEffectBegin"                         , BasicAction<Percent>.Instance);
            Add(typeof(IWeatherGetter)               , "VisualEffectEnd"                           , BasicAction<Percent>.Instance);
            Add(typeof(ISceneGetter)                 , "VNAM"                                      , MemorySliceByteAction.Instance);
            Add(typeof(INpcGetter)                   , "Voice"                                     , FormLinkAction<IVoiceTypeGetter>.Instance);
            Add(typeof(IClassGetter)                 , "VoicePoints"                               , ConvertibleAction<uint>.Instance);
            Add(typeof(ITalkingActivatorGetter)      , "VoiceType"                                 , FormLinkAction<IVoiceTypeGetter>.Instance);
            Add(typeof(IClimateGetter)               , "Volatility"                                , ConvertibleAction<byte>.Instance);
            Add(typeof(IWeatherGetter)               , "VolumetricLighting.Day"                    , FormLinkAction<IVolumetricLightingGetter>.Instance);
            Add(typeof(IWeatherGetter)               , "VolumetricLighting.Night"                  , FormLinkAction<IVolumetricLightingGetter>.Instance);
            Add(typeof(IWeatherGetter)               , "VolumetricLighting.Sunrise"                , FormLinkAction<IVolumetricLightingGetter>.Instance);
            Add(typeof(IWeatherGetter)               , "VolumetricLighting.Sunset"                 , FormLinkAction<IVolumetricLightingGetter>.Instance);
            Add(typeof(IFootstepSetGetter)           , "WalkForwardAlternateFootsteps"             , FormLinksAction<IFootstepGetter>.Instance);
            Add(typeof(IFootstepSetGetter)           , "WalkForwardAlternateFootsteps2"            , FormLinksAction<IFootstepGetter>.Instance);
            Add(typeof(IFootstepSetGetter)           , "WalkForwardFootsteps"                      , FormLinksAction<IFootstepGetter>.Instance);
            Add(typeof(ICellGetter)                  , "Water"                                     , FormLinkAction<IWaterGetter>.Instance);
            Add(typeof(IWorldspaceGetter)            , "Water"                                     , FormLinkAction<IWaterGetter>.Instance);
            Add(typeof(ICellGetter)                  , "WaterEnvironmentMap"                       , ConvertibleAction<string>.Instance);
            Add(typeof(IWaterGetter)                 , "WaterFresnel"                              , ConvertibleAction<float>.Instance);
            Add(typeof(ICellGetter)                  , "WaterHeight"                               , ConvertibleAction<float>.Instance);
            Add(typeof(IWeatherGetter)               , "WaterMultiplierColor.Day"                  , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "WaterMultiplierColor.Night"                , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "WaterMultiplierColor.Sunrise"              , BasicAction<Color>.Instance);
            Add(typeof(IWeatherGetter)               , "WaterMultiplierColor.Sunset"               , BasicAction<Color>.Instance);
            Add(typeof(ICellGetter)                  , "WaterNoiseTexture"                         , ConvertibleAction<string>.Instance);
            Add(typeof(IWaterGetter)                 , "WaterReflectionMagnitude"                  , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "WaterReflectivity"                         , ConvertibleAction<float>.Instance);
            Add(typeof(IWaterGetter)                 , "WaterRefractionMagnitude"                  , ConvertibleAction<float>.Instance);
            Add(typeof(IActivatorGetter)             , "WaterType"                                 , FormLinkAction<IWaterGetter>.Instance);
            Add(typeof(ICellGetter)                  , "WaterVelocity.Angle.X"                     , ConvertibleAction<float>.Instance);
            Add(typeof(ICellGetter)                  , "WaterVelocity.Angle.Y"                     , ConvertibleAction<float>.Instance);
            Add(typeof(ICellGetter)                  , "WaterVelocity.Angle.Z"                     , ConvertibleAction<float>.Instance);
            Add(typeof(ICellGetter)                  , "WaterVelocity.Offset.X"                    , ConvertibleAction<float>.Instance);
            Add(typeof(ICellGetter)                  , "WaterVelocity.Offset.Y"                    , ConvertibleAction<float>.Instance);
            Add(typeof(ICellGetter)                  , "WaterVelocity.Offset.Z"                    , ConvertibleAction<float>.Instance);
            Add(typeof(IGrassGetter)                 , "WavePeriod"                                , ConvertibleAction<float>.Instance);
            Add(typeof(IArmorAddonGetter)            , "WeaponAdjust"                              , ConvertibleAction<float>.Instance);
            Add(typeof(IAlchemicalApparatusGetter)   , "Weight"                                    , ConvertibleAction<float>.Instance);
            Add(typeof(IAmmunitionGetter)            , "Weight"                                    , ConvertibleAction<float>.Instance);
            Add(typeof(IArmorGetter)                 , "Weight"                                    , ConvertibleAction<float>.Instance);
            Add(typeof(IBookGetter)                  , "Weight"                                    , ConvertibleAction<float>.Instance);
            Add(typeof(IContainerGetter)             , "Weight"                                    , ConvertibleAction<float>.Instance);
            Add(typeof(IIngestibleGetter)            , "Weight"                                    , ConvertibleAction<float>.Instance);
            Add(typeof(IIngredientGetter)            , "Weight"                                    , ConvertibleAction<float>.Instance);
            Add(typeof(IKeyGetter)                   , "Weight"                                    , ConvertibleAction<float>.Instance);
            Add(typeof(ILightGetter)                 , "Weight"                                    , ConvertibleAction<float>.Instance);
            Add(typeof(IMiscItemGetter)              , "Weight"                                    , ConvertibleAction<float>.Instance);
            Add(typeof(INpcGetter)                   , "Weight"                                    , ConvertibleAction<float>.Instance);
            Add(typeof(IScrollGetter)                , "Weight"                                    , ConvertibleAction<float>.Instance);
            Add(typeof(ISoulGemGetter)               , "Weight"                                    , ConvertibleAction<float>.Instance);
            Add(typeof(IRaceGetter)                  , "Weight.Female"                             , ConvertibleAction<float>.Instance);
            Add(typeof(IRaceGetter)                  , "Weight.Male"                               , ConvertibleAction<float>.Instance);
            Add(typeof(IArmorAddonGetter)            , "WeightSliderEnabled.Female"                , ConvertibleAction<bool>.Instance);
            Add(typeof(IArmorAddonGetter)            , "WeightSliderEnabled.Male"                  , ConvertibleAction<bool>.Instance);
            Add(typeof(IWeatherGetter)               , "WindDirection"                             , ConvertibleAction<float>.Instance);
            Add(typeof(IWeatherGetter)               , "WindDirectionRange"                        , ConvertibleAction<float>.Instance);
            Add(typeof(IWeatherGetter)               , "WindSpeed"                                 , BasicAction<Percent>.Instance);
            Add(typeof(IFurnitureGetter)             , "WorkbenchData.BenchType"                   , EnumsAction.Instance);
            Add(typeof(IFurnitureGetter)             , "WorkbenchData.UsesSkill"                   , EnumsAction.Instance);
            Add(typeof(IConstructibleObjectGetter)   , "WorkbenchKeyword"                          , FormLinkAction<IKeywordGetter>.Instance);
            Add(typeof(ILocationGetter)              , "WorldLocationMarkerRef"                    , FormLinkAction<IPlacedSimpleGetter>.Instance);
            Add(typeof(ILocationGetter)              , "WorldLocationRadius"                       , ConvertibleAction<float>.Instance);
            Add(typeof(IWorldspaceGetter)            , "WorldMapCellOffset.X"                      , ConvertibleAction<float>.Instance);
            Add(typeof(IWorldspaceGetter)            , "WorldMapCellOffset.Y"                      , ConvertibleAction<float>.Instance);
            Add(typeof(IWorldspaceGetter)            , "WorldMapCellOffset.Z"                      , ConvertibleAction<float>.Instance);
            Add(typeof(IWorldspaceGetter)            , "WorldMapOffsetScale"                       , ConvertibleAction<float>.Instance);
            Add(typeof(IArmorAddonGetter)            , "WorldModel.Female"                         , ModelAction.Instance);
            Add(typeof(IArmorAddonGetter)            , "WorldModel.Male"                           , ModelAction.Instance);
            Add(typeof(IRegionGetter)                , "Worldspace"                                , FormLinkAction<IWorldspaceGetter>.Instance);
            Add(typeof(INpcGetter)                   , "WornArmor"                                 , FormLinkAction<IArmorGetter>.Instance);
            Add(typeof(IObjectEffectGetter)          , "WornRestrictions"                          , FormLinkAction<IFormListGetter>.Instance);
            Add(typeof(IPackageGetter)               , "XnamMarker"                                , MemorySliceByteAction.Instance);
            Add(typeof(ICellGetter)                  , "XWCN"                                      , MemorySliceByteAction.Instance);
            Add(typeof(ICellGetter)                  , "XWCS"                                      , MemorySliceByteAction.Instance);
            Add(typeof(ICameraPathGetter)            , "Zoom"                                      , FlagsAction.Instance);
            Add(typeof(ICameraPathGetter)            , "ZoomMustHaveCameraShots"                   , ConvertibleAction<bool>.Instance);
#pragma warning restore format
        }

        private static bool tryFindAlias (Type? type, string key, out PropertyAliasMapping pam)
        {
            if (type != null && propertyAliases.TryGetValue(new RecordProperty(type, key), out var _rpm) && _rpm is PropertyAliasMapping _PAM)
            {
                pam = _PAM;
                return true;
            }
            else if (propertyAliases.TryGetValue(new RecordProperty(key), out var _rpmNoType) && _rpmNoType is PropertyAliasMapping _PAMNoType)
            {
                pam = _PAMNoType;
                return true;
            }

            pam = default;
            return false;
        }
    }

    #region Support Classes

    internal readonly struct RecordProperty (Type? type, string propertyName) : IRecordProperty
    {
        public RecordProperty (string propertyName) : this(null, propertyName)
        {
        }

        public string PropertyName { get; } = propertyName;

        public Type? Type { get; } = type;
    }

    internal sealed class RecordPropertyComparer : IEqualityComparer<IRecordProperty>
    {
        [SuppressMessage("Style", "IDE0046:Convert to conditional expression", Justification = "Readability")]
        public static bool Equals (IRecordProperty? x, IRecordProperty? y)
        {
            if (x == null && y == null)
                return true;

            if (x == null || y == null)
                return false;

            return x.Type == y.Type && x.PropertyName.Equals(y.PropertyName, StringComparison.OrdinalIgnoreCase);
        }

        public static int GetHashCode ([DisallowNull] IRecordProperty obj) => (obj.Type?.GetHashCode() ?? 0) ^ obj.PropertyName.GetHashCode(StringComparison.OrdinalIgnoreCase);

        bool IEqualityComparer<IRecordProperty>.Equals (IRecordProperty? x, IRecordProperty? y) => Equals(x, y);

        int IEqualityComparer<IRecordProperty>.GetHashCode ([DisallowNull] IRecordProperty obj) => GetHashCode(obj);
    }

    #endregion Support Classes
}