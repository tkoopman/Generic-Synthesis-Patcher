using System.Data;

using DynamicData;

using GenericSynthesisPatcher.Helpers;
using GenericSynthesisPatcher.Helpers.Action;
using GenericSynthesisPatcher.Helpers.Graph;
using GenericSynthesisPatcher.Json.Data;
using GenericSynthesisPatcher.Json.Operations;

using Microsoft.Extensions.Logging;

using Mutagen.Bethesda;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Synthesis;

using Newtonsoft.Json;

using Noggog;

namespace GenericSynthesisPatcher
{
    public partial class Program
    {
        private const int ClassLogCode = 0x01;

        /// <summary>
        ///     Record of all record properties that have been updated. Used to detect when a
        ///     property is updated by 2 different processes.
        /// </summary>
        private static readonly List<(RecordTypeMapping Type, FormKey FormKey, GSPRule Rule, RecordPropertyMapping Rpm, int Changes)> RecordUpdates = [];

        public static async Task<int> Main (string[] args)
        {
            if (args.Length == 0)
            {
                GenerateDoco.generate(null);
                return 0;
            }
            else
            {
                return args.Contains("--GenerateDoco", StringComparer.OrdinalIgnoreCase)
                    ? await SynthesisPipeline.Instance
                                    .AddPatch<ISkyrimMod, ISkyrimModGetter>(GenerateDoco.generate, new PatcherPreferences { NoPatch = true })
                                    .SetAutogeneratedSettings(nickname: "Generic Synthesis Patcher Settings", path: "settings.json", out Global.settings)
                                    .SetTypicalOpen(GameRelease.SkyrimSE, "GenericSynthesisPatcher.esp")
                                    .Run(args)
                    : await SynthesisPipeline.Instance
                                    .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                                    .SetAutogeneratedSettings(nickname: "Generic Synthesis Patcher Settings", path: "settings.json", out Global.settings)
                                    .SetTypicalOpen(GameRelease.SkyrimSE, "GenericSynthesisPatcher.esp")
                                    .Run(args);
            }
        }

        public static void RunPatch (IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            Global.SetState(state);

            if (Global.Settings.Value.Logging.LogLevel <= LogLevel.Debug)
            {
                LogHelper.WriteLog(LogLevel.Debug, ClassLogCode, "Extra logging for FormKey: " +
                    (
                        Global.Settings.Value.Logging.All ? "ALL" :
                        Global.Settings.Value.Logging.FormKey == FormKey.Null ? "None" :
                        Global.Settings.Value.Logging.FormKey.ToString()
                    ));
            }

            var (Rules, EnabledTypes) = loadRules();
            if (Rules.Count == 0)
                return;

            // subTotals values = (Total, Matched, Updated, Changes)
            SortedDictionary<string, Counts> subTotals = [];

            foreach (var rtm in EnabledTypes)
            {
                var ProcessTypeRecords = rtm.WinningContextOverrides();
                var counts = new Counts();
                subTotals.Add(rtm.Name, counts);

                counts.Stopwatch.Start();
                foreach (var context in ProcessTypeRecords)
                {
                    counts.Total++;
                    var proKeys = new ProcessingKeys(rtm, context);

                    foreach (var rule in Rules)
                    {
                        Global.Processing(ClassLogCode, rule, context);

                        _ = proKeys.SetRule(rule);

                        if (rule.Matches(proKeys))
                        {
                            if (proKeys.IsRule)
                            {
                                int changed = processRule(proKeys);
                                if (changed >= 0) // -1 would mean failed OnlyIfDefault check
                                {
                                    counts.Matched++;
                                    if (changed > 0)
                                        counts.Updated++;
                                    counts.Changes += changed;
                                }
                            }
                            else if (proKeys.IsGroup)
                            {
                                if (Global.Settings.Value.Logging.NoisyLogs.GroupMatched)
                                    Global.TraceLogger?.Log(ClassLogCode, $"Matched group. Processing Rules.");

                                var gProKeys = new ProcessingKeys(rtm, context, proKeys);
                                int count = 0;
                                foreach (var groupRule in proKeys.Group.Rules)
                                {
                                    _ = gProKeys.SetRule(groupRule);
                                    Global.Processing(ClassLogCode, groupRule, context);

                                    count++;
                                    if (groupRule.Matches(gProKeys))
                                    {
                                        int changed = processRule(gProKeys);
                                        if (changed >= 0) // -1 would mean failed OnlyIfDefault check
                                        {
                                            counts.Matched++;
                                            if (changed > 0)
                                                counts.Updated++;
                                            counts.Changes += changed;

                                            if (proKeys.Group.SingleMatch)
                                            {
                                                if (count != proKeys.Group.Rules.Count)
                                                    Global.TraceLogger?.Log(ClassLogCode, $"Skipping remaining rules in group due to SingleMatch. Checked {count}/{proKeys.Group.Rules.Count}");
                                                break;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                counts.Stopwatch.Stop();
            }

            Global.Processing(ClassLogCode, null, null);
            LogHelper.WriteLog(LogLevel.Information, ClassLogCode, $"Completed");
            Console.WriteLine();
            LogHelper.PrintCounts();
            Console.WriteLine();

            var updates = RecordUpdates.GroupBy(g => (g.Type, g.FormKey, g.Rpm.PropertyName),
                                                g => (g.Rule, g.Changes), (k, data) => new { Key = k, Rules = data.Select(d => d.Rule).Count(), Changes = data.Select(d => d.Changes).Sum() })
                                       .Where(g => g.Rules > 1);

            foreach (var update in updates)
                Console.WriteLine($"Warning: Record {update.Key.FormKey} had {update.Key.PropertyName} updated by {update.Rules} different rules, with total of {update.Changes} changes.");

            Console.WriteLine();

            Console.WriteLine($"Record Type Totals");
            Console.WriteLine($"{"Type",-6} {"Total",10} {"Matched",10} {"Updated",10} {"Changes",10}");

            var totals = new Counts();
            TimeSpan ts = new();

            foreach (var (key, subTotal) in subTotals)
            {
                if (Global.Settings.Value.Logging.LogLevel == LogLevel.Trace)
                    Console.WriteLine($"{key,-6} {subTotal.Total,10:N0} {subTotal.Matched,10:N0} {subTotal.Updated,10:N0} {subTotal.Changes,10:N0}   {subTotal.Stopwatch.Elapsed:c}");
                else
                    Console.WriteLine($"{key,-6} {subTotal.Total,10:N0} {subTotal.Matched,10:N0} {subTotal.Updated,10:N0} {subTotal.Changes,10:N0}");

                totals.Total += subTotal.Total;
                totals.Matched += subTotal.Matched;
                totals.Updated += subTotal.Updated;
                totals.Changes += subTotal.Changes;
                ts = ts.Add(subTotal.Stopwatch.Elapsed);
            }

            if (Global.Settings.Value.Logging.LogLevel == LogLevel.Trace)
                Console.WriteLine($"{"Totals",-6} {totals.Total,10:N0} {totals.Matched,10:N0} {totals.Updated,10:N0} {totals.Changes,10:N0}   {ts:c}");
            else
                Console.WriteLine($"{"Totals",-6} {totals.Total,10:N0} {totals.Matched,10:N0} {totals.Updated,10:N0} {totals.Changes,10:N0}");
        }

        /// <summary>
        ///     Returns index to be forwarded. As mods already either sorted or randomized, will
        ///     just return the first mod index that meets the NonDefault and NonNull filters
        /// </summary>
        /// <returns>-1 if no valid mod found, else index to use</returns>
        private static int getIndex (ProcessingKeys proKeys, IEnumerable<ModKey> mods, Dictionary<ModKey, IModContext<IMajorRecordGetter>> AllRecordMods)
        {
            bool nonDefault = proKeys.Rule.HasForwardType(ForwardOptions._nonDefaultMod);
            bool nonNull = proKeys.Rule.HasForwardType(ForwardOptions._nonNullMod);
            bool randomize = proKeys.Rule.HasForwardType(ForwardOptions._randomMod) && !proKeys.Rule.HasForwardType(ForwardOptions._sortMods);
            int count = mods.Count();

            // If nothing special to be done to filter valid mods can just return here
            if (!nonDefault && !nonNull)
                return randomize && count > 1 ? proKeys.GetRandom().Next(count) : 0;

            var indexes = Enumerable.Range(0, count);

            if (randomize)
            {  // Randomize the order that we evaluate indexes so can still just accept first valid one
                var r = proKeys.GetRandom();
                indexes = indexes.OrderBy(_ => r.Next());
            }

            if (proKeys.Rule.HasForwardType(ForwardOptions._hpu))
            {
                var graph = ForwardRecordGraph.Create(proKeys);
                var endNodes = graph?.GetEndNodes(mods);
                if (endNodes is null)
                    return -1;

                Global.TraceLogger?.Log(ClassLogCode, $"End nodes: {string.Join(',', endNodes)}", propertyName: proKeys.Property.PropertyName);
                return proKeys.Property.Action.FindHPUIndex(proKeys, mods, indexes, AllRecordMods, endNodes);
            }
            else
            {
                foreach (int i in indexes)
                {
                    var mc = AllRecordMods[mods.ElementAt(i)];

                    if (nonNull && proKeys.Property.Action.IsNullOrEmpty(proKeys, mc))
                        continue;

                    if (nonDefault && proKeys.Property.Action.MatchesOrigin(proKeys, mc))
                        continue;

                    return i;
                }

                // If we haven't found a valid mod index then none exist and we return -1
                return -1;
            }
        }

        /// <summary>
        ///     Loads all JSON configuration files from GSP data folder
        /// </summary>
        /// <returns>List of rules</returns>
        private static (List<GSPBase>, IReadOnlyList<RecordTypeMapping>) loadRules ()
        {
            var LoadedRules = new List<GSPBase>();
            HashSet <RecordTypeMapping> enabledTypes = [];

            bool warned = false;

            string dataFolder = Global.Settings.Value.Folder;
            dataFolder = dataFolder.Replace("{SkyrimData}", Global.State.DataFolderPath);
            dataFolder = dataFolder.Replace("{SynthesisData}", Global.State.ExtraSettingsDataPath);

            if (!Directory.Exists(dataFolder))
            {
                LogHelper.WriteLog(LogLevel.Error, ClassLogCode, $"Missing data folder: {dataFolder}");
                return ([], []);
            }

            int count = 0;

            var files = Directory.GetFiles(dataFolder).Where(x => x.EndsWith(".json", StringComparison.OrdinalIgnoreCase));
            int countFile = 0;
            foreach (string? f in files)
            {
                if (f.Equals(Path.Combine(Global.State.ExtraSettingsDataPath ?? "", "settings.json"), StringComparison.OrdinalIgnoreCase))
                {
                    LogHelper.WriteLog(LogLevel.Information, ClassLogCode, $"Skipping: {f}");
                }
                else
                {
                    LogHelper.WriteLog(LogLevel.Information, ClassLogCode, $"Loading config file #{++countFile}: {f}");
                    List<GSPBase>? rules = null;
                    using (var jsonFile = File.OpenText(f))
                    {
                        using var jsonReader = new JsonTextReader(jsonFile);
                        rules = JsonSerializer.Create(Global.SerializerSettings).Deserialize<List<GSPBase>>(jsonReader);
                    }

                    int countRule = 1;
                    foreach (var rule in rules ?? [])
                    {
                        rule.ConfigFile = countFile;
                        rule.ConfigRule = countRule++;

                        if (!rule.Validate())
                        {
                            LogHelper.WriteLog(LogLevel.Critical, ClassLogCode, "Error validating rules.", rule: rule);
                            enabledTypes.Clear();
                            return ([], []);
                        }

                        if (rule is GSPGroup group)
                            count += group.Rules.Count;
                        else
                            count++;

                        LoadedRules.Add(rule);

                        if (!warned && rule.Types.Count == Global.RecordTypeMappings.All.Count)
                        {
                            LogHelper.WriteLog(LogLevel.Information, ClassLogCode, "Found rule with no or all defined types. For best performance you should always define at least 1 type, and only required types for the rule.");
                            warned = true;
                        }
                        else
                        {
                            enabledTypes.Add(rule.Types);
                        }
                    }
                }
            }

            if (LoadedRules.Count == 0)
            {
                LogHelper.WriteLog(LogLevel.Error, ClassLogCode, $"No rules found in data location: {dataFolder}");
                return ([], []);
            }

            LoadedRules.Sort();

            if (LoadedRules.Count != count)
                LogHelper.WriteLog(LogLevel.Information, ClassLogCode, $"Loaded {LoadedRules.Count} primary rules and {count} total rules.");
            else
                LogHelper.WriteLog(LogLevel.Information, ClassLogCode, $"Loaded {count} total rules.");

            return (LoadedRules, enabledTypes.ToList().AsReadOnly());
        }

        /// <summary>
        ///     Process a fill rule against current record
        /// </summary>
        /// <param name="proKeys">Current processing keys</param>
        /// <param name="ruleKey">Current key of current rule</param>
        /// <returns>
        ///     Number of updates made to current record. -1 if record didn't meet requirements for
        ///     this rule
        /// </returns>
        private static int processFillRecord (ProcessingKeys proKeys, FilterOperation ruleKey)
        {
            if (!proKeys.SetProperty(ruleKey, ruleKey.Value) || !proKeys.Property.Action.CanFill())
            {
                Global.TraceLogger?.Log(ClassLogCode, $"Unknown / Unimplemented field for fill.", propertyName: ruleKey.Value);
                return -1;
            }

            if (proKeys.CheckOnlyIfDefault())
                return -1;

            Global.TraceLogger?.LogAction(ClassLogCode, $"{proKeys.Property.Action.GetType().GetClassName()}.{nameof(IRecordAction.Fill)}", propertyName: proKeys.Property.PropertyName);
            int changed = proKeys.Property.Action.Fill(proKeys);

            if (changed > 0)
                RecordUpdates.Add((proKeys.Type, proKeys.Record.FormKey, proKeys.Rule, proKeys.Property, changed));

            return changed;
        }

        /// <summary>
        ///     Process a Forward rule against current record
        /// </summary>
        /// <param name="proKeys">Current processing keys</param>
        /// <param name="ruleKey">Current key of current rule</param>
        /// <returns>
        ///     Number of updates made to current record. -1 if record didn't meet requirements for
        ///     this rule
        /// </returns>
        private static int processForwardRecord (ProcessingKeys proKeys, FilterOperation ruleKey)
        {
            // Don't waste time if record is master with no overwrites
            if (proKeys.Context.IsMaster())
                return -1;

            if (!proKeys.Rule.TryGetForward(proKeys, ruleKey, out var mods, out string[]? fields))
                return -1;

            var AllRecordMods = Global.State.LinkCache.ResolveAllSimpleContexts(proKeys.Record.FormKey, proKeys.Record.Registration.GetterType).Select(m => new { key = m.ModKey, value = m }).ToDictionary(x => x.key, x => x.value);

            // Make sure at list one listed mod contains record we currently processing Can't be
            // done under TryGetForward has different for each record
            if (proKeys.Rule.HasForwardType(ForwardOptions.SelfMasterOnly))
            {
                if (!mods.Any(AllRecordMods.ContainsKey))
                    return -1;
            }
            else
            {
                // Can filter out any mods that record doesn't exist in NonDefault then we can
                // exclude master as well
                mods = proKeys.Rule.HasForwardType(ForwardOptions._nonDefaultMod) ? mods.Where(m => AllRecordMods.ContainsKey(m) && !proKeys.Record.FormKey.ModKey.Equals(m)) : mods.Where(AllRecordMods.ContainsKey);
                if (!mods.Any())
                    return -1;
            }

            int changed = 0;
            foreach (string field in fields)
            {
                if (!proKeys.SetProperty(ruleKey, field) || !proKeys.Property.Action.CanForward() || (proKeys.Rule.ForwardOptions.HasFlag(ForwardOptions.SelfMasterOnly) && !proKeys.Property.Action.CanForwardSelfOnly()))
                {
                    Global.TraceLogger?.Log(ClassLogCode, $"Unknown / Unimplemented field for forward action type: {Enum.GetName(proKeys.Rule.ForwardOptions)}", propertyName: field);
                    continue;
                }

                if (proKeys.Rule.HasForwardType(ForwardOptions.SelfMasterOnly))
                {
                    changed = processForwardSelfMasterOnly(proKeys, mods, AllRecordMods);
                }
                else
                {   // Default Forward Type
                    // Find modContext of forwarding record
                    int index = getIndex(proKeys, mods, AllRecordMods);
                    if (index == -1)
                        continue;

                    int count = mods.Count();

                    var modContext = AllRecordMods[mods.ElementAt(index)] ?? throw new Exception("WTF Should never hit this!");

                    if (proKeys.CheckOnlyIfDefault())
                        continue;

                    if (count > 1)
                        Global.TraceLogger?.Log(ClassLogCode, $"Forwarding Type: {Enum.GetName(proKeys.Rule.ForwardOptions)} From: {modContext.ModKey.FileName}. Selected #{index + 1} from {count} available mods.", propertyName: proKeys.Property.PropertyName);
                    else
                        Global.TraceLogger?.Log(ClassLogCode, $"Forwarding Type: {Enum.GetName(proKeys.Rule.ForwardOptions)} From: {modContext.ModKey.FileName}.", propertyName: proKeys.Property.PropertyName);

                    Global.TraceLogger?.LogAction(ClassLogCode, $"{proKeys.Property.Action.GetType().GetClassName()}.{nameof(IRecordAction.Forward)}", propertyName: proKeys.Property.PropertyName);
                    int changes = proKeys.Property.Action.Forward(proKeys, modContext);
                    if (changes > 0)
                        changed += changes;
                }

                if (changed > 0)
                    RecordUpdates.Add((proKeys.Type, proKeys.Record.FormKey, proKeys.Rule, proKeys.Property, changed));
            }

            return changed;
        }

        /// <summary>
        ///     Process a Forward of type SelfMasterOnly rule against current record
        /// </summary>
        /// <param name="proKeys">Current processing keys</param>
        /// <param name="ruleKey">Current key of current rule</param>
        /// <returns>
        ///     Number of updates made to current record. -1 if record didn't meet requirements for
        ///     this rule
        /// </returns>
        private static int processForwardSelfMasterOnly (ProcessingKeys proKeys, IEnumerable<ModKey> mods, Dictionary<ModKey, IModContext<IMajorRecordGetter>> AllRecordMods)
        {
            bool firstMod = true;
            int changed = 0;

            foreach (var mod in mods)
            {
                var forwardFrom = AllRecordMods[mod];
                if (proKeys.Rule.ForwardOptions.HasFlag(ForwardOptions.DefaultThenSelfMasterOnly))
                {
                    if (firstMod)
                    {   // First mod of DefaultThenSelfMasterOnly
                        if (forwardFrom == null) // We don't continue if first mod can't be default forwarded
                            break;

                        if (proKeys.CheckOnlyIfDefault())
                            break;

                        Global.TraceLogger?.Log(ClassLogCode, $"Forwarding Type: Default From: {forwardFrom.ModKey.FileName}.", propertyName: proKeys.Property.PropertyName);

                        //Global.TraceLogger?.LogAction(ClassLogCode, $"{proKeys.Property.Action.GetType().GetClassName()}.{nameof(IRecordAction.Forward)}", propertyName: proKeys.Property.PropertyName);
                        int changes = proKeys.Property.Action.Forward(proKeys, forwardFrom);
                        if (changes < 0)
                        {   // If default forward fails we do not continue with the SelfMasterOnly forwards
                            Global.TraceLogger?.Log(ClassLogCode, "DefaultThenSelfMasterOnly: Default forward failed so skipping SelfMasterOnly mods.");
                            break;
                        }
                        else
                        {
                            changed += changes;
                            firstMod = false;
                        }
                    }
                    else if (forwardFrom != null)
                    {   // All other mods in DefaultThenSelfMasterOnly - No need to check origin
                        Global.TraceLogger?.Log(ClassLogCode, $"Forwarding Type: {nameof(ForwardOptions.SelfMasterOnly)} From: {forwardFrom.ModKey.FileName}.", propertyName: proKeys.Property.PropertyName);

                        //Global.TraceLogger?.LogAction(ClassLogCode, $"{proKeys.Property.Action.GetType().GetClassName()}.{nameof(IRecordAction.ForwardSelfOnly)}", propertyName: proKeys.Property.PropertyName);

                        int changes = proKeys.Property.Action.ForwardSelfOnly(proKeys, forwardFrom);
                        if (changes > 0)  // Could be -1 which we don't add to changed
                            changed += changes;
                    }
                }
                else if (proKeys.Rule.ForwardOptions.HasFlag(ForwardOptions.SelfMasterOnly) && forwardFrom != null)
                {   //  SelfMasterOnly
                    if (proKeys.CheckOnlyIfDefault())
                        break;

                    Global.TraceLogger?.Log(ClassLogCode, $"Forwarding Type: {nameof(ForwardOptions.SelfMasterOnly)} From: {forwardFrom.ModKey.FileName}.", propertyName: proKeys.Property.PropertyName);

                    //Global.TraceLogger?.LogAction(ClassLogCode, $"{proKeys.Property.Action.GetType().GetClassName()}.{nameof(IRecordAction.ForwardSelfOnly)}", propertyName: proKeys.Property.PropertyName);
                    int changes = proKeys.Property.Action.ForwardSelfOnly(proKeys, forwardFrom);
                    if (changes > 0)
                        changed += changes;
                }
                else if (forwardFrom != null)
                {   // Should never reach here as Default already handled outside of foreach loop.
                    throw new Exception("WTF. Code should never reach this point.");
                }
            }

            return changed;
        }

        /// <summary>
        ///     Process a Merge rule against current record
        /// </summary>
        /// <param name="proKeys">Current processing keys</param>
        /// <param name="ruleKey">Current key of current rule</param>
        /// <returns>
        ///     Number of updates made to current record. -1 if record didn't meet requirements for
        ///     this rule
        /// </returns>
        private static int processMergeRecord (ProcessingKeys proKeys)
        {
            if (!proKeys.Property.Action.CanMerge())
            {
                Global.TraceLogger?.Log(ClassLogCode, $"Unknown / Unimplemented field for merge action.", propertyName: proKeys.Property.PropertyName);
                return -1;
            }

            if (proKeys.CheckOnlyIfDefault())
                return -1;

            Global.TraceLogger?.LogAction(ClassLogCode, $"{proKeys.Property.Action.GetType().GetClassName()}.{nameof(IRecordAction.Merge)}", propertyName: proKeys.Property.PropertyName);
            int changed = proKeys.Property.Action.Merge(proKeys);

            if (changed > 0)
                RecordUpdates.Add((proKeys.Type, proKeys.Record.FormKey, proKeys.Rule, proKeys.Property, changed));

            return changed;
        }

        /// <summary>
        ///     Process rule against current record
        /// </summary>
        /// <param name="proKeys">Current processing keys</param>
        /// <param name="ruleKey">Current key of current rule</param>
        /// <returns>
        ///     Number of updates made to current record. -1 if record didn't meet requirements for
        ///     this rule
        /// </returns>
        private static int processRule (ProcessingKeys proKeys)
        {
            var rule = proKeys.Rule;

            // We want result to be 0 if no actions so it works with SingleMatch
            if (!rule.Fill.SafeAny() && !rule.Forward.SafeAny() && !rule.Merge.SafeAny())
            {
                Global.TraceLogger?.Log(ClassLogCode, "Rule contains no actions.");
                return 0;
            }

            int changes = -1;

            if (rule.Merge.Count > 0)
            {
                int versions = Global.State.LinkCache.ResolveAllSimpleContexts(proKeys.Record.FormKey, proKeys.Record.Registration.GetterType).Count();
                switch (versions)
                {
                    case < 2:
                        if (Global.Settings.Value.Logging.NoisyLogs.MergeNoOverwrites)
                            Global.TraceLogger?.Log(ClassLogCode, "Doesn't have any overwrites to merge with.");
                        break;

                    default:
                        foreach (var x in rule.Merge)
                        {
                            if (!proKeys.SetProperty(x.Key, x.Key.Value))
                            {
                                Global.TraceLogger?.Log(ClassLogCode, $"Failed on merge. No RPM for Field.", propertyName: x.Key.Value);
                                continue;
                            }

                            int changed = processMergeRecord(proKeys);

                            if (changed >= 0)
                                changes = (changes == -1) ? changed : changes + changed;
                        }

                        break;
                }
            }

            foreach (var x in rule.Forward)
            {
                int changed = processForwardRecord(proKeys, x.Key);

                if (changed >= 0)
                    changes = (changes == -1) ? changed : changes + changed;
            }

            foreach (var x in rule.Fill)
            {
                int changed = processFillRecord(proKeys, x.Key);

                if (changed >= 0)
                    changes = (changes == -1) ? changed : changes + changed;
            }

            return changes;
        }
    }
}